./chat.txt:        # convert the mask to binary
./chat.txt:        mask = img2.convert('1')
./chat.txt:        # apply the mask
./chat.txt:        img = Image.composite(img1, img3, mask)
./chat.txt:        # convert the mask to binary
./chat.txt:        mask = img2.convert('1')
./chat.txt:        # apply the mask
./chat.txt:        img = Image.composite(img1, img3, mask)
./chat.txt:    # convert the mask to binary
./chat.txt:    ret, mask = cv2.threshold(img2, 127, 255, cv2.THRESH_BINARY)
./chat.txt:    # apply the mask
./chat.txt:    img = cv2.bitwise_and(img1, img1, mask=mask)
./inference.py:			img_masked = img_batch.copy()
./inference.py:			img_masked[:, args.img_size//2:] = 0
./inference.py:			img_batch = np.concatenate((img_masked, img_batch), axis=3) / 255.
./inference.py:		img_masked = img_batch.copy()
./inference.py:		img_masked[:, args.img_size//2:] = 0
./inference.py:		img_batch = np.concatenate((img_masked, img_batch), axis=3) / 255.
Binary file ./venv/bin/python matches
Binary file ./venv/bin/python3 matches
Binary file ./venv/bin/python3.8 matches
./venv/include/site/python3.8/pygame/include/sse2neon.h:// based on the mask i.
./venv/include/site/python3.8/pygame/include/sse2neon.h:// Shuffle packed 8-bit integers in a according to shuffle control mask in the
./venv/include/site/python3.8/pygame/include/sse2neon.h:    uint8x16_t idx_masked =
./venv/include/site/python3.8/pygame/include/sse2neon.h:    return vreinterpretq_m128i_s8(vqtbl1q_s8(tbl, idx_masked));
./venv/include/site/python3.8/pygame/include/sse2neon.h:        : [tbl] "w"(tbl), [idx] "w"(idx_masked));
./venv/include/site/python3.8/pygame/include/sse2neon.h:        vcombine_s8(vtbl2_s8(a_split, vget_low_u8(idx_masked)),
./venv/include/site/python3.8/pygame/include/sse2neon.h:                    vtbl2_s8(a_split, vget_high_u8(idx_masked))));
./venv/include/site/python3.8/pygame/include/sse2neon.h:// Blend packed 16-bit integers from a and b using control mask imm8, and store
./venv/include/site/python3.8/pygame/include/sse2neon.h:        const uint16_t _mask[8] = {((imm) & (1 << 0)) ? 0xFFFF : 0x0000,  \
./venv/include/site/python3.8/pygame/include/sse2neon.h:        uint16x8_t _mask_vec = vld1q_u16(_mask);                          \
./venv/include/site/python3.8/pygame/include/sse2neon.h:        vreinterpretq_m128i_u16(vbslq_u16(_mask_vec, _b, _a));            \
./venv/include/site/python3.8/pygame/include/sse2neon.h:// Blend packed 8-bit integers from a and b using mask, and store the results in
./venv/include/site/python3.8/pygame/include/sse2neon.h://       IF mask[i+7]
./venv/include/site/python3.8/pygame/include/sse2neon.h:FORCE_INLINE __m128i _mm_blendv_epi8(__m128i _a, __m128i _b, __m128i _mask)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // Use a signed shift right to create a mask with the sign bit
./venv/include/site/python3.8/pygame/include/sse2neon.h:    uint8x16_t mask =
./venv/include/site/python3.8/pygame/include/sse2neon.h:        vreinterpretq_u8_s8(vshrq_n_s8(vreinterpretq_s8_m128i(_mask), 7));
./venv/include/site/python3.8/pygame/include/sse2neon.h:    return vreinterpretq_m128i_u8(vbslq_u8(mask, b, a));
./venv/include/site/python3.8/pygame/include/sse2neon.h:// Creates a 16-bit mask from the most significant bits of the 16 signed or
./venv/include/site/python3.8/pygame/include/sse2neon.h:FORCE_INLINE int _mm_movemask_epi8(__m128i a)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    const uint8x16_t mask_and = vdupq_n_u8(0x80);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    const int8x16_t mask_shift = vld1q_s8(xr);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    const uint8x16_t mask_result =
./venv/include/site/python3.8/pygame/include/sse2neon.h:        vshlq_u8(vandq_u8(input, mask_and), mask_shift);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    uint8x8_t lo = vget_low_u8(mask_result);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    uint8x8_t hi = vget_high_u8(mask_result);
./venv/include/site/python3.8/pygame/include/sse2neon.h:// Creates a 4-bit mask from the most significant bits of the four
./venv/include/site/python3.8/pygame/include/sse2neon.h:FORCE_INLINE int _mm_movemask_ps(__m128 a)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // Uses the exact same method as _mm_movemask_epi8, see that for details.
./venv/include/site/python3.8/pygame/include/sse2neon.h:// mask, and return 1 if the result is zero, otherwise return 0.
./venv/include/site/python3.8/pygame/include/sse2neon.h:FORCE_INLINE int _mm_test_all_zeros(__m128i a, __m128i mask)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int64x2_t a_and_mask =
./venv/include/site/python3.8/pygame/include/sse2neon.h:        vandq_s64(vreinterpretq_s64_m128i(a), vreinterpretq_s64_m128i(mask));
./venv/include/site/python3.8/pygame/include/sse2neon.h:    return (vgetq_lane_s64(a_and_mask, 0) | vgetq_lane_s64(a_and_mask, 1)) ? 0
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int8x16_t masked = vbslq_s8(ltMask, vnegq_s8(a), a);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // res = masked & (~zeroMask)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int8x16_t res = vbicq_s8(masked, zeroMask);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int16x8_t masked = vbslq_s16(ltMask, vnegq_s16(a), a);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // res = masked & (~zeroMask)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int16x8_t res = vbicq_s16(masked, zeroMask);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int32x4_t masked = vbslq_s32(ltMask, vnegq_s32(a), a);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // res = masked & (~zeroMask)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int32x4_t res = vbicq_s32(masked, zeroMask);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int16x4_t masked = vbsl_s16(ltMask, vneg_s16(a), a);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // res = masked & (~zeroMask)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int16x4_t res = vbic_s16(masked, zeroMask);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int32x2_t masked = vbsl_s32(ltMask, vneg_s32(a), a);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // res = masked & (~zeroMask)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int32x2_t res = vbic_s32(masked, zeroMask);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int8x8_t masked = vbsl_s8(ltMask, vneg_s8(a), a);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // res = masked & (~zeroMask)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int8x8_t res = vbic_s8(masked, zeroMask);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // vmull_u32 upcasts instead of masking, so we downcast.
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // vmull_s32 upcasts instead of masking, so we downcast.
./venv/include/site/python3.8/pygame/include/sse2neon.h:    __m128 mask = {-1.0f, 1.0f, -1.0f, 1.0f};
./venv/include/site/python3.8/pygame/include/sse2neon.h:    return _mm_fmadd_ps(b, mask, a);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int32x4_t mask = vreinterpretq_s32_s64(vdupq_n_s64(0x80000000ull));
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int32x4_t a_mask = veorq_s32(vreinterpretq_s32_m128i(a), mask);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int32x4_t b_mask = veorq_s32(vreinterpretq_s32_m128i(b), mask);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int64x2_t greater = vreinterpretq_s64_u32(vcgtq_s32(a_mask, b_mask));
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // Copy upper mask to lower mask
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // Copy lower mask to upper mask
./venv/include/site/python3.8/pygame/include/sse2neon.h:    int64x2_t equal = vreinterpretq_s64_u32(vceqq_s32(a_mask, b_mask));
./venv/include/site/python3.8/pygame/include/sse2neon.h:    // Copy upper mask to lower mask
./venv/include/site/python3.8/pygame/include/sse2neon.h:    uint32x4_t signmask = vdupq_n_u32(0x80000000);
./venv/include/site/python3.8/pygame/include/sse2neon.h:    float32x4_t half = vbslq_f32(signmask, vreinterpretq_f32_m128(a),
./venv/include/site/python3.8/pygame/include/sse2neon.h:// using mask, and store the results in dst.
./venv/include/site/python3.8/pygame/include/sse2neon.h:FORCE_INLINE __m128 _mm_blendv_ps(__m128 a, __m128 b, __m128 mask)
./venv/include/site/python3.8/pygame/include/sse2neon.h:    return vreinterpretq_m128_f32(vbslq_f32(vreinterpretq_u32_m128(mask),
./venv/include/site/python3.8/pygame/include/pygame_mask.h:#include "bitmask.h"
./venv/include/site/python3.8/pygame/include/pygame_mask.h:    PyObject_HEAD bitmask_t *mask;
./venv/include/site/python3.8/pygame/include/pygame_mask.h:#define pgMask_AsBitmap(x) (((pgMaskObject *)x)->mask)
./venv/include/site/python3.8/pygame/include/pygame_mask.h:PYGAMEAPI_DEFINE_SLOTS(mask);
./venv/include/site/python3.8/pygame/include/pygame_mask.h:#define pgMask_Type (*(PyTypeObject *)PYGAMEAPI_GET_SLOT(mask, 0))
./venv/include/site/python3.8/pygame/include/pygame_mask.h:#define import_pygame_mask() _IMPORT_PYGAME_MODULE(mask)
./venv/include/site/python3.8/pygame/include/bitmask.h:    Bitmask 1.7 - A pixel-perfect collision detection library.
./venv/include/site/python3.8/pygame/include/bitmask.h:   bitmask_overlap_area().
./venv/include/site/python3.8/pygame/include/bitmask.h:typedef struct bitmask {
./venv/include/site/python3.8/pygame/include/bitmask.h:} bitmask_t;
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Creates a bitmask of width w and height h, where
./venv/include/site/python3.8/pygame/include/bitmask.h:   The mask is automatically cleared when created.
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_t *
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_create(int w, int h);
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Frees all the memory allocated by bitmask_create for m. */
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_free(bitmask_t *m);
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Create a copy of the given bitmask. */
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_t *
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_copy(bitmask_t *m);
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Clears all bits in the mask */
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_clear(bitmask_t *m);
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Sets all bits in the mask */
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_fill(bitmask_t *m);
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Flips all bits in the mask */
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_invert(bitmask_t *m);
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Counts the bits in the mask */
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_count(bitmask_t *m);
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_getbit(const bitmask_t *m, int x, int y)
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_setbit(bitmask_t *m, int x, int y)
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_clearbit(bitmask_t *m, int x, int y)
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Returns nonzero if the masks overlap with the given offset.
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_overlap(const bitmask_t *a, const bitmask_t *b, int xoffset,
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Like bitmask_overlap(), but will also give a point of intersection.
./venv/include/site/python3.8/pygame/include/bitmask.h:   x and y are given in the coordinates of mask a, and are untouched
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_overlap_pos(const bitmask_t *a, const bitmask_t *b, int xoffset,
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_overlap_area(const bitmask_t *a, const bitmask_t *b, int xoffset,
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Fills a mask with the overlap of two other masks. A bitwise AND. */
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_overlap_mask(const bitmask_t *a, const bitmask_t *b, bitmask_t *c,
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Draws mask b onto mask a (bitwise OR). Can be used to compose large
./venv/include/site/python3.8/pygame/include/bitmask.h:   (game background?) mask from several submasks, which may speed up
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_draw(bitmask_t *a, const bitmask_t *b, int xoffset, int yoffset);
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_erase(bitmask_t *a, const bitmask_t *b, int xoffset, int yoffset);
./venv/include/site/python3.8/pygame/include/bitmask.h:/* Return a new scaled bitmask, with dimensions w*h. The quality of the
./venv/include/site/python3.8/pygame/include/bitmask.h:   be reasonable. If either w or h is 0 a clear 1x1 mask is returned. */
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_t *
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_scale(const bitmask_t *m, int w, int h);
./venv/include/site/python3.8/pygame/include/bitmask.h: * bitmask_overlap(a, b, x - b->w - 1, y - b->h - 1) returns true.
./venv/include/site/python3.8/pygame/include/bitmask.h:bitmask_convolve(const bitmask_t *a, const bitmask_t *b, bitmask_t *o,
./venv/include/site/python3.8/pygame/mask.h:#include "include/pygame_mask.h"
./venv/lib/python3.8/site-packages/IPython/utils/tests/test_path.py:    # Do not mask exceptions here.  In particular, catching WindowsError is a
./venv/lib/python3.8/site-packages/IPython/utils/tests/test_module_paths.py:    # Do not mask exceptions here.  In particular, catching WindowsError is a
./venv/lib/python3.8/site-packages/IPython/core/compilerop.py:# this is used as a bitmask to extract future-related code flags.
./venv/lib/python3.8/site-packages/IPython/core/tests/test_profile.py:    # Do not mask exceptions here.  In particular, catching WindowsError is a
./venv/lib/python3.8/site-packages/IPython/core/tests/test_paths.py:    # Do not mask exceptions here.  In particular, catching WindowsError is a
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:    mask = i.unsqueeze(dim=-3) == torch.arange(6, device=i.device).view(-1, 1, 1)
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:    return torch.einsum("...ijk, ...xijk -> ...xjk", mask.to(dtype=img.dtype), a4)
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:    # Append a dummy mask for customized fill colors, should be faster than grid_sample() twice
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:        mask = img[:, -1:, :, :]  # N * 1 * H * W
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:        mask = mask.expand_as(img)
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:            mask = mask < 0.5
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:            img[mask] = fill_img[mask]
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:            img = img * mask + (1.0 - mask) * fill_img
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:    mask = -int(2 ** (8 - bits))  # JIT-friendly for: ~(2 ** (8 - bits) - 1)
./venv/lib/python3.8/site-packages/torchvision/transforms/functional_tensor.py:    return img & mask
./venv/lib/python3.8/site-packages/torchvision/transforms/transforms.py:        transforming target image masks. See the `references`_ for implementing the transforms for image masks.
Binary file ./venv/lib/python3.8/site-packages/torchvision/transforms/__pycache__/transforms.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/transforms/__pycache__/functional_tensor.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/torchvision/ops/_utils.py:    mask = (ykis2 > ykis1) & (xkis2 > xkis1)
./venv/lib/python3.8/site-packages/torchvision/ops/_utils.py:    intsctk[mask] = (xkis2[mask] - xkis1[mask]) * (ykis2[mask] - ykis1[mask])
./venv/lib/python3.8/site-packages/torchvision/ops/__init__.py:    masks_to_boxes,
./venv/lib/python3.8/site-packages/torchvision/ops/__init__.py:    "masks_to_boxes",
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:    mask: Optional[Tensor] = None,
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:    <https://arxiv.org/abs/1811.11168>`__ if :attr:`mask` is not ``None`` and
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:    <https://arxiv.org/abs/1703.06211>`__ if :attr:`mask` is ``None``.
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:        mask (Tensor[batch_size, offset_groups * kernel_height * kernel_width, out_height, out_width]):
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:            masks to be applied for each position in the convolution kernel. Default: None
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:        >>> # offset and mask should have the same spatial size as the output
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:        >>> mask = torch.rand(4, kh * kw, 8, 8)
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:        >>> out = deform_conv2d(input, offset, weight, mask=mask)
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:    use_mask = mask is not None
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:    if mask is None:
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:        mask = torch.zeros((input.shape[0], 0), device=input.device, dtype=input.dtype)
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:        mask,
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:        use_mask,
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:    def forward(self, input: Tensor, offset: Tensor, mask: Optional[Tensor] = None) -> Tensor:
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:            mask (Tensor[batch_size, offset_groups * kernel_height * kernel_width, out_height, out_width]):
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:                masks to be applied for each position in the convolution kernel.
./venv/lib/python3.8/site-packages/torchvision/ops/deform_conv.py:            mask=mask,
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:    keep_mask = torch.zeros_like(scores, dtype=torch.bool)
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:        keep_mask[curr_indices[curr_keep_indices]] = True
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:    keep_indices = torch.where(keep_mask)[0]
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:def masks_to_boxes(masks: torch.Tensor) -> torch.Tensor:
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:    Compute the bounding boxes around the provided masks.
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:        masks (Tensor[N, H, W]): masks to transform where N is the number of masks
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:        _log_api_usage_once(masks_to_boxes)
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:    if masks.numel() == 0:
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:        return torch.zeros((0, 4), device=masks.device, dtype=torch.float)
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:    n = masks.shape[0]
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:    bounding_boxes = torch.zeros((n, 4), device=masks.device, dtype=torch.float)
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:    for index, mask in enumerate(masks):
./venv/lib/python3.8/site-packages/torchvision/ops/boxes.py:        y, x = torch.where(mask != 0)
Binary file ./venv/lib/python3.8/site-packages/torchvision/ops/__pycache__/boxes.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/ops/__pycache__/_utils.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/ops/__pycache__/__init__.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/ops/__pycache__/deform_conv.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/_C.so matches
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/_utils.py:def upsample_flow(flow, up_mask: Optional[Tensor] = None):
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/_utils.py:    If up_mask is None we just interpolate.
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/_utils.py:    If up_mask is specified, we upsample using a convex combination of its weights. See paper page 8 and appendix B.
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/_utils.py:    if up_mask is None:
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/_utils.py:    up_mask = up_mask.view(batch_size, 1, 9, 8, 8, h, w)
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/_utils.py:    up_mask = torch.softmax(up_mask, dim=2)  # "convex" == weights sum to 1
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/_utils.py:    upsampled_flow = torch.sum(up_mask * upsampled_flow, dim=2)
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:    It takes the hidden state of the recurrent unit as input and outputs the mask.
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:    def __init__(self, *, feature_encoder, context_encoder, corr_block, update_block, mask_predictor=None):
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:            mask_predictor (nn.Module, optional): Predicts the mask that will be used to upsample the predicted flow.
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:        self.mask_predictor = mask_predictor
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:            up_mask = None if self.mask_predictor is None else self.mask_predictor(hidden_state)
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:            upsampled_flow = upsample_flow(flow=(coords1 - coords0), up_mask=up_mask)
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:    use_mask_predictor,
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:    mask_predictor = kwargs.pop("mask_predictor", None)
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:    if mask_predictor is None and use_mask_predictor:
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:        mask_predictor = MaskPredictor(
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:        mask_predictor=mask_predictor,
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:        use_mask_predictor=True,
./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/raft.py:        use_mask_predictor=False,
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/__pycache__/raft.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/optical_flow/__pycache__/_utils.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/torchvision/models/_meta.py:    "gasmask",
./venv/lib/python3.8/site-packages/torchvision/models/_meta.py:    "mask",
./venv/lib/python3.8/site-packages/torchvision/models/_meta.py:    "oxygen mask",
./venv/lib/python3.8/site-packages/torchvision/models/_meta.py:    "ski mask",
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/__pycache__/swin_transformer.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/__pycache__/_meta.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:def maskrcnn_inference(x, labels):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    From the results of the CNN, post process the masks
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    by taking the mask corresponding to the class with max
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    by the CNN) and return the masks in the mask field of the BoxList.
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        x (Tensor): the mask logits
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:            the extra field mask
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask_prob = x.sigmoid()
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    # select masks corresponding to the predicted classes
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    num_masks = x.shape[0]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    index = torch.arange(num_masks, device=labels.device)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask_prob = mask_prob[index, labels][:, None]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask_prob = mask_prob.split(boxes_per_image, dim=0)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    return mask_prob
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:def project_masks_on_boxes(gt_masks, boxes, matched_idxs, M):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    Given segmentation masks and the bounding boxes corresponding
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    to the location of the masks in the image, this function
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    crops and resizes the masks in the position defined by the
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    boxes. This prepares the masks for them to be fed to the
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    gt_masks = gt_masks[:, None].to(rois)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    return roi_align(gt_masks, rois, (M, M), 1.0)[:, 0]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:def maskrcnn_loss(mask_logits, proposals, gt_masks, gt_labels, mask_matched_idxs):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        mask_logits (Tensor)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        mask_loss (Tensor): scalar tensor containing the loss
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    discretization_size = mask_logits.shape[-1]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    labels = [gt_label[idxs] for gt_label, idxs in zip(gt_labels, mask_matched_idxs)]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask_targets = [
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        project_masks_on_boxes(m, p, i, discretization_size) for m, p, i in zip(gt_masks, proposals, mask_matched_idxs)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask_targets = torch.cat(mask_targets, dim=0)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    if mask_targets.numel() == 0:
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        return mask_logits.sum() * 0
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask_loss = F.binary_cross_entropy_with_logits(
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        mask_logits[torch.arange(labels.shape[0], device=labels.device), labels], mask_targets
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    return mask_loss
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:# temporarily for paste_mask_in_image
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:def expand_masks_tracing_scale(M, padding):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:def expand_masks(mask, padding):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    M = mask.shape[-1]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        scale = expand_masks_tracing_scale(M, padding)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    padded_mask = F.pad(mask, (padding,) * 4)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    return padded_mask, scale
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:def paste_mask_in_image(mask, box, im_h, im_w):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask = mask.expand((1, 1, -1, -1))
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    # Resize mask
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask = F.interpolate(mask, size=(h, w), mode="bilinear", align_corners=False)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask = mask[0][0]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    im_mask = torch.zeros((im_h, im_w), dtype=mask.dtype, device=mask.device)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    im_mask[y_0:y_1, x_0:x_1] = mask[(y_0 - box[1]) : (y_1 - box[1]), (x_0 - box[0]) : (x_1 - box[0])]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    return im_mask
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:def _onnx_paste_mask_in_image(mask, box, im_h, im_w):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask = mask.expand((1, 1, mask.size(0), mask.size(1)))
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    # Resize mask
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask = F.interpolate(mask, size=(int(h), int(w)), mode="bilinear", align_corners=False)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    mask = mask[0][0]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    unpaded_im_mask = mask[(y_0 - box[1]) : (y_1 - box[1]), (x_0 - box[0]) : (x_1 - box[0])]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    zeros_y0 = torch.zeros(y_0, unpaded_im_mask.size(1))
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    zeros_y1 = torch.zeros(im_h - y_1, unpaded_im_mask.size(1))
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    concat_0 = torch.cat((zeros_y0, unpaded_im_mask.to(dtype=torch.float32), zeros_y1), 0)[0:im_h, :]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    im_mask = torch.cat((zeros_x0, concat_0, zeros_x1), 1)[:, :im_w]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    return im_mask
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:def _onnx_paste_masks_in_image_loop(masks, boxes, im_h, im_w):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    for i in range(masks.size(0)):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        mask_res = _onnx_paste_mask_in_image(masks[i][0], boxes[i], im_h, im_w)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        mask_res = mask_res.unsqueeze(0)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        res_append = torch.cat((res_append, mask_res))
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:def paste_masks_in_image(masks, boxes, img_shape, padding=1):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    masks, scale = expand_masks(masks, padding=padding)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        return _onnx_paste_masks_in_image_loop(
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:            masks, boxes, torch.scalar_tensor(im_h, dtype=torch.int64), torch.scalar_tensor(im_w, dtype=torch.int64)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    res = [paste_mask_in_image(m[0], b, im_h, im_w) for m, b in zip(masks, boxes)]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        ret = masks.new_empty((0, 1, im_h, im_w))
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        mask_roi_pool=None,
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        mask_head=None,
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        mask_predictor=None,
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        self.mask_roi_pool = mask_roi_pool
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        self.mask_head = mask_head
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        self.mask_predictor = mask_predictor
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:    def has_mask(self):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        if self.mask_roi_pool is None:
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        if self.mask_head is None:
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        if self.mask_predictor is None:
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        if self.has_mask():
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:            if not all(["masks" in t for t in targets]):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                raise ValueError("Every element of targets should have a masks key")
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:        if self.has_mask():
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:            mask_proposals = [p["boxes"] for p in result]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                mask_proposals = []
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                    mask_proposals.append(proposals[img_id][pos])
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:            if self.mask_roi_pool is not None:
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                mask_features = self.mask_roi_pool(features, mask_proposals, image_shapes)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                mask_features = self.mask_head(mask_features)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                mask_logits = self.mask_predictor(mask_features)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                raise Exception("Expected mask_roi_pool to be not None")
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:            loss_mask = {}
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                if targets is None or pos_matched_idxs is None or mask_logits is None:
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                    raise ValueError("targets, pos_matched_idxs, mask_logits cannot be None when training")
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                gt_masks = [t["masks"] for t in targets]
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                rcnn_loss_mask = maskrcnn_loss(mask_logits, mask_proposals, gt_masks, gt_labels, pos_matched_idxs)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                loss_mask = {"loss_mask": rcnn_loss_mask}
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                masks_probs = maskrcnn_inference(mask_logits, labels)
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                for mask_prob, r in zip(masks_probs, result):
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:                    r["masks"] = mask_prob
./venv/lib/python3.8/site-packages/torchvision/models/detection/roi_heads.py:            losses.update(loss_mask)
./venv/lib/python3.8/site-packages/torchvision/models/detection/retinanet.py:                like `scores`, `labels` and `mask` (for Mask R-CNN models).
./venv/lib/python3.8/site-packages/torchvision/models/detection/_utils.py:        Returns two lists of binary masks for each image.
./venv/lib/python3.8/site-packages/torchvision/models/detection/_utils.py:            # create binary mask from indices
./venv/lib/python3.8/site-packages/torchvision/models/detection/_utils.py:            pos_idx_per_image_mask = torch.zeros_like(matched_idxs_per_image, dtype=torch.uint8)
./venv/lib/python3.8/site-packages/torchvision/models/detection/_utils.py:            neg_idx_per_image_mask = torch.zeros_like(matched_idxs_per_image, dtype=torch.uint8)
./venv/lib/python3.8/site-packages/torchvision/models/detection/_utils.py:            pos_idx_per_image_mask[pos_idx_per_image] = 1
./venv/lib/python3.8/site-packages/torchvision/models/detection/_utils.py:            neg_idx_per_image_mask[neg_idx_per_image] = 1
./venv/lib/python3.8/site-packages/torchvision/models/detection/_utils.py:            pos_idx.append(pos_idx_per_image_mask)
./venv/lib/python3.8/site-packages/torchvision/models/detection/_utils.py:            neg_idx.append(neg_idx_per_image_mask)
./venv/lib/python3.8/site-packages/torchvision/models/detection/__init__.py:from .mask_rcnn import *
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:    "maskrcnn_resnet50_fpn",
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:    "maskrcnn_resnet50_fpn_v2",
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        - masks (UInt8Tensor[N, H, W]): the segmentation binary masks for each instance
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:    losses for both the RPN and the R-CNN, and the mask loss.
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        - masks (UInt8Tensor[N, 1, H, W]): the predicted masks for each instance, in 0-1 range. In order to
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:          obtain the final segmentation masks, the soft masks can be thresholded, generally
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:          with a value of 0.5 (mask >= 0.5)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        mask_roi_pool (MultiScaleRoIAlign): the module which crops and resizes the feature maps in
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:             the locations indicated by the bounding boxes, which will be used for the mask head.
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        mask_head (nn.Module): module that takes the cropped feature maps as input
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        mask_predictor (nn.Module): module that takes the output of the mask_head and returns the
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            segmentation mask logits
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        >>> mask_roi_pooler = torchvision.ops.MultiScaleRoIAlign(featmap_names=['0'],
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        >>>                  mask_roi_pool=mask_roi_pooler)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        mask_roi_pool=None,
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        mask_head=None,
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        mask_predictor=None,
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        if not isinstance(mask_roi_pool, (MultiScaleRoIAlign, type(None))):
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:                f"mask_roi_pool should be of type MultiScaleRoIAlign or None instead of {type(mask_roi_pool)}"
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            if mask_predictor is not None:
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:                raise ValueError("num_classes should be None when mask_predictor is specified")
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        if mask_roi_pool is None:
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            mask_roi_pool = MultiScaleRoIAlign(featmap_names=["0", "1", "2", "3"], output_size=14, sampling_ratio=2)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        if mask_head is None:
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            mask_layers = (256, 256, 256, 256)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            mask_dilation = 1
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            mask_head = MaskRCNNHeads(out_channels, mask_layers, mask_dilation)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        if mask_predictor is None:
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            mask_predictor_in_channels = 256  # == mask_layers[-1]
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            mask_dim_reduced = 256
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            mask_predictor = MaskRCNNPredictor(mask_predictor_in_channels, mask_dim_reduced, num_classes)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        self.roi_heads.mask_roi_pool = mask_roi_pool
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        self.roi_heads.mask_head = mask_head
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        self.roi_heads.mask_predictor = mask_predictor
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:                    old_key = f"{prefix}mask_fcn{i+1}.{type}"
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:                    ("conv5_mask", nn.ConvTranspose2d(in_channels, dim_reduced, 2, 2, 0)),
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:                    ("mask_fcn_logits", nn.Conv2d(dim_reduced, num_classes, 1, 1, 0)),
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        url="https://download.pytorch.org/models/maskrcnn_resnet50_fpn_coco-bf2d0c1e.pth",
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            "recipe": "https://github.com/pytorch/vision/tree/main/references/detection#mask-r-cnn",
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:                    "mask_map": 34.6,
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        url="https://download.pytorch.org/models/maskrcnn_resnet50_fpn_v2_coco-73cbd019.pth",
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:                    "mask_map": 41.8,
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:def maskrcnn_resnet50_fpn(
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        - masks (``UInt8Tensor[N, H, W]``): the segmentation binary masks for each instance
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:    losses for both the RPN and the R-CNN, and the mask loss.
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        - masks (``UInt8Tensor[N, 1, H, W]``): the predicted masks for each instance, in ``0-1`` range. In order to
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:          obtain the final segmentation masks, the soft masks can be thresholded, generally
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:          with a value of 0.5 (``mask >= 0.5``)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:    For more details on the output and on how to plot the masks, you may refer to :ref:`instance_seg_output`.
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        >>> model = torchvision.models.detection.maskrcnn_resnet50_fpn(weights=MaskRCNN_ResNet50_FPN_Weights.DEFAULT)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        >>> torch.onnx.export(model, x, "mask_rcnn.onnx", opset_version = 11)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        **kwargs: parameters passed to the ``torchvision.models.detection.mask_rcnn.MaskRCNN``
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            <https://github.com/pytorch/vision/blob/main/torchvision/models/detection/mask_rcnn.py>`_
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:def maskrcnn_resnet50_fpn_v2(
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:    :func:`~torchvision.models.detection.maskrcnn_resnet50_fpn` for more details.
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        **kwargs: parameters passed to the ``torchvision.models.detection.mask_rcnn.MaskRCNN``
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:            <https://github.com/pytorch/vision/blob/main/torchvision/models/detection/mask_rcnn.py>`_
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:    mask_head = MaskRCNNHeads(backbone.out_channels, [256, 256, 256, 256], 1, norm_layer=nn.BatchNorm2d)
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        mask_head=mask_head,
./venv/lib/python3.8/site-packages/torchvision/models/detection/mask_rcnn.py:        "maskrcnn_resnet50_fpn_coco": MaskRCNN_ResNet50_FPN_Weights.COCO_V1.url,
./venv/lib/python3.8/site-packages/torchvision/models/detection/generalized_rcnn.py:            detections / masks from it.
./venv/lib/python3.8/site-packages/torchvision/models/detection/generalized_rcnn.py:                like `scores`, `labels` and `mask` (for Mask R-CNN models).
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:from .roi_heads import paste_masks_in_image
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:def _resize_image_and_masks(
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:    if "masks" in target:
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:        mask = target["masks"]
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:        mask = torch.nn.functional.interpolate(
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:            mask[:, None].float(), size=size, scale_factor=scale_factor, recompute_scale_factor=recompute_scale_factor
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:        target["masks"] = mask
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:        image, target = _resize_image_and_masks(image, size, float(self.max_size), target, self.fixed_size)
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:            if "masks" in pred:
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:                masks = pred["masks"]
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:                masks = paste_masks_in_image(masks, boxes, o_im_s)
./venv/lib/python3.8/site-packages/torchvision/models/detection/transform.py:                result[i]["masks"] = masks
./venv/lib/python3.8/site-packages/torchvision/models/detection/backbone_utils.py:            (https://github.com/facebookresearch/maskrcnn-benchmark/issues/267)
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/detection/__pycache__/mask_rcnn.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/detection/__pycache__/backbone_utils.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/detection/__pycache__/fcos.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/detection/__pycache__/_utils.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/detection/__pycache__/__init__.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/detection/__pycache__/roi_heads.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/detection/__pycache__/retinanet.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/detection/__pycache__/transform.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/models/detection/__pycache__/generalized_rcnn.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/torchvision/models/detection/fcos.py:        foregroud_mask = all_gt_classes_targets >= 0
./venv/lib/python3.8/site-packages/torchvision/models/detection/fcos.py:        num_foreground = foregroud_mask.sum().item()
./venv/lib/python3.8/site-packages/torchvision/models/detection/fcos.py:        gt_classes_targets[foregroud_mask, all_gt_classes_targets[foregroud_mask]] = 1.0
./venv/lib/python3.8/site-packages/torchvision/models/detection/fcos.py:            torch.stack(pred_boxes)[foregroud_mask].float(),
./venv/lib/python3.8/site-packages/torchvision/models/detection/fcos.py:            torch.stack(all_gt_boxes_targets)[foregroud_mask],
./venv/lib/python3.8/site-packages/torchvision/models/detection/fcos.py:            pred_centerness[foregroud_mask], gt_ctrness_targets[foregroud_mask], reduction="sum"
./venv/lib/python3.8/site-packages/torchvision/models/detection/fcos.py:                like `scores`, `labels` and `mask` (for Mask R-CNN models).
./venv/lib/python3.8/site-packages/torchvision/models/swin_transformer.py:        # generate attention mask
./venv/lib/python3.8/site-packages/torchvision/models/swin_transformer.py:        attn_mask = x.new_zeros((pad_H, pad_W))
./venv/lib/python3.8/site-packages/torchvision/models/swin_transformer.py:                attn_mask[h[0] : h[1], w[0] : w[1]] = count
./venv/lib/python3.8/site-packages/torchvision/models/swin_transformer.py:        attn_mask = attn_mask.view(pad_H // window_size[0], window_size[0], pad_W // window_size[1], window_size[1])
./venv/lib/python3.8/site-packages/torchvision/models/swin_transformer.py:        attn_mask = attn_mask.permute(0, 2, 1, 3).reshape(num_windows, window_size[0] * window_size[1])
./venv/lib/python3.8/site-packages/torchvision/models/swin_transformer.py:        attn_mask = attn_mask.unsqueeze(1) - attn_mask.unsqueeze(2)
./venv/lib/python3.8/site-packages/torchvision/models/swin_transformer.py:        attn_mask = attn_mask.masked_fill(attn_mask != 0, float(-100.0)).masked_fill(attn_mask == 0, float(0.0))
./venv/lib/python3.8/site-packages/torchvision/models/swin_transformer.py:        attn = attn + attn_mask.unsqueeze(1).unsqueeze(0)
./venv/lib/python3.8/site-packages/torchvision/datasets/sbd.py:        mask_dir = os.path.join(sbd_root, "cls")
./venv/lib/python3.8/site-packages/torchvision/datasets/sbd.py:        self.masks = [os.path.join(mask_dir, x + ".mat") for x in file_names]
./venv/lib/python3.8/site-packages/torchvision/datasets/sbd.py:        target = self._get_target(self.masks[index])
./venv/lib/python3.8/site-packages/torchvision/datasets/voc.py:    def masks(self) -> List[str]:
./venv/lib/python3.8/site-packages/torchvision/datasets/voc.py:        target = Image.open(self.masks[index])
Binary file ./venv/lib/python3.8/site-packages/torchvision/datasets/__pycache__/sbd.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/datasets/__pycache__/voc.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/datasets/__pycache__/celeba.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchvision/datasets/__pycache__/_optical_flow.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:    # Some datasets like Kitti have a built-in valid_flow_mask, indicating which flow values are valid
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:    # For those we return (img1, img2, flow, valid_flow_mask), and for the rest we return (img1, img2, flow),
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:    # and it's up to whatever consumes the dataset to decide what valid_flow_mask should be.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:    _has_builtin_flow_mask = False
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:        # Return the flow or a tuple with the flow and the valid_flow_mask if _has_builtin_flow_mask is True
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            if self._has_builtin_flow_mask:
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:                flow, valid_flow_mask = flow
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:                valid_flow_mask = None
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            flow = valid_flow_mask = None
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            img1, img2, flow, valid_flow_mask = self.transforms(img1, img2, flow, valid_flow_mask)
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:        if self._has_builtin_flow_mask or valid_flow_mask is not None:
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            # The `or valid_flow_mask is not None` part is here because the mask can be generated within a transform
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            return img1, img2, flow, valid_flow_mask
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            ``img1, img2, flow, valid_flow_mask`` and returns a transformed version.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            ``valid_flow_mask`` is expected for consistency with other datasets which
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            return a built-in valid mask, such as :class:`~torchvision.datasets.KittiFlow`.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            If a valid flow mask is generated within the ``transforms`` parameter,
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            a 4-tuple with ``(img1, img2, flow, valid_flow_mask)`` is returned.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            ``img1, img2, flow, valid_flow_mask`` and returns a transformed version.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:    _has_builtin_flow_mask = True
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            tuple: A 4-tuple with ``(img1, img2, flow, valid_flow_mask)``
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            where ``valid_flow_mask`` is a numpy boolean mask of shape (H, W)
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            shape (2, H, W) and the images are PIL images. ``flow`` and ``valid_flow_mask`` are None if
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:        return _read_16bits_png_with_flow_and_valid_mask(file_name)
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            ``img1, img2, flow, valid_flow_mask`` and returns a transformed version.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            ``valid_flow_mask`` is expected for consistency with other datasets which
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            return a built-in valid mask, such as :class:`~torchvision.datasets.KittiFlow`.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            If a valid flow mask is generated within the ``transforms`` parameter,
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            a 4-tuple with ``(img1, img2, flow, valid_flow_mask)`` is returned.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            ``img1, img2, flow, valid_flow_mask`` and returns a transformed version.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            ``valid_flow_mask`` is expected for consistency with other datasets which
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            return a built-in valid mask, such as :class:`~torchvision.datasets.KittiFlow`.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            If a valid flow mask is generated within the ``transforms`` parameter,
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            a 4-tuple with ``(img1, img2, flow, valid_flow_mask)`` is returned.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            ``img1, img2, flow, valid_flow_mask`` and returns a transformed version.
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:    _has_builtin_flow_mask = True
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:        return _read_16bits_png_with_flow_and_valid_mask(file_name)
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            tuple: A 4-tuple with ``(img1, img2, flow, valid_flow_mask)`` where ``valid_flow_mask``
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            is a numpy boolean mask of shape (H, W)
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:            shape (2, H, W) and the images are PIL images. ``flow`` and ``valid_flow_mask`` are None if
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:def _read_16bits_png_with_flow_and_valid_mask(file_name):
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:    flow, valid_flow_mask = flow_and_valid[:2, :, :], flow_and_valid[2, :, :]
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:    valid_flow_mask = valid_flow_mask.bool()
./venv/lib/python3.8/site-packages/torchvision/datasets/_optical_flow.py:    return flow.numpy(), valid_flow_mask.numpy()
./venv/lib/python3.8/site-packages/torchvision/datasets/celeba.py:        mask = slice(None) if split_ is None else (splits.data == split_).squeeze()
./venv/lib/python3.8/site-packages/torchvision/datasets/celeba.py:        if mask == slice(None):  # if split == "all"
./venv/lib/python3.8/site-packages/torchvision/datasets/celeba.py:            self.filename = [splits.index[i] for i in torch.squeeze(torch.nonzero(mask))]
./venv/lib/python3.8/site-packages/torchvision/datasets/celeba.py:        self.identity = identity.data[mask]
./venv/lib/python3.8/site-packages/torchvision/datasets/celeba.py:        self.bbox = bbox.data[mask]
./venv/lib/python3.8/site-packages/torchvision/datasets/celeba.py:        self.landmarks_align = landmarks_align.data[mask]
./venv/lib/python3.8/site-packages/torchvision/datasets/celeba.py:        self.attr = attr.data[mask]
Binary file ./venv/lib/python3.8/site-packages/torchvision/__pycache__/utils.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/torchvision/utils.py:    "draw_segmentation_masks",
./venv/lib/python3.8/site-packages/torchvision/utils.py:def draw_segmentation_masks(
./venv/lib/python3.8/site-packages/torchvision/utils.py:    masks: torch.Tensor,
./venv/lib/python3.8/site-packages/torchvision/utils.py:    Draws segmentation masks on given RGB image.
./venv/lib/python3.8/site-packages/torchvision/utils.py:        masks (Tensor): Tensor of shape (num_masks, H, W) or (H, W) and dtype bool.
./venv/lib/python3.8/site-packages/torchvision/utils.py:        alpha (float): Float number between 0 and 1 denoting the transparency of the masks.
./venv/lib/python3.8/site-packages/torchvision/utils.py:            of the masks or single color for all masks. The color can be represented as
./venv/lib/python3.8/site-packages/torchvision/utils.py:            By default, random colors are generated for each mask.
./venv/lib/python3.8/site-packages/torchvision/utils.py:        img (Tensor[C, H, W]): Image Tensor, with segmentation masks drawn on top.
./venv/lib/python3.8/site-packages/torchvision/utils.py:        _log_api_usage_once(draw_segmentation_masks)
./venv/lib/python3.8/site-packages/torchvision/utils.py:    if masks.ndim == 2:
./venv/lib/python3.8/site-packages/torchvision/utils.py:        masks = masks[None, :, :]
./venv/lib/python3.8/site-packages/torchvision/utils.py:    if masks.ndim != 3:
./venv/lib/python3.8/site-packages/torchvision/utils.py:        raise ValueError("masks must be of shape (H, W) or (batch_size, H, W)")
./venv/lib/python3.8/site-packages/torchvision/utils.py:    if masks.dtype != torch.bool:
./venv/lib/python3.8/site-packages/torchvision/utils.py:        raise ValueError(f"The masks must be of dtype bool. Got {masks.dtype}")
./venv/lib/python3.8/site-packages/torchvision/utils.py:    if masks.shape[-2:] != image.shape[-2:]:
./venv/lib/python3.8/site-packages/torchvision/utils.py:        raise ValueError("The image and the masks must have the same height and width")
./venv/lib/python3.8/site-packages/torchvision/utils.py:    num_masks = masks.size()[0]
./venv/lib/python3.8/site-packages/torchvision/utils.py:    if colors is not None and num_masks > len(colors):
./venv/lib/python3.8/site-packages/torchvision/utils.py:        raise ValueError(f"There are more masks ({num_masks}) than colors ({len(colors)})")
./venv/lib/python3.8/site-packages/torchvision/utils.py:    if num_masks == 0:
./venv/lib/python3.8/site-packages/torchvision/utils.py:        warnings.warn("masks doesn't contain any mask. No mask was drawn")
./venv/lib/python3.8/site-packages/torchvision/utils.py:        colors = _generate_color_palette(num_masks)
./venv/lib/python3.8/site-packages/torchvision/utils.py:    for mask, color in zip(masks, colors_):
./venv/lib/python3.8/site-packages/torchvision/utils.py:        img_to_draw[:, mask] = color[:, None]
Binary file ./venv/lib/python3.8/site-packages/torchvision/image.so matches
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                and_mask = Image.new("1", size)
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                    and_mask, image_io, [("raw", (0, 0) + size, 0, ("1", 0, -1))]
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:            # XOR + AND mask bmp frame
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:            # figure out where AND mask image starts
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                mask = Image.frombuffer(
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                # the total mask data is
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                and_mask_offset = header["offset"] + header["size"] - total_bytes
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                self.buf.seek(and_mask_offset)
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                mask_data = self.buf.read(total_bytes)
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                mask = Image.frombuffer(
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                    mask_data,  # source chars
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:                # now we have two images, im is XOR image and mask is AND image
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:            # apply mask image as alpha channel
./venv/lib/python3.8/site-packages/PIL/IcoImagePlugin.py:            im.putalpha(mask)
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    for idx, mask in enumerate(
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                        ["r_mask", "g_mask", "b_mask", "a_mask"]
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                        file_info[mask] = i32(header_data, 36 + idx * 4)
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    # bitfields masks, ref:
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    file_info["a_mask"] = 0x0
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    for mask in ["r_mask", "g_mask", "b_mask"]:
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                        file_info[mask] = i32(read(4))
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                file_info["rgb_mask"] = (
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    file_info["r_mask"],
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    file_info["g_mask"],
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    file_info["b_mask"],
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                file_info["rgba_mask"] = (
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    file_info["r_mask"],
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    file_info["g_mask"],
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    file_info["b_mask"],
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    file_info["a_mask"],
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    and file_info["rgba_mask"] in SUPPORTED[file_info["bits"]]
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    raw_mode = MASK_MODES[(file_info["bits"], file_info["rgba_mask"])]
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    and file_info["rgb_mask"] in SUPPORTED[file_info["bits"]]
./venv/lib/python3.8/site-packages/PIL/BmpImagePlugin.py:                    raw_mode = MASK_MODES[(file_info["bits"], file_info["rgb_mask"])]
./venv/lib/python3.8/site-packages/PIL/ImageChops.py:    :py:meth:`~PIL.ImageChops.multiply` instead, using a black-and-white mask
./venv/lib/python3.8/site-packages/PIL/ImageChops.py:def composite(image1, image2, mask):
./venv/lib/python3.8/site-packages/PIL/ImageChops.py:    """Create composite using transparency mask. Alias for
./venv/lib/python3.8/site-packages/PIL/ImageChops.py:    return Image.composite(image1, image2, mask)
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:        masks = struct.unpack("<4I", header.read(16))
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:            masks = {mask: ["R", "G", "B", "A"][i] for i, mask in enumerate(masks)}
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:                rawmode += masks[0xFF000000]
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:            rawmode += masks[0xFF0000] + masks[0xFF00] + masks[0xFF]
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:    masks = [0xFF0000, 0xFF00, 0xFF]
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:        masks.append(0xFF000000)
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:    bitcount = len(masks) * 8
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:    while len(masks) < 4:
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:        masks.append(0)
./venv/lib/python3.8/site-packages/PIL/DdsImagePlugin.py:        + b"".join(o32(mask) for mask in masks)  # rgbabitmask
./venv/lib/python3.8/site-packages/PIL/ImageFilter.py:    """Unsharp mask filter.
./venv/lib/python3.8/site-packages/PIL/ImageFilter.py:    See Wikipedia's entry on `digital unsharp masking`_ for an explanation of
./venv/lib/python3.8/site-packages/PIL/ImageFilter.py:    .. _digital unsharp masking: https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking
./venv/lib/python3.8/site-packages/PIL/ImageFilter.py:        return image.unsharp_mask(self.radius, self.percent, self.threshold)
Binary file ./venv/lib/python3.8/site-packages/PIL/_imaging.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/PIL/IcnsImagePlugin.py:    # Alpha masks seem to be uncompressed
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:def autocontrast(image, cutoff=0, ignore=None, mask=None, preserve_tone=False):
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:    histogram of the input image (or mask region), removes ``cutoff`` percent of the
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:    :param mask: Histogram used in contrast operation is computed using pixels
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:                 within the mask. If no mask is given the entire image is used
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:        histogram = image.convert("L").histogram(mask)
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:        histogram = image.histogram(mask)
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:def equalize(image, mask=None):
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:    :param mask: An optional mask.  If given, only the pixels selected by
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:                 the mask are included in the analysis.
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:    h = image.histogram(mask)
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:    mask = ~(2 ** (8 - bits) - 1)
./venv/lib/python3.8/site-packages/PIL/ImageOps.py:        lut.append(i & mask)
./venv/lib/python3.8/site-packages/PIL/ImageFont.py:    def getmask(self, text, mode="", *args, **kwargs):
./venv/lib/python3.8/site-packages/PIL/ImageFont.py:        return self.font.getmask(text, mode)
./venv/lib/python3.8/site-packages/PIL/ImageFont.py:    def getmask(
./venv/lib/python3.8/site-packages/PIL/ImageFont.py:        return self.getmask2(
./venv/lib/python3.8/site-packages/PIL/ImageFont.py:    def getmask2(
./venv/lib/python3.8/site-packages/PIL/ImageFont.py:    def getmask(self, text, mode="", *args, **kwargs):
./venv/lib/python3.8/site-packages/PIL/ImageFont.py:        im = self.font.getmask(text, mode, *args, **kwargs)
./venv/lib/python3.8/site-packages/PIL/ImageFont.py:        # TransposedFont doesn't support getmask2, move top-left point to (0, 0)
./venv/lib/python3.8/site-packages/PIL/ImageStat.py:# 1997-05-21 fl   Added mask; added rms, var, stddev attributes
./venv/lib/python3.8/site-packages/PIL/ImageStat.py:    def __init__(self, image_or_list, mask=None):
./venv/lib/python3.8/site-packages/PIL/ImageStat.py:            if mask:
./venv/lib/python3.8/site-packages/PIL/ImageStat.py:                self.h = image_or_list.histogram(mask)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:# 2006-06-19 fl   Added font bearing support (getmask2)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                # use the fill as a mask
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                mask = Image.new("1", self.im.size)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                mask_ink = self._getink(1)[0]
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                fill_im = mask.copy()
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                draw.draw.draw_polygon(xy, mask_ink, 1)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                ink_im = mask.copy()
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                draw.draw.draw_polygon(xy, mask_ink, 0, width)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                mask.paste(ink_im, mask=fill_im)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                self.im.paste(im.im, (0, 0) + im.size, mask.im)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                mask, offset = font.getmask2(
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                    mask = font.getmask(
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                    mask = font.getmask(text)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                # font.getmask2(mode="RGBA") returns color in RGB bands and mask in A
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                # extract mask and set text alpha
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                color, mask = mask, mask.getband(3)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                self.im.paste(color, (x, y, x + mask.size[0], y + mask.size[1]), mask)
./venv/lib/python3.8/site-packages/PIL/ImageDraw.py:                self.draw.draw_bitmap(coord, mask, ink)
./venv/lib/python3.8/site-packages/PIL/Image.py:    def histogram(self, mask=None, extrema=None):
./venv/lib/python3.8/site-packages/PIL/Image.py:        If a mask is provided, the method returns a histogram for those
./venv/lib/python3.8/site-packages/PIL/Image.py:        parts of the image where the mask image is non-zero. The mask
./venv/lib/python3.8/site-packages/PIL/Image.py:        :param mask: An optional mask.
./venv/lib/python3.8/site-packages/PIL/Image.py:        if mask:
./venv/lib/python3.8/site-packages/PIL/Image.py:            mask.load()
./venv/lib/python3.8/site-packages/PIL/Image.py:            return self.im.histogram((0, 0), mask.im)
./venv/lib/python3.8/site-packages/PIL/Image.py:    def entropy(self, mask=None, extrema=None):
./venv/lib/python3.8/site-packages/PIL/Image.py:        If a mask is provided, the method employs the histogram for
./venv/lib/python3.8/site-packages/PIL/Image.py:        those parts of the image where the mask image is non-zero.
./venv/lib/python3.8/site-packages/PIL/Image.py:        The mask image must have the same size as the image, and be
./venv/lib/python3.8/site-packages/PIL/Image.py:        :param mask: An optional mask.
./venv/lib/python3.8/site-packages/PIL/Image.py:        if mask:
./venv/lib/python3.8/site-packages/PIL/Image.py:            mask.load()
./venv/lib/python3.8/site-packages/PIL/Image.py:            return self.im.entropy((0, 0), mask.im)
./venv/lib/python3.8/site-packages/PIL/Image.py:    def paste(self, im, box=None, mask=None):
./venv/lib/python3.8/site-packages/PIL/Image.py:        If a mask is given, this method updates only the regions
./venv/lib/python3.8/site-packages/PIL/Image.py:        indicated by the mask. You can use either "1", "L", "LA", "RGBA"
./venv/lib/python3.8/site-packages/PIL/Image.py:        or "RGBa" images (if present, the alpha band is used as mask).
./venv/lib/python3.8/site-packages/PIL/Image.py:        Where the mask is 255, the given image is copied as is.  Where
./venv/lib/python3.8/site-packages/PIL/Image.py:        the mask is 0, the current value is preserved.  Intermediate
./venv/lib/python3.8/site-packages/PIL/Image.py:           is interpreted as a mask image.
./venv/lib/python3.8/site-packages/PIL/Image.py:        :param mask: An optional mask image.
./venv/lib/python3.8/site-packages/PIL/Image.py:        if isImageType(box) and mask is None:
./venv/lib/python3.8/site-packages/PIL/Image.py:            # abbreviated paste(im, mask) syntax
./venv/lib/python3.8/site-packages/PIL/Image.py:            mask = box
./venv/lib/python3.8/site-packages/PIL/Image.py:            # upper left corner given; get size from image or mask
./venv/lib/python3.8/site-packages/PIL/Image.py:            elif isImageType(mask):
./venv/lib/python3.8/site-packages/PIL/Image.py:                size = mask.size
./venv/lib/python3.8/site-packages/PIL/Image.py:        if mask:
./venv/lib/python3.8/site-packages/PIL/Image.py:            mask.load()
./venv/lib/python3.8/site-packages/PIL/Image.py:            self.im.paste(im, box, mask.im)
./venv/lib/python3.8/site-packages/PIL/Image.py:def composite(image1, image2, mask):
./venv/lib/python3.8/site-packages/PIL/Image.py:    Create composite image by blending images using a transparency mask.
./venv/lib/python3.8/site-packages/PIL/Image.py:    :param mask: A mask image.  This image can have mode
./venv/lib/python3.8/site-packages/PIL/Image.py:    image.paste(image1, None, mask)
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/IcoImagePlugin.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/ImageStat.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/ImageDraw.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/ImageFilter.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/ImageChops.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/ImageOps.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/Image.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/BmpImagePlugin.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/ImageFont.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/PIL/__pycache__/DdsImagePlugin.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/PIL/PsdImagePlugin.py:        # layer and mask information
Binary file ./venv/lib/python3.8/site-packages/torchvision.libs/libpng16.7f72a3c5.so.16 matches
Binary file ./venv/lib/python3.8/site-packages/torchvision.libs/libnvjpeg.23816019.so.10 matches
Binary file ./venv/lib/python3.8/site-packages/Pillow.libs/liblzma-160b9c62.so.5.4.0 matches
Binary file ./venv/lib/python3.8/site-packages/Pillow.libs/libtiff-b9364ff1.so.6.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/Pillow.libs/libxcb-3e83370d.so.1.1.0 matches
Binary file ./venv/lib/python3.8/site-packages/Pillow.libs/libharfbuzz-ceb38b77.so.0.60000.0 matches
Binary file ./venv/lib/python3.8/site-packages/Pillow.libs/libfreetype-9ff7e0a7.so.6.18.3 matches
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _masked_scale(Tensor self, Tensor mask, float scale) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CUDA: masked_scale_cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: native_dropout_backward(Tensor grad_output, Tensor mask, float scale) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: convolution_backward(Tensor grad_output, Tensor input, Tensor weight, int[]? bias_sizes, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: mps_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[2] output_mask) -> (Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _rowwise_prune(Tensor weight, Tensor mask, ScalarType compressed_indices_dtype) -> (Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:# `grid_sampler_2d_backward` takes in `output_mask` to optimize performance for
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:# computed (only `output_mask[0]` is checked by the implementations).
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:# `grid_sampler_3d_backward` takes in `output_mask` to optimize performance for
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:# computed (only `output_mask[0]` is checked by the implementations).
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: native_group_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int N, int C, int HxW, int group, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: native_layer_norm_backward(Tensor grad_out, Tensor input, int[] normalized_shape, Tensor mean, Tensor rstd, Tensor? weight, Tensor? bias, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: mkldnn_linear_backward(Tensor self, Tensor grad_output, Tensor weight, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: mps_linear_backward(Tensor self, Tensor grad_output, Tensor weight, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: mps_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _sparse_mask_helper(Tensor t, Tensor mask_indices) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    SparseCPU: sparse_mask_helper_cpu
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    SparseCUDA: sparse_mask_helper_cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _nested_tensor_from_mask(Tensor t, Tensor mask) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU, CUDA: NestedTensor_nested_tensor_from_mask
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: sparse_mask(Tensor self, Tensor mask) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    SparseCPU: sparse_mask_cpu
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    SparseCUDA: sparse_mask_cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    SparseCsrCPU, SparseCsrCUDA: sparse_mask_sparse_csr
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: fake_quantize_per_tensor_affine_cachemask(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU, CUDA: fake_quantize_per_tensor_affine_cachemask
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _fake_quantize_per_tensor_affine_cachemask_tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, Tensor fake_quant_enabled, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU, CUDA: _fake_quantize_per_tensor_affine_cachemask_tensor_qparams
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: fake_quantize_per_tensor_affine_cachemask_backward(Tensor grad, Tensor mask) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: fake_quantize_per_channel_affine_cachemask(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU, CUDA: fake_quantize_per_channel_affine_cachemask
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: fake_quantize_per_channel_affine_cachemask_backward(Tensor grad, Tensor mask) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _fused_moving_avg_obs_fq_helper(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor output, Tensor mask)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> Tensor(a!)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU: masked_fill__cpu
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CUDA: masked_fill__cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    MPS: masked_fill__mps
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:  autogen: masked_fill.Scalar_out
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CompositeExplicitAutograd: masked_fill
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> Tensor(a!)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU: masked_fill__cpu
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CUDA: masked_fill__cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    MPS: masked_fill__mps
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:  autogen: masked_fill.Tensor_out
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CompositeExplicitAutograd: masked_fill
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> Tensor(a!)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU: masked_scatter__cpu
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CUDA: masked_scatter__cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:  autogen: masked_scatter.out
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: masked_scatter(Tensor self, Tensor mask, Tensor source) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CompositeExplicitAutograd: masked_scatter
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _masked_softmax(Tensor self, Tensor mask, int? dim=None) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CUDA: masked_softmax_cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU: masked_softmax_cpu
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _masked_softmax_backward(Tensor grad_output, Tensor output, Tensor mask, int? dim=None) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CUDA: masked_softmax_backward_cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU: masked_softmax_backward_cpu
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> Tensor(a!)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU: masked_select_out_cpu
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CUDA: masked_select_out_cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: masked_select(Tensor self, Tensor mask) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CPU: masked_select_cpu
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:    CUDA: masked_select_cuda
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: masked_select_backward(Tensor grad, Tensor input, Tensor mask) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _slow_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _transformer_encoder_layer_fwd(Tensor src, int embed_dim, int num_heads, Tensor qkv_weight, Tensor qkv_bias, Tensor proj_weight, Tensor proj_bias, bool use_gelu, bool norm_first, float eps, Tensor norm_weight_1, Tensor norm_bias_1, Tensor norm_weight_2, Tensor norm_bias_2, Tensor ffn_weight_1, Tensor ffn_bias_1, Tensor ffn_weight_2, Tensor ffn_bias_2, Tensor? mask=None) -> Tensor
./venv/lib/python3.8/site-packages/torchgen/packaged/ATen/native/native_functions.yaml:- func: _native_multi_head_attention(Tensor query, Tensor key, Tensor value, int embed_dim, int num_head, Tensor qkv_weight, Tensor qkv_bias, Tensor proj_weight, Tensor proj_bias, Tensor? mask=None, bool need_weights=True, bool average_attn_weights=True) -> (Tensor, Tensor)
./venv/lib/python3.8/site-packages/torchgen/gen.py:DispatchKeySet _dk_mask = c10::DispatchKeySet(DispatchKeySet::FULL_AFTER, DispatchKey::BackendSelect);
./venv/lib/python3.8/site-packages/torchgen/gen.py:DispatchKeySet _dk = c10::impl::computeDispatchKeySet(_dk_set, _dk_mask);"""
Binary file ./venv/lib/python3.8/site-packages/torchgen/__pycache__/model.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/torchgen/__pycache__/gen.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/torchgen/native_function_generation.py:    # There's a functional variant, _slow_conv2d_backward.output_mask, that isn't grouped properly.
./venv/lib/python3.8/site-packages/torchgen/native_function_generation.py:#   _fused_moving_avg_obs_fq_helper(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor output, Tensor mask)  # noqa: B950
./venv/lib/python3.8/site-packages/torchgen/static_runtime/config.py:    if op_name == "masked_select":
./venv/lib/python3.8/site-packages/torchgen/static_runtime/config.py:            arg_map["mask"] = "at::randn({6, 6, 6}) > 0.5"
./venv/lib/python3.8/site-packages/torchgen/static_runtime/config.py:            arg_map["mask"] = "at::rand({22, 22, 22}) > 0.5"
Binary file ./venv/lib/python3.8/site-packages/torchgen/static_runtime/__pycache__/config.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/torchgen/model.py:        _fused_moving_avg_obs_fq_helper(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor output, Tensor mask)  # noqa: B950
./venv/lib/python3.8/site-packages/torchgen/model.py:        _fused_moving_avg_obs_fq_helper.functional(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor running_min, Tensor running_max, Tensor scale, Tensor zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor output, Tensor mask, Tensor running_min_out, Tensor running_max_out, Tensor scale_out, Tensor zero_point_out)  # noqa: B950
./venv/lib/python3.8/site-packages/jedi/third_party/django-stubs/django-stubs/contrib/auth/hashers.pyi:def mask_hash(hash: str, show: int = ..., char: str = ...) -> str: ...
./venv/lib/python3.8/site-packages/jedi/third_party/django-stubs/django-stubs/db/models/sql/query.pyi:    annotation_select_mask: Optional[Set[str]] = ...
./venv/lib/python3.8/site-packages/jedi/third_party/django-stubs/django-stubs/db/models/sql/query.pyi:    extra_select_mask: Optional[Set[str]] = ...
./venv/lib/python3.8/site-packages/jedi/third_party/django-stubs/django-stubs/db/models/sql/query.pyi:    def set_annotation_mask(self, names: Optional[Union[List[str], Set[str], Tuple]]) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/django-stubs/django-stubs/db/models/sql/query.pyi:    def append_annotation_mask(self, names: List[str]) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/django-stubs/django-stubs/db/models/sql/query.pyi:    def set_extra_mask(self, names: Union[List[str], Tuple]) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/google/protobuf/internal/well_known_types.pyi:    def CanonicalFormFromMask(self, mask: tAny) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/google/protobuf/internal/well_known_types.pyi:    def Union(self, mask1: tAny, mask2: tAny) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/google/protobuf/internal/well_known_types.pyi:    def Intersect(self, mask1: tAny, mask2: tAny) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/google/protobuf/internal/well_known_types.pyi:    def __init__(self, field_mask: Optional[tAny] = ...) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/google/protobuf/internal/well_known_types.pyi:    def MergeFromFieldMask(self, field_mask: tAny) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/google/protobuf/internal/well_known_types.pyi:    def ToFieldMask(self, field_mask: tAny) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/paramiko/py3compat.pyi:def byte_mask(c: int, mask: int) -> bytes: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/requests/utils.pyi:def dotted_netmask(mask): ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/dateutil/rrule.pyi:    mmask: Any = ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/dateutil/rrule.pyi:    mdaymask: Any = ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/dateutil/rrule.pyi:    nmdaymask: Any = ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/dateutil/rrule.pyi:    wdaymask: Any = ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/dateutil/rrule.pyi:    wnomask: Any = ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/dateutil/rrule.pyi:    nwdaymask: Any = ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/dateutil/rrule.pyi:    eastermask: Any = ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/pycurl.pyi:    def pause(self, bitmask: Any) -> Any: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2and3/pycurl.pyi:    def socket_action(self, sockfd: int, ev_bitmask: int) -> Tuple[int, int]: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2/ipaddress.pyi:    netmask: _A
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2/ipaddress.pyi:    def with_hostmask(self) -> Text: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2/ipaddress.pyi:    def with_netmask(self) -> Text: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2/ipaddress.pyi:    def hostmask(self) -> _A: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2/ipaddress.pyi:    hostmask: _A
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2/ipaddress.pyi:    netmask: _A
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2/ipaddress.pyi:    def with_hostmask(self) -> Text: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2/ipaddress.pyi:    def with_netmask(self) -> Text: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/third_party/2/ipaddress.pyi:class NetmaskValueError(ValueError): ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/ipaddress.pyi:    netmask: _A
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/ipaddress.pyi:    def with_hostmask(self) -> str: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/ipaddress.pyi:    def with_netmask(self) -> str: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/ipaddress.pyi:    def hostmask(self) -> _A: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/ipaddress.pyi:    hostmask: _A
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/ipaddress.pyi:    netmask: _A
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/ipaddress.pyi:    def with_hostmask(self) -> str: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/ipaddress.pyi:    def with_netmask(self) -> str: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/ipaddress.pyi:class NetmaskValueError(ValueError): ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/os/__init__.pyi:def umask(__mask: int) -> int: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/os/__init__.pyi:    def sched_setaffinity(pid: int, mask: Iterable[int]) -> None: ...  # some flavors of Unix
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/tkinter/__init__.pyi:    def wm_iconmask(self, bitmap: Optional[Any] = ...): ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/tkinter/__init__.pyi:    iconmask: Any
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/signal.pyi:    class Sigmasks(IntEnum):
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/signal.pyi:    SIG_BLOCK = Sigmasks.SIG_BLOCK
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/signal.pyi:    SIG_UNBLOCK = Sigmasks.SIG_UNBLOCK
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/signal.pyi:    SIG_SETMASK = Sigmasks.SIG_SETMASK
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/3/signal.pyi:    def pthread_sigmask(__how: int, __mask: Iterable[int]) -> Set[_SIGNUM]: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/select.pyi:    def register(self, fd: FileDescriptorLike, eventmask: int = ...) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/select.pyi:    def modify(self, fd: FileDescriptorLike, eventmask: int) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/select.pyi:        def register(self, fd: FileDescriptorLike, eventmask: int = ...) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/select.pyi:        def modify(self, fd: FileDescriptorLike, eventmask: int) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/select.pyi:            def register(self, fd: FileDescriptorLike, eventmask: int = ...) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/select.pyi:            def modify(self, fd: FileDescriptorLike, eventmask: int = ...) -> None: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/msilib/__init__.pyi:    datasizemask: Literal[0x00FF]
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/msilib/__init__.pyi:    typemask: Literal[0x0C00]
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/syslog.pyi:def setlogmask(x: int) -> int: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2and3/_curses.pyi:def mousemask(__newmask: int) -> Tuple[int, int]: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2/sys.pyi:    suite_mask: Any
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2/os/__init__.pyi:def umask(mask: int) -> int: ...
./venv/lib/python3.8/site-packages/jedi/third_party/typeshed/stdlib/2/posix.pyi:def umask(mask: int) -> int: ...
./venv/lib/python3.8/site-packages/moviepy-1.0.3.dist-info/RECORD:moviepy/video/fx/__pycache__/mask_and.cpython-38.pyc,,
./venv/lib/python3.8/site-packages/moviepy-1.0.3.dist-info/RECORD:moviepy/video/fx/__pycache__/mask_color.cpython-38.pyc,,
./venv/lib/python3.8/site-packages/moviepy-1.0.3.dist-info/RECORD:moviepy/video/fx/__pycache__/mask_or.cpython-38.pyc,,
./venv/lib/python3.8/site-packages/moviepy-1.0.3.dist-info/RECORD:moviepy/video/fx/mask_and.py,sha256=Pr-osWikjIQp9Re5MT3ufezOL25Ttz8r-KuAAHLlyTU,662
./venv/lib/python3.8/site-packages/moviepy-1.0.3.dist-info/RECORD:moviepy/video/fx/mask_color.py,sha256=3ertiUdcgbna8d6rkY7Vo8ylz2ilkegiIGsK0sNAOu8,903
./venv/lib/python3.8/site-packages/moviepy-1.0.3.dist-info/RECORD:moviepy/video/fx/mask_or.py,sha256=72oxhZe1jM04JpR0osezDtPvUWb7PJMdr0Sc7diZrcc,666
./venv/lib/python3.8/site-packages/traitlets/config/argcomplete_config.py:        # arbitrary extra_args, which ends up masking subparsers.
Binary file ./venv/lib/python3.8/site-packages/opencv_python_headless.libs/libavformat-8ef5c7db.so.58.76.100 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_python_headless.libs/libpng16-57e5e0a0.so.16.37.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_python_headless.libs/libavcodec-5896f664.so.58.134.100 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_python_headless.libs/libssl-c8c53640.so.1.1 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_python_headless.libs/libgfortran-91cc3cb1.so.3.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_python_headless.libs/libavutil-9c768859.so.56.70.100 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_python_headless.libs/libvpx-f22f1483.so.7.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_python_headless.libs/libcrypto-d21001fc.so.1.1 matches
./venv/lib/python3.8/site-packages/librosa/util/__init__.py:    softmask
Binary file ./venv/lib/python3.8/site-packages/librosa/util/__pycache__/utils.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/librosa/util/__pycache__/__init__.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    "softmask",
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    # First mask out all entries not equal to the local max
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    # Then mask out all entries less than the thresholded average
./venv/lib/python3.8/site-packages/librosa/util/utils.py:def softmask(X, X_ref, power=1, split_zeros=False):
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    """Robustly compute a soft-mask operation.
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        The (non-negative) input array corresponding to the positive mask elements
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        If finite, returns the soft mask computed in a numerically stable way
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        If infinite, returns a hard (binary) mask equivalent to ``X > X_ref``.
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        Note: for hard masks, ties are always broken in favor of ``X_ref`` (``mask=0``).
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        will receive mask values of 0.5.
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        Otherwise, the mask is set to 0 for these entries.
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    mask : np.ndarray, shape=X.shape
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        The output mask array
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    >>> librosa.util.softmask(X, X_ref, power=1)
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    >>> librosa.util.softmask(X_ref, X, power=1)
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    >>> librosa.util.softmask(X, X_ref, power=2)
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    >>> librosa.util.softmask(X, X_ref, power=4)
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    >>> librosa.util.softmask(X, X_ref, power=100)
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    >>> librosa.util.softmask(X, X_ref, power=np.inf)
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    # For finite power, compute the softmask
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        mask = (X / Z) ** power
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        ref_mask = (X_ref / Z) ** power
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        mask[good_idx] /= mask[good_idx] + ref_mask[good_idx]
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        # Wherever energy is below energy in both inputs, split the mask
./venv/lib/python3.8/site-packages/librosa/util/utils.py:            mask[bad_idx] = 0.5
./venv/lib/python3.8/site-packages/librosa/util/utils.py:            mask[bad_idx] = 0.0
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        # Otherwise, compute the hard mask
./venv/lib/python3.8/site-packages/librosa/util/utils.py:        mask = X > X_ref
./venv/lib/python3.8/site-packages/librosa/util/utils.py:    return mask
./venv/lib/python3.8/site-packages/librosa/decompose.py:def hpss(S, kernel_size=31, power=2.0, mask=False, margin=1.0):
./venv/lib/python3.8/site-packages/librosa/decompose.py:        Exponent for the Wiener filter when constructing soft mask matrices.
./venv/lib/python3.8/site-packages/librosa/decompose.py:    mask : bool
./venv/lib/python3.8/site-packages/librosa/decompose.py:        Return the masking matrices instead of components.
./venv/lib/python3.8/site-packages/librosa/decompose.py:        Components can be recovered by multiplying ``S * mask_H``
./venv/lib/python3.8/site-packages/librosa/decompose.py:        or ``S * mask_P``.
./venv/lib/python3.8/site-packages/librosa/decompose.py:        margin size(s) for the masks (as described in [2]_)
./venv/lib/python3.8/site-packages/librosa/decompose.py:          harmonic mask, and the second value specifies the margin
./venv/lib/python3.8/site-packages/librosa/decompose.py:          of the percussive mask.
./venv/lib/python3.8/site-packages/librosa/decompose.py:        harmonic component (or mask)
./venv/lib/python3.8/site-packages/librosa/decompose.py:        percussive component (or mask)
./venv/lib/python3.8/site-packages/librosa/decompose.py:    librosa.util.softmask
./venv/lib/python3.8/site-packages/librosa/decompose.py:    Just get harmonic/percussive masks, not the spectra
./venv/lib/python3.8/site-packages/librosa/decompose.py:    >>> mask_H, mask_P = librosa.decompose.hpss(D, mask=True)
./venv/lib/python3.8/site-packages/librosa/decompose.py:    >>> mask_H
./venv/lib/python3.8/site-packages/librosa/decompose.py:    >>> mask_P
./venv/lib/python3.8/site-packages/librosa/decompose.py:    mask_harm = util.softmask(
./venv/lib/python3.8/site-packages/librosa/decompose.py:    mask_perc = util.softmask(
./venv/lib/python3.8/site-packages/librosa/decompose.py:    if mask:
./venv/lib/python3.8/site-packages/librosa/decompose.py:        return mask_harm, mask_perc
./venv/lib/python3.8/site-packages/librosa/decompose.py:    return ((S * mask_harm) * phase, (S * mask_perc) * phase)
./venv/lib/python3.8/site-packages/librosa/core/pitch.py:    pitch_mask = pitch > 0
./venv/lib/python3.8/site-packages/librosa/core/pitch.py:    if pitch_mask.any():
./venv/lib/python3.8/site-packages/librosa/core/pitch.py:        threshold = np.median(mag[pitch_mask])
./venv/lib/python3.8/site-packages/librosa/core/pitch.py:        pitch[(mag >= threshold) & pitch_mask],
./venv/lib/python3.8/site-packages/librosa/core/pitch.py:    freq_mask = ((fmin <= fft_freqs) & (fft_freqs < fmax)).reshape((-1, 1))
./venv/lib/python3.8/site-packages/librosa/core/pitch.py:    idx = np.argwhere(freq_mask & util.localmax(S * (S > ref_value)))
Binary file ./venv/lib/python3.8/site-packages/librosa/core/__pycache__/pitch.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/librosa/__pycache__/decompose.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/display.cpython-38-x86_64-linux-gnu.so matches
Binary file ./venv/lib/python3.8/site-packages/pygame/_sdl2/video.cpython-38-x86_64-linux-gnu.so matches
Binary file ./venv/lib/python3.8/site-packages/pygame/pypm.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/pygame/cursors.py:        """Cursor(size, hotspot, xormasks, andmasks) -> Cursor
./venv/lib/python3.8/site-packages/pygame/cursors.py:#    curs, mask = pygame.cursors.compile_cursor(pygame.cursors.thickarrow_strings, 'X', '.')
./venv/lib/python3.8/site-packages/pygame/cursors.py:#    pygame.mouse.set_cursor((24, 24), (0, 0), curs, mask)
./venv/lib/python3.8/site-packages/pygame/cursors.py:    """pygame.cursors.compile(strings, black, white, xor) -> data, mask
./venv/lib/python3.8/site-packages/pygame/cursors.py:    This returns a tuple containing the cursor data and cursor mask
./venv/lib/python3.8/site-packages/pygame/cursors.py:    maskdata = []
./venv/lib/python3.8/site-packages/pygame/cursors.py:    maskitem = fillitem = 0
./venv/lib/python3.8/site-packages/pygame/cursors.py:            maskitem = maskitem << 1
./venv/lib/python3.8/site-packages/pygame/cursors.py:                maskitem = maskitem | 1
./venv/lib/python3.8/site-packages/pygame/cursors.py:                maskitem = maskitem | 1
./venv/lib/python3.8/site-packages/pygame/cursors.py:                maskdata.append(maskitem)
./venv/lib/python3.8/site-packages/pygame/cursors.py:                maskitem = fillitem = 0
./venv/lib/python3.8/site-packages/pygame/cursors.py:    return tuple(filldata), tuple(maskdata)
./venv/lib/python3.8/site-packages/pygame/cursors.py:def load_xbm(curs, mask):
./venv/lib/python3.8/site-packages/pygame/cursors.py:    """pygame.cursors.load_xbm(cursorfile, maskfile) -> cursor_args
./venv/lib/python3.8/site-packages/pygame/cursors.py:    if hasattr(mask, "readlines"):
./venv/lib/python3.8/site-packages/pygame/cursors.py:        mask = mask.readlines()
./venv/lib/python3.8/site-packages/pygame/cursors.py:        with open(mask, encoding="ascii") as mask_f:
./venv/lib/python3.8/site-packages/pygame/cursors.py:            mask = mask_f.readlines()
./venv/lib/python3.8/site-packages/pygame/cursors.py:    for i, line in enumerate(mask):
./venv/lib/python3.8/site-packages/pygame/cursors.py:            mask = mask[i:]
./venv/lib/python3.8/site-packages/pygame/cursors.py:    for i, line in enumerate(mask):
./venv/lib/python3.8/site-packages/pygame/cursors.py:    data = " ".join(mask[i + 1 :]).replace("};", "").replace(",", " ")
./venv/lib/python3.8/site-packages/pygame/cursors.py:    maskdata = []
./venv/lib/python3.8/site-packages/pygame/cursors.py:        maskdata.append(bitswap(int(x, 16)))
./venv/lib/python3.8/site-packages/pygame/cursors.py:    maskdata = tuple(maskdata)
./venv/lib/python3.8/site-packages/pygame/cursors.py:    return info[:2], info[2:], cursdata, maskdata
./venv/lib/python3.8/site-packages/pygame/__init__.pyi:    mask as mask,
./venv/lib/python3.8/site-packages/pygame/__init__.pyi:from .mask import Mask as Mask
./venv/lib/python3.8/site-packages/pygame/__init__.py:    def Surface(size, flags, depth, masks):  # pylint: disable=unused-argument
./venv/lib/python3.8/site-packages/pygame/__init__.py:    import pygame.mask
./venv/lib/python3.8/site-packages/pygame/__init__.py:    from pygame.mask import Mask
./venv/lib/python3.8/site-packages/pygame/__init__.py:    mask = MissingModule("mask", urgent=0)
./venv/lib/python3.8/site-packages/pygame/mouse.pyi:    xormasks: Sequence[int],
./venv/lib/python3.8/site-packages/pygame/mouse.pyi:    andmasks: Sequence[int],
Binary file ./venv/lib/python3.8/site-packages/pygame/surface.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/pygame/tests/pixelcopy_test.py:                if surf.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/pixelcopy_test.py:    def iter_surface_to_array_3d(self, rgba_masks):
./venv/lib/python3.8/site-packages/pygame/tests/pixelcopy_test.py:        dst = pygame.Surface(self.surf_size, 0, 24, masks=rgba_masks)
./venv/lib/python3.8/site-packages/pygame/tests/pixelcopy_test.py:            self.surf_size, 0, 24, masks=[0xFF, 0xFF00, 0xFF0000, 0]
./venv/lib/python3.8/site-packages/pygame/tests/pixelcopy_test.py:                if surf.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/pixelcopy_test.py:            if surf.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/transform_test.py:        self.assertEqual(sr.get_masks(), s1.get_masks())
./venv/lib/python3.8/site-packages/pygame/tests/transform_test.py:            print(sr.get_masks(), s1.get_masks())
./venv/lib/python3.8/site-packages/pygame/tests/transform_test.py:            self.assertEqual(surf_av.get_masks(), surf_1.get_masks())
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:    def test_collide_mask__opaque(self):
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:        # make some fully opaque sprites that will collide with masks.
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:        # masks should be autogenerated from image if they don't exist.
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:                self.s1, self.ag2, dokill=False, collided=sprite.collide_mask
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:        self.s1.mask = pygame.mask.from_surface(self.s1.image)
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:        self.s2.mask = pygame.mask.from_surface(self.s2.image)
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:        self.s3.mask = pygame.mask.from_surface(self.s3.image)
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:        # with set masks.
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:                self.s1, self.ag2, dokill=False, collided=sprite.collide_mask
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:    def test_collide_mask__transparent(self):
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:        self.s1.mask = pygame.mask.from_surface(self.s1.image, 255)
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:        self.s2.mask = pygame.mask.from_surface(self.s2.image, 255)
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:        self.s3.mask = pygame.mask.from_surface(self.s3.image, 255)
./venv/lib/python3.8/site-packages/pygame/tests/sprite_test.py:                self.s1, self.ag2, dokill=False, collided=sprite.collide_mask
./venv/lib/python3.8/site-packages/pygame/tests/fixtures/xbm_cursors/white_sizing_mask.xbm:#define resize_white_mask_width 16
./venv/lib/python3.8/site-packages/pygame/tests/fixtures/xbm_cursors/white_sizing_mask.xbm:#define resize_white_mask_height 16
./venv/lib/python3.8/site-packages/pygame/tests/fixtures/xbm_cursors/white_sizing_mask.xbm:#define resize_white_mask_x_hot 7
./venv/lib/python3.8/site-packages/pygame/tests/fixtures/xbm_cursors/white_sizing_mask.xbm:#define resize_white_mask_y_hot 7
./venv/lib/python3.8/site-packages/pygame/tests/fixtures/xbm_cursors/white_sizing_mask.xbm:static unsigned char resize_white_mask_bits[] = {
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        xormask = (0, 96, 120, 126, 112, 96, 0, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        andmask = (224, 240, 254, 255, 254, 240, 96, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        expected_cursor = pygame.cursors.Cursor(size, hotspot, xormask, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor(size, hotspot, xormask, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        xormask = (0, 126, 64, 64, 32, 16, 0, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        andmask = (254, 255, 254, 112, 56, 28, 12, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        bitmap_cursor = pygame.cursors.Cursor(size, hotspot, xormask, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor(("w", "h"), hotspot, xormask, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor(size, ("0", "0"), xormask, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor(size, ("x", "y", "z"), xormask, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        # Bitmap: TypeError raised when either mask is not a sequence
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor(size, hotspot, 12345678, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor(size, hotspot, xormask, 12345678)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        # Bitmap: TypeError raised when element of mask is not an integer
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor(size, hotspot, "00000000", andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor(size, hotspot, xormask, (2, [0], 4, 0, 0, 8, 0, 1))
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor((3, 8), hotspot, xormask, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        # Bitmap: ValueError raised when length of either mask != width * height / 8
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor((16, 2), hotspot, (128, 64, 32), andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:            pygame.mouse.set_cursor((16, 2), hotspot, xormask, (192, 96, 48, 0, 1))
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        pygame.mouse.set_cursor(size, hotspot, xormask, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        # Bitmap: Working as intended + lists + masks with no references
./venv/lib/python3.8/site-packages/pygame/tests/mouse_test.py:        pygame.mouse.set_cursor(size, hotspot, list(xormask), list(andmask))
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:    def test_masks(self):
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        def make_surf(bpp, flags, masks):
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            pygame.Surface((10, 10), flags, bpp, masks)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        # With some masks SDL_CreateRGBSurface does not work properly.
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = (0xFF000000, 0xFF0000, 0xFF00, 0)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        self.assertEqual(make_surf(32, 0, masks), None)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = (0x7F0000, 0xFF00, 0xFF, 0)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        self.assertRaises(ValueError, make_surf, 24, 0, masks)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        self.assertRaises(ValueError, make_surf, 32, 0, masks)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        # What contiguous bits in a mask.
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = (0x6F0000, 0xFF00, 0xFF, 0)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        self.assertRaises(ValueError, make_surf, 32, 0, masks)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:    def test_set_masks(self):
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        r, g, b, a = s.get_masks()
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        self.assertRaises(TypeError, s.set_masks, (b, g, r, a))
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            mask8 = (224, 28, 3, 0)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            mask15 = (31744, 992, 31, 0)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            mask16 = (63488, 2016, 31, 0)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            mask24 = (16711680, 65280, 255, 0)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            mask32 = (4278190080, 16711680, 65280, 255)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            # Surfaces with standard depths and masks
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            surf_8bit = pygame.Surface((100, 100), depth=8, masks=mask8)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            surf_15bit = pygame.Surface((100, 100), depth=15, masks=mask15)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            surf_16bit = pygame.Surface((100, 100), depth=16, masks=mask16)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            surf_24bit = pygame.Surface((100, 100), depth=24, masks=mask24)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            surf_32bit = pygame.Surface((100, 100), depth=32, masks=mask32)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:    def test_get_masks__rgba(self):
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        Ensure that get_mask can return RGBA mask.
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = [
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        for expected, depth in list(zip(masks, depths)):
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            self.assertEqual(expected, surface.get_masks())
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:    def test_get_masks__rgb(self):
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        Ensure that get_mask can return RGB mask.
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = [
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        for expected, depth in list(zip(masks, depths)):
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            self.assertEqual(expected, surface.get_masks())
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:    def test_get_masks__no_surface(self):
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        Ensure that after display.quit, calling get_masks raises pygame.error.
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            surface.get_masks()
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        self.assertEqual(s.get_masks(), surf.get_masks())
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        s_masks = s.get_masks()
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        if not s_masks[plane]:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:    def test_array_interface_masks(self):
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        s_masks = list(s.get_masks())
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = [0xFF, 0xFF00, 0xFF0000]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        if s_masks[0:3] == masks or s_masks[0:3] == masks[::-1]:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            masks = s_masks[2::-1] + s_masks[3:4]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            self._check_interface_3D(pygame.Surface(sz, 0, 32, masks))
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        s_masks = list(s.get_masks())
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = [0xFF, 0xFF00, 0xFF0000]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        if s_masks[0:3] == masks or s_masks[0:3] == masks[::-1]:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            masks = s_masks[2::-1] + s_masks[3:4]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            self._check_interface_3D(pygame.Surface(sz, 0, 24, masks))
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = [0xFF00, 0xFF0000, 0xFF000000, 0]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        self._check_interface_3D(pygame.Surface(sz, 0, 32, masks))
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            masks = [0xFF << s for s in shifts]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            s = pygame.Surface((4, 2), pygame.SRCALPHA, 32, masks)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            masks = [0xFF << s for s in shifts]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            masks[3] = 0
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        rmask, gmask, bmask, amask = s.get_masks()
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            if rmask == 0x0000FF:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            if rmask == 0xFF0000:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        rmask, gmask, bmask, amask = s.get_masks()
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            if rmask == 0x0000FF:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            if rmask == 0xFF0000:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:                        if dst.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = src.get_masks()
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            src.get_size(), 0, 32, [masks[2], masks[1], masks[0], masks[3]]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = pat.get_masks()
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        if min(masks) == 0xFF000000:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            masks = [m >> 8 for m in masks]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            masks = [m << 8 for m in masks]
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        src = pygame.Surface(pat.get_size(), 0, 32, masks)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        dst = pygame.Surface(src.get_size(), 0, 32, masks)
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:                        if not dst.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        masks = src.get_masks()
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:            src.get_size(), SRCALPHA, 32, (masks[2], masks[1], masks[0], masks[3])
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:        # a surface has per-pixel alpha. Looking at the Amask
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:                    if dst.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/surface_test.py:                    if not dst.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:def random_mask(size=(100, 100)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    """random_mask(size=(100,100)): return Mask
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    Create a mask of the given size, with roughly half the bits set at random."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:def maskFromSurface(surface, threshold=127):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    mask = pygame.Mask(surface.get_size())
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask.set_at((x, y), 1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask.set_at((x, y), 1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    return mask
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:def corners(mask):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    """Returns a tuple with the corner positions of the given mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    width, height = mask.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    """Checks to see if the 2 given masks are equal."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:# @unittest.skipIf(IS_PYPY, "pypy has lots of mask failures")  # TODO
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure masks are created correctly without fill parameter."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask(size=expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask1, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask2, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask2.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask2.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_mask__negative_size(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure the mask constructor handles negative sizes correctly."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_mask__fill_kwarg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure masks are created correctly using the fill keyword."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(expected_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_mask__fill_kwarg_bit_boundaries(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures masks are created correctly using the fill keyword
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_mask__fill_arg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure masks are created correctly using a fill arg."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(expected_size, fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_mask__size_kwarg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure masks are created correctly using the size keyword."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1 = pygame.mask.Mask(fill=fill, size=expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(size=expected_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask1, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask2, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        mask.set_at((x, y))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                for mask_copy in (mask.copy(), copy.copy(mask)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsInstance(mask_copy, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsNot(mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    assertMaskEqual(self, mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures copy works correctly on a filled masked."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.Mask((width, height), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                for mask_copy in (mask.copy(), copy.copy(mask)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsInstance(mask_copy, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsNot(mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    assertMaskEqual(self, mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures copy works correctly on an empty mask."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                for mask_copy in (mask.copy(), copy.copy(mask)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsInstance(mask_copy, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsNot(mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    assertMaskEqual(self, mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures copy makes an independent copy of the mask."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_set_pos = (64, 1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_copy_set_pos = (64, 2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((65, 3))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_copies = (mask.copy(), copy.copy(mask))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.set_at(mask_set_pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask_copy in mask_copies:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_copy.set_at(mask_copy_set_pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsNot(mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_copy.get_at(mask_set_pos), mask.get_at(mask_set_pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_copy.get_at(mask_copy_set_pos), mask.get_at(mask_copy_set_pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's size is correctly retrieved."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Test on full and empty masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(expected_rect.size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    rect = mask.get_rect(**{attribute: value})
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((5, 4))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect = mask.get_rect(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((4, 5))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(3)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect((1, 2))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((1, 2))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(righte=11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(toplef=(1, 1))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(move=(3, 2))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((3, 11))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(right="1")  # Wrong type.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(bottom=(1,))  # Wrong type.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(centerx=(1, 1))  # Wrong type.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(midleft=(1, "1"))  # Wrong type.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(topright=(1,))  # Too few.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(bottomleft=(1, 2, 3))  # Too many.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect(midbottom=1)  # Wrong type.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure individual mask bits are correctly retrieved."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0 = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((width, height), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0_expected_bit = 0
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_expected_bit = 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask0.get_at(pos), mask0_expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask0.get_at(pos=pos), mask0_expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.get_at(Vector2(pos)), mask1_expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.get_at(pos=Vector2(pos)), mask1_expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.get_at((width, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.get_at((0, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.get_at((-1, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.get_at((0, -1))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure individual mask bits are set to 1."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0 = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((width, height), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0_expected_count = 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_expected_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0.set_at(pos, expected_bit)  # set 0 to 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1.set_at(pos=Vector2(pos), value=expected_bit)  # set 1 to 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask0.get_at(pos), expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask0.count(), mask0_expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.get_at(pos), expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.count(), mask1_expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure individual mask bits are set to 0."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0 = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((width, height), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0_expected_count = 0
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_expected_count = mask1.count() - 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0.set_at(pos, expected_bit)  # set 0 to 0
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1.set_at(pos, expected_bit)  # set 1 to 0
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask0.get_at(pos), expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask0.count(), mask0_expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.get_at(pos), expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.count(), mask1_expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure individual mask bits are set using the default value."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0 = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((width, height), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0_expected_count = 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_expected_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask0.set_at(pos)  # set 0 to 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1.set_at(pos)  # set 1 to 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask0.get_at(pos), expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask0.count(), mask0_expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.get_at(pos), expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.count(), mask1_expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at((width, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at((0, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at((-1, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at((0, -1))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Testing the different combinations of full/empty masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 overlap 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 overlap 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 overlap 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 overlap 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(expected_size, fill=fill2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(expected_size, fill=fill1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                overlap_pos = mask1.overlap(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask1.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((66, 4), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_pos = mask1.overlap(other=mask2, offset=offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((66, 4), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1.set_at(unset_pos, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2.set_at(unset_pos, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_pos = mask1.overlap(mask2, Vector2(offset))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_at(unset_pos), 0, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_at(unset_pos), 0, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_w, mask2_h = 67, 5
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = (mask2_w, mask2_h)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask(mask2_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        set_pos = (mask2_w - 1, mask2_h - 1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2.set_at(set_pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_pos = mask1.overlap(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_at(set_pos), 1, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((13, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((7, 5), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1_size[0], 0),  # off right
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, mask1_size[1]),  # off bottom
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (-mask2_size[0], 0),  # off left
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, -mask2_size[1]),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_pos = mask1.overlap(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures overlap handles masks of different sizes correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_size = (width, height)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_count = width * height
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask2 = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Testing masks offset from each other.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    msg = f"size={mask_size}, offset={offset}"
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    overlap_pos = mask1.overlap(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask1.count(), mask_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.count(), mask_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask1.get_size(), mask_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.get_size(), mask_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap__invalid_mask_arg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure overlap handles invalid mask arguments correctly."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        invalid_mask = pygame.Surface(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_pos = mask.overlap(invalid_mask, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_pos = mask1.overlap(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Testing the different combinations of full/empty masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 overlap_area 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 overlap_area 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 overlap_area 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 overlap_area 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(expected_size, fill=fill2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(expected_size, fill=fill1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                overlap_count = mask1.overlap_area(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask1.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((66, 4), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_count = mask1.overlap_area(other=mask2, offset=offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((11, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((5, 7), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1_size[0], 0),  # off right
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, mask1_size[1]),  # off bottom
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (-mask2_size[0], 0),  # off left
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, -mask2_size[1]),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_count = mask1.overlap_area(mask2, Vector2(offset))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures overlap_area handles masks of different sizes correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_size = (width, height)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_count = width * height
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask2 = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Testing masks offset from each other.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    msg = f"size={mask_size}, offset={offset}"
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    overlap_count = mask1.overlap_area(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask1.count(), mask_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.count(), mask_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask1.get_size(), mask_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.get_size(), mask_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap_area__invalid_mask_arg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure overlap_area handles invalid mask arguments correctly."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        invalid_mask = pygame.Surface(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_count = mask.overlap_area(invalid_mask, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_count = mask1.overlap_area(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure overlap_mask's mask has correct bits set.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Testing the different combinations of full/empty masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 overlap_mask 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 overlap_mask 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 overlap_mask 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 overlap_mask 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_default = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_masks = {(True, True): pygame.mask.Mask(expected_size, fill=True)}
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(expected_size, fill=fill2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(expected_size, fill=fill1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                expected_mask = expected_masks.get(key, expected_default)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                overlap_mask = mask1.overlap_mask(other=mask2, offset=offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(overlap_mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                assertMaskEqual(self, overlap_mask, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask1.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap_mask__bits_set(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure overlap_mask's mask has correct bits set."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((50, 50), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((300, 10), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask3 = mask1.overlap_mask(mask2, (-1, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask3.get_at((i, j)), 1, f"({i}, {j})")
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask3.get_at((i, j)), 0, f"({i}, {j})")
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.count(), mask1_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask2.count(), mask2_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.get_size(), mask1_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask2.get_size(), mask2_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap_mask__offset(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an offset overlap_mask's mask is correctly calculated."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((66, 4), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_mask = pygame.Mask(mask1_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_mask.draw(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_mask = mask1.overlap_mask(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(overlap_mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, overlap_mask, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap_mask__specific_offsets(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an offset overlap_mask's mask is correctly calculated.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            -both masks are wider than 32 bits
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            -the mask calling overlap_mask() is wider than the mask passed in
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 5), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((33, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_mask = pygame.Mask(mask1.get_size())
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_mask.draw(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_mask = mask1.overlap_mask(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(overlap_mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, overlap_mask, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap_mask__offset_boundary(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures overlap_mask handles offsets and boundaries correctly."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((9, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((11, 5), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_size = mask1_size
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1_size[0], 0),  # off right
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, mask1_size[1]),  # off bottom
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (-mask2_size[0], 0),  # off left
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, -mask2_size[1]),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_mask = mask1.overlap_mask(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(overlap_mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(overlap_mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(overlap_mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap_mask__bit_boundaries(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures overlap_mask handles masks of different sizes correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_size = (width, height)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_count = width * height
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask2 = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                expected_mask = pygame.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Testing masks offset from each other.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    msg = f"size={mask_size}, offset={offset}"
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    expected_mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    expected_mask.draw(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    overlap_mask = mask1.overlap_mask(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsInstance(overlap_mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    assertMaskEqual(self, overlap_mask, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask1.count(), mask_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.count(), mask_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask1.get_size(), mask_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.get_size(), mask_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap_mask__invalid_mask_arg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure overlap_mask handles invalid mask arguments correctly."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        invalid_mask = pygame.Surface(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_mask = mask.overlap_mask(invalid_mask, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_overlap_mask__invalid_offset_arg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure overlap_mask handles invalid offset arguments correctly."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_mask = mask1.overlap_mask(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_mask_access(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask can be filled."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.fill()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures masks of different sizes are filled correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.fill()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask.count(), expected_count, f"size=({width}, {height})"
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask can be cleared."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures masks of different sizes are cleared correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.Mask((width, height), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask.count(), expected_count, f"size=({width}, {height})"
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask can be inverted."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.set_at(pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2.set_at(pos, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1.invert()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2.invert()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.count(), expected_count1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask2.count(), expected_count2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask1.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask2.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_at(pos), 0, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_at(pos), 1, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a full mask can be inverted."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.invert()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an empty mask can be inverted."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.invert()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures masks of different sizes are inverted correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask = pygame.mask.Mask((width, height), fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask.invert()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        mask.count(),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask can be scaled."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            original_mask = pygame.mask.Mask(original_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask = original_mask.scale(scale=expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(original_mask.count(), original_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(original_mask.get_size(), original_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.Mask((100, 100))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.scale((-1, -1))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.scale(Vector2(-1, 10))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.scale((10, -1))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask can be drawn onto another mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Testing the different combinations of full/empty masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 draw 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 draw 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 draw 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 draw 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_default = pygame.mask.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_masks = {(False, False): pygame.mask.Mask(expected_size)}
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(expected_size, fill=fill2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(expected_size, fill=fill1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                expected_mask = expected_masks.get(key, expected_default)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1.draw(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                assertMaskEqual(self, mask1, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Ensure mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an offset mask can be drawn onto another mask."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 3))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((66, 4), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_mask = pygame.Mask(mask1.get_size())
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    expected_mask.set_at((x, y))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.clear()  # Ensure it's empty for testing each offset.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.draw(other=mask2, offset=offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, mask1, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an offset mask can be drawn onto another mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            -both masks are wider than 32 bits
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            -the mask calling draw() is wider than the mask passed in
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 5))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((33, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_mask = pygame.Mask(mask1.get_size())
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    expected_mask.set_at((x, y))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.clear()  # Ensure it's empty for testing each offset.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.draw(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, mask1, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((13, 5))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((7, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1_size[0], 0),  # off right
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, mask1_size[1]),  # off bottom
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (-mask2_size[0], 0),  # off left
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, -mask2_size[1]),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.draw(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures draw handles masks of different sizes correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_size = (width, height)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_count = width * height
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask2 = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                expected_mask = pygame.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Testing masks offset from each other.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    msg = f"size={mask_size}, offset={offset}"
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    expected_mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                            expected_mask.set_at((x, y))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask1.clear()  # Ensure it's empty for each test.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask1.draw(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    assertMaskEqual(self, mask1, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    # Ensure mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.count(), mask_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.get_size(), mask_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_draw__invalid_mask_arg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure draw handles invalid mask arguments correctly."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        invalid_mask = pygame.Surface(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.draw(invalid_mask, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.draw(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask can erase another mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Testing the different combinations of full/empty masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 erase 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 erase 1 (mask2-filled)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-filled) 1 erase 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1-empty)  0 erase 0 (mask2-empty)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_default = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_masks = {(True, False): pygame.mask.Mask(expected_size, fill=True)}
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(expected_size, fill=fill2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(expected_size, fill=fill1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                expected_mask = expected_masks.get(key, expected_default)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1.erase(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                assertMaskEqual(self, mask1, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Ensure mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask2.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an offset mask can erase another mask."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 3))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((66, 4), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_mask = pygame.Mask(mask1.get_size())
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_mask.fill()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    expected_mask.set_at((x, y), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.fill()  # Ensure it's filled for testing each offset.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.erase(other=mask2, offset=offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, mask1, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an offset mask can erase another mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            -both masks are wider than 32 bits
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            -the mask calling erase() is wider than the mask passed in
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((65, 5))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((33, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_mask = pygame.Mask(mask1.get_size())
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_mask.fill()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    expected_mask.set_at((x, y), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.fill()  # Ensure it's filled for testing each offset.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.erase(mask2, Vector2(offset))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, mask1, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask((7, 11), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask((3, 13), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_count = mask2.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1_size = mask1.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2_size = mask2.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (mask1_size[0], 0),  # off right
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, mask1_size[1]),  # off bottom
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (-mask2_size[0], 0),  # off left
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            (0, -mask2_size[1]),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.erase(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure mask1/mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), mask1_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.count(), mask2_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), mask1_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), mask2_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures erase handles masks of different sizes correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_size = (width, height)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_count = width * height
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask1 = pygame.mask.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask2 = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                expected_mask = pygame.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rect1 = mask1.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rect2 = mask2.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Testing masks offset from each other.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    msg = f"size={mask_size}, offset={offset}"
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    expected_mask.fill()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                            expected_mask.set_at((x, y), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask1.fill()  # Ensure it's filled for each test.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask1.erase(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    assertMaskEqual(self, mask1, expected_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    # Ensure mask2 unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.count(), mask_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask2.get_size(), mask_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_erase__invalid_mask_arg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure erase handles invalid mask arguments correctly."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        invalid_mask = pygame.Surface(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.erase(invalid_mask, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask1 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask2 = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.erase(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's set bits are correctly counted."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at((i, i))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        count = mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures the set bits of different sized masks are counted correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests masks of different sizes, including:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 31 to 33 bits wide (32 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:           -masks 63 to 65 bits wide (64 bit boundaries)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask = pygame.mask.Mask((width, height), fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                            mask.set_at(pos, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                            mask.set_at(pos, 1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        count = mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_count__full_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a full mask's set bits are correctly counted."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        count = mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_count__empty_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an empty mask's set bits are correctly counted."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        count = mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a filled mask's centroid is correctly calculated."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((5, 7), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_centroid = mask.get_rect().center
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        centroid = mask.centroid()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_centroid__empty_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an empty mask's centroid is correctly calculated."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        centroid = mask.centroid()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's centroid is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.clear()  # Clear for each row.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.set_at((x, y))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                centroid = mask.centroid()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's centroid is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.clear()  # Clear for each set of rows.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.set_at((x, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.set_at((x, y))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                centroid = mask.centroid()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's centroid is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.clear()  # Clear for each column.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.set_at((x, y))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                centroid = mask.centroid()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's centroid is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((width, height))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.clear()  # Clear for each set of columns.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.set_at((0, y))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.set_at((x, y))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                centroid = mask.centroid()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's centroid is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((5, 7))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_centroid = mask.get_rect().center
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for corner in corners(mask):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at(corner)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        centroid = mask.centroid()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's centroid is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((5, 7))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_corners = corners(mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for i, corner1 in enumerate(mask_corners):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            for corner2 in mask_corners[i + 1 :]:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.clear()  # Clear for each pair of corners.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.set_at(corner1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.set_at(corner2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    expected_centroid = mask_rect.center
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                centroid = mask.centroid()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's orientation angle is correctly calculated."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.from_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        angle = mask.angle()  # Returns the orientation of the pixels
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_angle__empty_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure an empty mask's angle is correctly calculated."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        angle = mask.angle()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(o, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        m = random_mask((100, 100))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        convolve_mask = m.convolve(k)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(convolve_mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        assertMaskEqual(self, m, convolve_mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        convolve_mask = k.convolve(k.convolve(m))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(convolve_mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        assertMaskEqual(self, m, convolve_mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        m = random_mask((10, 10))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(o, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(o, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            convolve_mask = full.convolve(full, None, pt)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(convolve_mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(convolve_mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        m1 = random_mask((100, 100))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        m2 = random_mask((100, 100))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(conv, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def _draw_component_pattern_box(self, mask, size, pos, inverse=False):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        pattern = pygame.mask.Mask((size, size), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.erase(pattern, pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.draw(pattern, pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def _draw_component_pattern_x(self, mask, size, pos, inverse=False):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        pattern = pygame.mask.Mask((size, size))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.erase(pattern, pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.draw(pattern, pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def _draw_component_pattern_plus(self, mask, size, pos, inverse=False):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        pattern = pygame.mask.Mask((size, size))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.erase(pattern, pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.draw(pattern, pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's connected component is correctly calculated."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Draw some connected patterns on the original mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        pattern = self._draw_component_pattern_x(original_mask, 3, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        pattern = self._draw_component_pattern_plus(original_mask, size, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        pattern = self._draw_component_pattern_box(original_mask, 7, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = original_mask.connected_component()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.overlap_area(expected_pattern, expected_offset), expected_count
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.count(), original_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                original_mask.overlap_area(pattern, offset), pattern.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_connected_component__full_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's connected component is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        when the mask is full.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_mask = pygame.mask.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_count = original_mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = original_mask.connected_component()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_connected_component__empty_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's connected component is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        when the mask is empty.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_count = original_mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = original_mask.connected_component()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.count(), original_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's connected component is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_mask = pygame.mask.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            original_mask, 3, expected_offset, inverse=True
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_count = original_mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = original_mask.connected_component(set_pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.overlap_area(expected_pattern, expected_offset), expected_count
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.count(), original_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            original_mask.overlap_area(expected_pattern, expected_offset),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's connected component is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_pattern = pygame.mask.Mask((p_width, p_height), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_mask.draw(expected_pattern, expected_offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = original_mask.connected_component(set_pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.overlap_area(expected_pattern, expected_offset), expected_count
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            original_mask.overlap_area(expected_pattern, expected_offset),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensure a mask's connected component is correctly calculated
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_mask = pygame.mask.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_mask.set_at(unset_pos, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_count = original_mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = original_mask.connected_component(unset_pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.count(), original_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(original_mask.get_at(unset_pos), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_mask = pygame.mask.Mask(original_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        original_count = original_mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = original_mask.connected_component(pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(original_mask.count(), original_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(original_mask.get_size(), original_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask in comps:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_connected_components__negative_min_with_empty_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        when the mask is empty.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_count = 0
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (65, 13)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        connected_comps = mask.connected_components(-1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), mask_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_connected_components__negative_min_with_full_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        when the mask is full.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (64, 11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_count = mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        connected_comps = mask.connected_components(-2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        assertMaskEqual(self, connected_comps[0], mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), mask_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        when the mask has some bits set.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (64, 12)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # mask is created for each point.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for corner in corners(mask):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at(corner)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            new_mask = pygame.mask.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            new_mask.set_at(corner)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_comps[corner] = new_mask
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        center = (mask_size[0] // 2, mask_size[1] // 2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.set_at(center)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        new_mask = pygame.mask.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        new_mask.set_at(center)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_comps[center] = new_mask
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_count = mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        connected_comps = mask.connected_components(-3)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Since the masks in the connected component list can be in any
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Ensure the original mask is unchanged.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), mask_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Create masks with different set point groups. Each group of
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_data = []  # [((size), ((rect1_pts), ...)), ...]
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_data.append(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_data.append(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_data.append(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_data.append(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_data.append(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_data.append(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for size, rect_point_tuples in mask_data:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask.set_at(pt)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rects = mask.get_bounding_rects()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                sorted(mask.get_bounding_rects(), key=tuple),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures empty and full masks can be drawn onto surfaces."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures empty and full masks can be drawn onto a created surface."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(None)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(kwargs["surface"])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(None, kwargs["setsurface"])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(None, None, kwargs["unsetsurface"])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(None, None, None, kwargs["setcolor"])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (3, 2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Make the surface bigger than the mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        surf_size = (mask_size[0] + 2, mask_size[1] + 1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        assertSurfaceFilledIgnoreArea(self, to_surface, surface_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        kwargs = {"area": mask.get_rect()}
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (3, 2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Make the surface bigger than the mask. The default area is the full
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # area of the mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        surf_size = (mask_size[0] + 2, mask_size[1] + 1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        assertSurfaceFilledIgnoreArea(self, to_surface, surface_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.to_surface(None, None, None, None, None, (0,))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.to_surface(None, None, None, None, invalid_color)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.to_surface(None, None, None, invalid_color, None)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.to_surface(None, None, invalid_surf, None, None)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.to_surface(None, invalid_surf, None, None, None)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.to_surface(invalid_surf, None, None, None, None)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((3, 2))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(*args, **kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setcolor=setcolor)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(unsetcolor=unsetcolor)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((5, 3))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.to_surface(setcolor=setcolor)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.to_surface(setcolor=setcolor)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((5, 3))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.to_surface(unsetcolor=unsetcolor)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.to_surface(unsetcolor=unsetcolor)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((3, 5), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(dest=dest)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((3, 5))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.to_surface(dest=dest)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((3, 5), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(dest=dest)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((3, 5), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(dest=dest)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface, area=area)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((3, 5))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                unused_to_surface = mask.to_surface(area=area)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.set_at((0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # These rects should cause position (0, 0) of the mask to be drawn.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface, area=area)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Zero sized rect areas should cause none of the mask to be drawn.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface, area=area)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                                to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                                to_surface = mask.to_surface(**kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at(pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect.topleft = dest
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface, dest=dest)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_pos = (pos[0] - dest[0], pos[1] - dest[1])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                if not mask_rect.collidepoint(pos):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                elif mask.get_at(mask_pos):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at(pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect.topleft = dest
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask_pos = (pos[0] - dest[0], pos[1] - dest[1])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    if not mask_rect.collidepoint(pos):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    elif mask.get_at(mask_pos):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__surface_narrower_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that surfaces narrower than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the surface's width is less than the mask's width.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 20)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_narrower_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces narrower than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's width is less than the mask's width.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 20)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setsurface=setsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_narrower_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces narrower than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's width is less than the mask's width.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 20)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_narrower_than_mask_and_colors_none(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces narrower than the mask work correctly
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's width is less than the mask's width.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 20)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_narrower_than_mask_and_colors_none(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces narrower than the mask work correctly
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's width is less than the mask's width.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 20)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__surface_wider_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that surfaces wider than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the surface's width is greater than the mask's width.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (6, 15)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilledIgnoreArea(self, to_surface, surface_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_wider_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces wider than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's width is greater than the mask's width.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (6, 15)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setsurface=setsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_wider_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces wider than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's width is greater than the mask's
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (6, 15)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__surface_shorter_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that surfaces shorter than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the surface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_shorter_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces shorter than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setsurface=setsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_shorter_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces shorter than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_shorter_than_mask_and_colors_none(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces shorter than the mask work correctly
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_shorter_than_mask_and_colors_none(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces shorter than the mask work correctly
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__surface_taller_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that surfaces taller than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the surface's height is greater than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 6)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilledIgnoreArea(self, to_surface, surface_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_taller_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces taller than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's height is greater than the mask's
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 6)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setsurface=setsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_taller_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces taller than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's height is greater than the mask's
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 6)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__surface_wider_and_taller_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that surfaces wider and taller than the mask work correctly.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the surface's width is greater than the mask's width and
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        the surface's height is greater than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (6, 8)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilledIgnoreArea(self, to_surface, surface_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_wider_and_taller_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces wider and taller than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's width is greater than the mask's width
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        and the setsurface's height is greater than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (6, 8)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setsurface=setsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_wider_and_taller_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces wider and taller than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's width is greater than the mask's width
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        and the unsetsurface's height is greater than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (6, 8)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__surface_wider_and_shorter_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that surfaces wider and shorter than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the surface's width is greater than the mask's width and
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        the surface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (7, 11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilledIgnoreArea(self, to_surface, surface_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_wider_and_shorter_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces wider and shorter than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's width is greater than the mask's width
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        and the setsurface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (7, 11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setsurface=setsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_wider_and_shorter_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces wider and shorter than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's width is greater than the mask's width
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        and the unsetsurface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (7, 11)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__surface_narrower_and_taller_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that surfaces narrower and taller than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the surface's width is less than the mask's width and
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        the surface's height is greater than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 8)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilledIgnoreArea(self, to_surface, surface_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_narrower_and_taller_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces narrower and taller than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's width is less than the mask's width
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        and the setsurface's height is greater than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 8)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setsurface=setsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_narrower_and_taller_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces narrower and taller than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's width is less than the mask's width
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        and the unsetsurface's height is greater than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 8)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__surface_narrower_and_shorter_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that surfaces narrower and shorter than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the surface's width is less than the mask's width and
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        the surface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 18)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertSurfaceFilledIgnoreArea(self, to_surface, surface_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__setsurface_narrower_and_shorter_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that setsurfaces narrower and shorter than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the setsurface's width is less than the mask's width
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        and the setsurface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 18)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setsurface=setsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__unsetsurface_narrower_and_shorter_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures that unsetsurfaces narrower and shorter than the mask work
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        For this test the unsetsurface's width is less than the mask's width
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        and the unsetsurface's height is less than the mask's height.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 18)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Different checks depending on if the mask was filled or not.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__all_surfaces_different_sizes_than_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (10, 15)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Create a mask that is filled except for a rect in the center.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        unfilled_rect.center = mask_rect.center
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at(pos, 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(surface, setsurface, unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            if not mask_rect.collidepoint(pos):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            elif mask.get_at(pos):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask((SIDE, SIDE), fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(surface, dest=dest_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures area rects can be different locations on/off the mask."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask((SIDE, SIDE), fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            area_rect = mask_rect.copy()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    overlap_rect = area_rect.clip(mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(surface, area=area_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        surface/mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask((SIDE, SIDE), fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            area_rect = mask_rect.copy()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        area_overlap_rect = area_rect.clip(mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask((SIDE, SIDE), fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    overlap_rect = area_rect.clip(mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(surface, area=area_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setcolor=setcolor, unsetcolor=unsetcolor)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(surface, setsurface, unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.to_surface(surface, setsurface, unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.to_surface(setsurface=setsurface, unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(surface, setsurface, unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask.to_surface(surface, setsurface, unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask.to_surface(setsurface=setsurface, unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_rect.topleft = dest
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(surface, dest=dest)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self, to_surface, surface_color, mask_rect
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_rect.topleft = dest
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(**test_kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        self, to_surface, surface_color, mask_rect
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_rect.topleft = dest
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(surface, dest=dest)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self, to_surface, surface_color, mask_rect
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask_rect.topleft = dest
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(**test_kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    assertSurfaceFilled(self, to_surface, expected_color, mask_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        self, to_surface, surface_color, mask_rect
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__area_on_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures area values on the mask work correctly
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            area_rect = mask_rect.copy()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Testing the area parameter at different locations on the mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                overlap_rect = mask_rect.clip(area_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(surface, area=area_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__area_on_mask_with_setsurface_unsetsurface(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures area values on the mask work correctly
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            area_rect = mask_rect.copy()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            # Testing the area parameter at different locations on the mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                overlap_rect = mask_rect.clip(area_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    overlap_rect = mask_rect.clip(test_kwargs["area"])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(**test_kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__area_off_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures area values off the mask work correctly
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Testing positions off the mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            area_rect = mask_rect.copy()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                overlap_rect = mask_rect.clip(area_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(surface, area=area_rect)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_to_surface__area_off_mask_with_setsurface_unsetsurface(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures area values off the mask work correctly
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Testing positions off the mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    overlap_rect = mask_rect.clip(test_kwargs["area"])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    to_surface = mask.to_surface(**test_kwargs)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask((3, 4), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (2, 4)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(setsurface=setsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (4, 2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.mask.Mask(mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(unsetsurface=unsetsurface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures masks can be created with zero sizes."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.Mask(size, fill=fill)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.get_size(), size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_copy(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures copy correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask_copy = mask.copy()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask_copy, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsNot(mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_get_size(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures get_size correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            size = mask.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_get_rect(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures get_rect correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_get_at(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures get_at correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                value = mask.get_at((0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_set_at(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures set_at correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.set_at((0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_overlap(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures overlap correctly handles zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests combinations of sized and zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1 = pygame.mask.Mask(size1, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(size2, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_pos = mask1.overlap(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_overlap_area(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures overlap_area correctly handles zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests combinations of sized and zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1 = pygame.mask.Mask(size1, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(size2, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_count = mask1.overlap_area(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_overlap_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures overlap_mask correctly handles zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests combinations of sized and zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1 = pygame.mask.Mask(size1, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(size2, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            overlap_mask = mask1.overlap_mask(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(overlap_mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(overlap_mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(overlap_mask.get_size(), size1, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_fill(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures fill correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.fill()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), expected_count, f"size={size}")
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_clear(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_flip(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.invert()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_scale(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = mask.scale((2, 3))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask2, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask2.get_size(), (2, 3))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_draw(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures draw correctly handles zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests combinations of sized and zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1 = pygame.mask.Mask(size1, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(size2, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.draw(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), size1, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_erase(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures erase correctly handles zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests combinations of sized and zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1 = pygame.mask.Mask(size1, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask2 = pygame.mask.Mask(size2, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_count = mask1.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1.erase(mask2, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask1.get_size(), size1, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_count(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_centroid(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.centroid(), (0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_angle(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.angle(), 0.0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_outline(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures outline correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            points = mask.outline()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_outline__with_arg(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures outline correctly handles zero sized masks
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            points = mask.outline(10)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_convolve(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures convolve correctly handles zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests the different combinations of sized and zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1 = pygame.mask.Mask(size1, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask2 = pygame.mask.Mask(size2, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = mask1.convolve(mask2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsNot(mask, mask2, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_convolve__with_output_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures convolve correctly handles zero sized masks
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        when using an output mask argument.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        Tests the different combinations of sized and zero sized masks.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask1 = pygame.mask.Mask(size1, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask2 = pygame.mask.Mask(size2, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    output_mask = pygame.mask.Mask(output_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask = mask1.convolve(mask2, output_mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIs(mask, output_mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask.get_size(), output_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_connected_component(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures connected_component correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            cc_mask = mask.connected_component()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(cc_mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(cc_mask.get_size(), size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(cc_mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_connected_component__indexed(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures connected_component correctly handles zero sized masks
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                cc_mask = mask.connected_component((0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_connected_components(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures connected_components correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_cc_masks = []
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            cc_masks = mask.connected_components()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertListEqual(cc_masks, expected_cc_masks, f"size={size}")
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_get_bounding_rects(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures get_bounding_rects correctly handles zero sized masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            bounding_rects = mask.get_bounding_rects()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_to_surface(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures to_surface correctly handles zero sized masks and surfaces."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_color = pygame.Color("blue")
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            for mask_size in ((5, 0), (0, 5), (0, 0)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                to_surface = mask.to_surface(surface, setcolor=mask_color)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_zero_mask_to_surface__create_surface(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures to_surface correctly handles zero sized masks and surfaces
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_color = pygame.Color("blue")
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask_size in ((3, 0), (0, 3), (0, 0)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.Mask(mask_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            to_surface = mask.to_surface(setcolor=mask_color)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(to_surface.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:class SubMask(pygame.mask.Mask):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_copy = super().copy()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_copy.test_attribute = self.test_attribute
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        return mask_copy
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_copy = super().__copy__()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_copy.test_attribute = self.test_attribute
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        return mask_copy
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_subclass_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask((5, 3), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(mask, SubMask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertTrue(mask.test_attribute)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask((65, 2), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask_copy in (mask.copy(), copy.copy(mask)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask_copy, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask_copy, SubMask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsNot(mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertFalse(hasattr(mask_copy, "test_attribute"))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMaskCopy((65, 2), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for i, mask_copy in enumerate((mask.copy(), copy.copy(mask))):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask_copy, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask_copy, SubMaskCopy)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsNot(mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertFalse(hasattr(mask_copy, "test_attribute"))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertTrue(mask_copy.test_attribute)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMaskDunderCopy((65, 2), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask_copy in (mask.copy(), copy.copy(mask)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask_copy, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask_copy, SubMaskDunderCopy)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsNot(mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertTrue(mask_copy.test_attribute)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMaskCopyAndDunderCopy((65, 2), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask_copy in (mask.copy(), copy.copy(mask)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask_copy, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask_copy, SubMaskCopyAndDunderCopy)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsNot(mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            assertMaskEqual(self, mask_copy, mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertTrue(mask_copy.test_attribute)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        size = mask.get_size()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_subclass_mask_get_rect(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(expected_rect.size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        rect = mask.get_rect()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask((3, 2), fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        bit = mask.get_at((0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(fill=False, size=(4, 2))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.set_at(pos)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.get_at(pos), expected_bit)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (2, 3)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        masks = (pygame.mask.Mask(fill=True, size=mask_size), SubMask(mask_size, True))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        arg_masks = (
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            pygame.mask.Mask(fill=True, size=mask_size),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            SubMask(mask_size, True),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask in masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            for arg_mask in arg_masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                overlap_pos = mask.overlap(arg_mask, (0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (3, 2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_count = mask_size[0] * mask_size[1]
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        masks = (pygame.mask.Mask(fill=True, size=mask_size), SubMask(mask_size, True))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        arg_masks = (
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            pygame.mask.Mask(fill=True, size=mask_size),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            SubMask(mask_size, True),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask in masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            for arg_mask in arg_masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                overlap_count = mask.overlap_area(arg_mask, (0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_subclass_overlap_mask(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures overlap_mask works for subclassed Masks."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        masks = (
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            pygame.mask.Mask(fill=True, size=expected_size),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        arg_masks = (
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            pygame.mask.Mask(fill=True, size=expected_size),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask in masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            for arg_mask in arg_masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                overlap_mask = mask.overlap_mask(arg_mask, (0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(overlap_mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertNotIsInstance(overlap_mask, SubMask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(overlap_mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(overlap_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (2, 4)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_count = mask_size[0] * mask_size[1]
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(fill=False, size=mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.fill()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (4, 3)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(mask_size, True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.clear()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (1, 4)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_count = mask_size[0] * mask_size[1]
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(fill=False, size=mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.invert()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask((1, 4))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        scaled_mask = mask.scale(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(scaled_mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertNotIsInstance(scaled_mask, SubMask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(scaled_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (5, 4)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_count = mask_size[0] * mask_size[1]
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        arg_masks = (
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            pygame.mask.Mask(fill=True, size=mask_size),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            SubMask(mask_size, True),
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask in (pygame.mask.Mask(mask_size), SubMask(mask_size)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            for arg_mask in arg_masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.clear()  # Clear for each test.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.draw(arg_mask, (0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (3, 4)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        masks = (pygame.mask.Mask(mask_size, True), SubMask(mask_size, True))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        arg_masks = (pygame.mask.Mask(mask_size, True), SubMask(mask_size, True))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask in masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            for arg_mask in arg_masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.fill()  # Fill for each test.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.erase(arg_mask, (0, 0))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (5, 2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_count = mask_size[0] * mask_size[1] - 1
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(fill=True, size=mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask.set_at((1, 1), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        count = mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (3, 2)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask((3, 2))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        centroid = mask.centroid()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(size=(5, 4))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        angle = mask.angle()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask((3, 4))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        outline = mask.outline()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask_size = (width, height)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        arg_masks = (pygame.mask.Mask(mask_size), SubMask(mask_size))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        output_masks = (pygame.mask.Mask(mask_size), SubMask(mask_size))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for mask in (pygame.mask.Mask(mask_size), SubMask(mask_size)):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            for arg_mask in arg_masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                convolve_mask = mask.convolve(arg_mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(convolve_mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertNotIsInstance(convolve_mask, SubMask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(convolve_mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(convolve_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Test subclassed masks for the output_mask as well.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                for output_mask in output_masks:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    convolve_mask = mask.convolve(arg_mask, output_mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsInstance(convolve_mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(convolve_mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(convolve_mask.get_size(), mask_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    if isinstance(output_mask, SubMask):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        self.assertIsInstance(convolve_mask, SubMask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        self.assertNotIsInstance(convolve_mask, SubMask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        cc_mask = mask.connected_component()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertIsInstance(cc_mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertNotIsInstance(cc_mask, SubMask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(cc_mask.count(), expected_count)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        self.assertEqual(cc_mask.get_size(), expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask((5, 4))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        ccs = mask.connected_components()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask((3, 2))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        bounding_rects = mask.get_bounding_rects()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = SubMask(size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        to_surface = mask.to_surface(surface, setcolor=expected_color)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:@unittest.skipIf(IS_PYPY, "pypy has lots of mask failures")  # TODO
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures from_surface creates a mask with the correct bits set.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        This test checks the masks created by the from_surface function using
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                # Test the mask created at threshold values low, high and
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask = pygame.mask.from_surface(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures from_surface creates a mask with the correct bits set
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        This test checks the masks created by the from_surface function using
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_mask = pygame.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Test the mask created for each different alpha threshold.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_mask.set_at((threshold, 0), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_count = expected_mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.from_surface(surface, threshold)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.overlap_area(expected_mask, offset), expected_count, msg
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures from_surface creates a mask with the correct bits set
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        This test checks the masks created by the from_surface function using
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        calculates these groups and an expected mask for each. This test data
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # Use each threshold group to create an expected mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        test_data = []  # [(from_threshold, to_threshold, expected_mask), ...]
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        erase_mask = pygame.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        exp_mask = pygame.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    # Any special thresholds just reuse previous exp_mask.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    test_data.append((threshold, threshold + 1, exp_mask))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    # Make the expected mask by erasing the unset bits.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                        erase_mask.set_at((thres, 0), 1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    exp_mask = pygame.Mask(expected_size, fill=True)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    exp_mask.erase(erase_mask, offset)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    test_data.append((threshold, to_threshold, exp_mask))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        # All the setup is done. Now test the masks created over the threshold
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        for from_threshold, to_threshold, expected_mask in test_data:
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            expected_count = expected_mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.from_surface(surface, threshold)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                    mask.overlap_area(expected_mask, offset), expected_count, msg
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_from_surface__with_colorkey_mask_cleared(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures from_surface creates a mask with the correct bits set
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        The surface is filled with the colorkey color so the resulting masks
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.from_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_from_surface__with_colorkey_mask_filled(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures from_surface creates a mask with the correct bits set
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        the resulting masks are expected to have all bits set.
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.from_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:    def test_from_surface__with_colorkey_mask_pattern(self):
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures from_surface creates a mask with the correct bits set
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        non-colorkey colors, so the resulting masks are expected to have
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_mask = pygame.mask.Mask(expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        alternate(expected_mask.set_at, 1, 0, *expected_size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        expected_count = expected_mask.count()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.from_surface(surface)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask, pygame.mask.Mask, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.get_size(), expected_size, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), expected_count, msg)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask.overlap_area(expected_mask, offset), expected_count, msg
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Does mask.from_threshold() work correctly?"""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.from_threshold(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            rects = mask.get_bounding_rects()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), 400)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.get_bounding_rects(), [pygame.Rect((20, 20, 20, 20))])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.from_threshold(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.count(), 100)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.get_bounding_rects(), [pygame.Rect((40, 40, 10, 10))])
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        """Ensures from_surface can create masks from zero sized surfaces."""
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask = pygame.mask.from_surface(pygame.Surface(size))
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertIsInstance(mask, pygame.mask.MaskType, f"size={size}")
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            self.assertEqual(mask.get_size(), size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.from_threshold(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.count(), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rects = mask.get_bounding_rects()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                mask = pygame.mask.from_threshold(
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertIsInstance(mask, pygame.mask.Mask)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                self.assertEqual(mask.count(), 0)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:                rects = mask.get_bounding_rects()
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        mask = pygame.Mask(size)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:            mask.set_at(point, 1)
./venv/lib/python3.8/site-packages/pygame/tests/mask_test.py:        view = memoryview(mask)
./venv/lib/python3.8/site-packages/pygame/tests/gfxdraw_test.py:        fail_msg = "%s != %s at %s, bitsize: %i, flags: %i, masks: %s" % (
./venv/lib/python3.8/site-packages/pygame/tests/gfxdraw_test.py:            surf.get_masks(),
./venv/lib/python3.8/site-packages/pygame/tests/gfxdraw_test.py:        fail_msg = "%s != %s at %s, bitsize: %i, flags: %i, masks: %s" % (
./venv/lib/python3.8/site-packages/pygame/tests/gfxdraw_test.py:            surf.get_masks(),
./venv/lib/python3.8/site-packages/pygame/tests/gfxdraw_test.py:            for bitsize, masks in nonpalette_fmts:
./venv/lib/python3.8/site-packages/pygame/tests/gfxdraw_test.py:                self.surfaces.append(Surface(size, 0, bitsize, masks))
./venv/lib/python3.8/site-packages/pygame/tests/image_test.py:        Make sure the SDL surface color masks represent the rgb memory format
./venv/lib/python3.8/site-packages/pygame/tests/image_test.py:        required by the JPG library. The masks are machine endian dependent
./venv/lib/python3.8/site-packages/pygame/tests/image_test.py:            mask = 0xFC
./venv/lib/python3.8/site-packages/pygame/tests/image_test.py:            return pygame.Color(c.r & mask, c.g & mask, c.b & mask)
./venv/lib/python3.8/site-packages/pygame/tests/surfarray_test.py:            if surf.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/surfarray_test.py:            if surf.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/surfarray_test.py:            if surf.get_masks()[3]:
./venv/lib/python3.8/site-packages/pygame/tests/surfarray_test.py:    def _test_array_rgb(self, operation, mask_posn):
./venv/lib/python3.8/site-packages/pygame/tests/surfarray_test.py:        plane = [c[mask_posn] for c in palette]
./venv/lib/python3.8/site-packages/pygame/tests/surfarray_test.py:        for bitsize, shifts, masks in shift_tests:
./venv/lib/python3.8/site-packages/pygame/tests/surfarray_test.py:            self.assertRaises(TypeError, surf.set_masks, masks)
./venv/lib/python3.8/site-packages/pygame/tests/surfarray_test.py:    def _test_pixels_rgb(self, operation, mask_posn):
./venv/lib/python3.8/site-packages/pygame/tests/surfarray_test.py:        plane = [c[mask_posn] for c in palette]
./venv/lib/python3.8/site-packages/pygame/tests/test_utils/png.py:            mask = 2**self.bitdepth - 1
./venv/lib/python3.8/site-packages/pygame/tests/test_utils/png.py:                out.extend(map(lambda i: mask & (o >> i), shifts))
./venv/lib/python3.8/site-packages/pygame/tests/test_utils/png.py:        mask = 2**self.bitdepth - 1
./venv/lib/python3.8/site-packages/pygame/tests/test_utils/png.py:            out.extend([(mask & (o >> s)) for s in shifts][:l])
./venv/lib/python3.8/site-packages/pygame/tests/test_utils/png.py:        mask = (1 << n) - 1
./venv/lib/python3.8/site-packages/pygame/tests/test_utils/png.py:        w.write_array(f, array("B", map(mask.__and__, range(1, 256))))
./venv/lib/python3.8/site-packages/pygame/tests/test_utils/png.py:            list(itertools.chain(*pixels)), map(mask.__and__, range(1, 256))
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/test_utils/__pycache__/png.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:        # pygame.cursors.compile(strings, black, white,xor) -> data, mask
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:        # This returns a tuple containing the cursor data and cursor mask
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:        # pygame.cursors.load_xbm(cursorfile, maskfile) -> cursor_args
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:        maskfile = fixture_path(r"xbm_cursors/white_sizing_mask.xbm")
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:        cursor = pygame.cursors.load_xbm(cursorfile, maskfile)
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:        with open(cursorfile) as cursor_f, open(maskfile) as mask_f:
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:            cursor = pygame.cursors.load_xbm(cursor_f, mask_f)
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:            pathlib.Path(cursorfile), pathlib.Path(maskfile)
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:        xormask, andmask = pygame.cursors.compile(pygame.cursors.thickarrow_strings)
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:        c4 = pygame.cursors.Cursor((24, 24), (0, 0), xormask, andmask)
./venv/lib/python3.8/site-packages/pygame/tests/cursors_test.py:        self.assertEqual(c4.data, ((24, 24), (0, 0), xormask, andmask))
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/surface_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/gfxdraw_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/sprite_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/mask_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/cursors_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/transform_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/image_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/mouse_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/surfarray_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/tests/__pycache__/pixelcopy_test.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/_freetype.cpython-38-x86_64-linux-gnu.so matches
Binary file ./venv/lib/python3.8/site-packages/pygame/mask.cpython-38-x86_64-linux-gnu.so matches
Binary file ./venv/lib/python3.8/site-packages/pygame/mouse.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/pygame/cursors.pyi:    curs: FileArg, mask: FileArg
./venv/lib/python3.8/site-packages/pygame/cursors.pyi:        xormasks: Sequence[int],
./venv/lib/python3.8/site-packages/pygame/cursors.pyi:        andmasks: Sequence[int],
./venv/lib/python3.8/site-packages/pygame/mask.pyi:    def overlap_mask(self, other: Mask, offset: Coordinate) -> Mask: ...
./venv/lib/python3.8/site-packages/pygame/surface.pyi:        masks: Optional[ColorValue] = None,
./venv/lib/python3.8/site-packages/pygame/surface.pyi:    def convert(self, masks: ColorValue, flags: int = 0) -> Surface: ...
./venv/lib/python3.8/site-packages/pygame/surface.pyi:    def get_masks(self) -> RGBAOutput: ...
./venv/lib/python3.8/site-packages/pygame/surface.pyi:    def set_masks(self, color: ColorValue) -> None: ...
./venv/lib/python3.8/site-packages/pygame/examples/README.rst:mask.py
Binary file ./venv/lib/python3.8/site-packages/pygame/examples/__pycache__/mask.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:pygame.examples.mask
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:A pygame.mask collision detection production.
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:the mask module represents 32 or 64 pixels in one word.
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:    Moving Sprite demonstrating pixel-perfect collisions between pg.mask.Mask objects
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:    def __init__(self, pos, vel, surface, mask=None):
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:            mask: pg.mask.Mask object (optional)
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:        if mask is not None:
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:            self.mask = mask
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:            self.mask = pg.mask.from_surface(self.surface)
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:        overlap = self.mask.overlap_area(sprite.mask, offset)
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:            self.mask.overlap_area(sprite.mask, (offset[0] + 1, offset[1]))
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:            - self.mask.overlap_area(sprite.mask, (offset[0] - 1, offset[1])),
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:            self.mask.overlap_area(sprite.mask, (offset[0], offset[1] + 1))
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:            - self.mask.overlap_area(sprite.mask, (offset[0], offset[1] - 1)),
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:    This pg.masks demo will display multiple moving sprites bouncing
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:    masks = []
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:        masks.append(pg.mask.from_surface(images[-1]))
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:            mask=masks[j],
./venv/lib/python3.8/site-packages/pygame/examples/mask.py:        print("Usage: mask.py <IMAGE> [<IMAGE> ...]")
./venv/lib/python3.8/site-packages/pygame/docs/generated/_static/jquery-3.5.1.js:		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
./venv/lib/python3.8/site-packages/pygame/docs/generated/_static/jquery-3.6.0.js:		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
./venv/lib/python3.8/site-packages/pygame/docs/generated/logos.html:	    <a href="ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/searchindex.js:Search.setIndex({"docnames": ["c_api", "c_api/base", "c_api/bufferproxy", "c_api/color", "c_api/display", "c_api/event", "c_api/freetype", "c_api/mixer", "c_api/rect", "c_api/rwobject", "c_api/slots", "c_api/surface", "c_api/surflock", "c_api/version", "filepaths", "index", "logos", "ref/bufferproxy", "ref/camera", "ref/cdrom", "ref/color", "ref/color_list", "ref/cursors", "ref/display", "ref/draw", "ref/event", "ref/examples", "ref/fastevent", "ref/font", "ref/freetype", "ref/gfxdraw", "ref/image", "ref/joystick", "ref/key", "ref/locals", "ref/mask", "ref/math", "ref/midi", "ref/mixer", "ref/mouse", "ref/music", "ref/overlay", "ref/pixelarray", "ref/pixelcopy", "ref/pygame", "ref/rect", "ref/scrap", "ref/sdl2_controller", "ref/sdl2_video", "ref/sndarray", "ref/sprite", "ref/surface", "ref/surfarray", "ref/tests", "ref/time", "ref/touch", "ref/transform", "tut/CameraIntro", "tut/ChimpLineByLine", "tut/DisplayModes", "tut/ImportInit", "tut/MakeGames", "tut/MoveIt", "tut/PygameIntro", "tut/SpriteIntro", "tut/SurfarrayIntro", "tut/chimp.py", "tut/en/Red_or_Black/1.Prolog/introduction", "tut/en/Red_or_Black/2.Print_text/Basic TEMPLATE and OUTPUT", "tut/en/Red_or_Black/3.Move_text/Basic PROCESS", "tut/en/Red_or_Black/4.Control_text/Basic INPUT", "tut/en/Red_or_Black/5.HP_bar/Advanced OUTPUT with Advanced PROCESS", "tut/en/Red_or_Black/6.Buttons/Advanced INPUT with Advanced OUTPUT", "tut/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha", "tut/en/Red_or_Black/8.Epilog/Epilog", "tut/es/ChimpanceLineaporLinea", "tut/es/CrearJuegos", "tut/es/IniciarImportar", "tut/es/ModosVisualizacion", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/1.\ud504\ub864\ub85c\uadf8/\uc18c\uac1c", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/2.\ud14d\uc2a4\ud2b8 \ucd9c\ub825/\uae30\ucd08 \ud15c\ud50c\ub9bf\uacfc \ucd9c\ub825", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/3.\ud14d\uc2a4\ud2b8 \uc774\ub3d9/\uae30\ucd08 \ucc98\ub9ac", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/4.\ud14d\uc2a4\ud2b8 \uc870\uc885/\uae30\ucd08 \uc785\ub825", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/5.HP\ubc14/\uc2ec\ud654 \ucd9c\ub825 \uadf8\ub9ac\uace0 \uc2ec\ud654 \ucc98\ub9ac", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/6.\ubc84\ud2bc\ub4e4/\uc2ec\ud654 \uc785\ub825 \uadf8\ub9ac\uace0 \uc2ec\ud654 \ucd9c\ub825", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/7.\uac8c\uc784\ud310/\uc2ec\ud654 \ucd9c\ub825 \uadf8\ub9ac\uace0 \uc870\uae08 \ub354", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/8.\uc5d0\ud544\ub85c\uadf8/\uc5d0\ud544\ub85c\uadf8", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/\uac1c\uc694", "tut/newbieguide", "tut/tom_games2", "tut/tom_games3", "tut/tom_games4", "tut/tom_games5", "tut/tom_games6"], "filenames": ["c_api.rst", "c_api/base.rst", "c_api/bufferproxy.rst", "c_api/color.rst", "c_api/display.rst", "c_api/event.rst", "c_api/freetype.rst", "c_api/mixer.rst", "c_api/rect.rst", "c_api/rwobject.rst", "c_api/slots.rst", "c_api/surface.rst", "c_api/surflock.rst", "c_api/version.rst", "filepaths.rst", "index.rst", "logos.rst", "ref/bufferproxy.rst", "ref/camera.rst", "ref/cdrom.rst", "ref/color.rst", "ref/color_list.rst", "ref/cursors.rst", "ref/display.rst", "ref/draw.rst", "ref/event.rst", "ref/examples.rst", "ref/fastevent.rst", "ref/font.rst", "ref/freetype.rst", "ref/gfxdraw.rst", "ref/image.rst", "ref/joystick.rst", "ref/key.rst", "ref/locals.rst", "ref/mask.rst", "ref/math.rst", "ref/midi.rst", "ref/mixer.rst", "ref/mouse.rst", "ref/music.rst", "ref/overlay.rst", "ref/pixelarray.rst", "ref/pixelcopy.rst", "ref/pygame.rst", "ref/rect.rst", "ref/scrap.rst", "ref/sdl2_controller.rst", "ref/sdl2_video.rst", "ref/sndarray.rst", "ref/sprite.rst", "ref/surface.rst", "ref/surfarray.rst", "ref/tests.rst", "ref/time.rst", "ref/touch.rst", "ref/transform.rst", "tut/CameraIntro.rst", "tut/ChimpLineByLine.rst", "tut/DisplayModes.rst", "tut/ImportInit.rst", "tut/MakeGames.rst", "tut/MoveIt.rst", "tut/PygameIntro.rst", "tut/SpriteIntro.rst", "tut/SurfarrayIntro.rst", "tut/chimp.py.rst", "tut/en/Red_or_Black/1.Prolog/introduction.rst", "tut/en/Red_or_Black/2.Print_text/Basic TEMPLATE and OUTPUT.rst", "tut/en/Red_or_Black/3.Move_text/Basic PROCESS.rst", "tut/en/Red_or_Black/4.Control_text/Basic INPUT.rst", "tut/en/Red_or_Black/5.HP_bar/Advanced OUTPUT with Advanced PROCESS.rst", "tut/en/Red_or_Black/6.Buttons/Advanced INPUT with Advanced OUTPUT.rst", "tut/en/Red_or_Black/7.Game_board/Advanced OUTPUT and plus alpha.rst", "tut/en/Red_or_Black/8.Epilog/Epilog.rst", "tut/es/ChimpanceLineaporLinea.rst", "tut/es/CrearJuegos.rst", "tut/es/IniciarImportar.rst", "tut/es/ModosVisualizacion.rst", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/1.\ud504\ub864\ub85c\uadf8/\uc18c\uac1c.rst", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/2.\ud14d\uc2a4\ud2b8 \ucd9c\ub825/\uae30\ucd08 \ud15c\ud50c\ub9bf\uacfc \ucd9c\ub825.rst", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/3.\ud14d\uc2a4\ud2b8 \uc774\ub3d9/\uae30\ucd08 \ucc98\ub9ac.rst", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/4.\ud14d\uc2a4\ud2b8 \uc870\uc885/\uae30\ucd08 \uc785\ub825.rst", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/5.HP\ubc14/\uc2ec\ud654 \ucd9c\ub825 \uadf8\ub9ac\uace0 \uc2ec\ud654 \ucc98\ub9ac.rst", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/6.\ubc84\ud2bc\ub4e4/\uc2ec\ud654 \uc785\ub825 \uadf8\ub9ac\uace0 \uc2ec\ud654 \ucd9c\ub825.rst", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/7.\uac8c\uc784\ud310/\uc2ec\ud654 \ucd9c\ub825 \uadf8\ub9ac\uace0 \uc870\uae08 \ub354.rst", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/8.\uc5d0\ud544\ub85c\uadf8/\uc5d0\ud544\ub85c\uadf8.rst", "tut/ko/\ube68\uac04\ube14\ub85d \uac80\uc740\ube14\ub85d/\uac1c\uc694.rst", "tut/newbieguide.rst", "tut/tom_games2.rst", "tut/tom_games3.rst", "tut/tom_games4.rst", "tut/tom_games5.rst", "tut/tom_games6.rst"], "titles": ["pygame C API", "High level API exported by pygame.base", "Class BufferProxy API exported by pygame.bufferproxy", "Class Color API exported by pygame.color", "API exported by pygame.display", "API exported by pygame.event", "API exported by pygame._freetype", "API exported by pygame.mixer", "Class Rect API exported by pygame.rect", "API exported by pygame.rwobject", "Slots and c_api - Making functions and data available from other modules", "Class Surface API exported by pygame.surface", "API exported by pygame.surflock", "API exported by pygame.version", "File Path Function Arguments", "Pygame Front Page", "Pygame Logos Page", "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">pygame.BufferProxy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.camera</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.cdrom</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.Color</span></code>", "Named Colors", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.cursors</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.display</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.draw</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.event</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.examples</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.fastevent</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.font</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.freetype</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.gfxdraw</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.image</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.joystick</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.key</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.locals</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.midi</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.mixer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.mouse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.mixer.music</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.Overlay</span></code>", "<code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">pygame.PixelArray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.pixelcopy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.Rect</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.scrap</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame._sdl2.controller</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.sdl2_video</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.sndarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.sprite</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.Surface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.surfarray</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.tests</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.time</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame._sdl2.touch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pygame.transform</span></code>", "Pygame Tutorials - Camera Module Introduction", "Pygame Tutorials - Line By Line Chimp Example", "Pygame Tutorials - Setting Display Modes", "Pygame Tutorials - Import and Initialize", "Making Games With Pygame", "Pygame Tutorials - Help! How Do I Move An Image?", "Pygame Intro", "Pygame Tutorials - Sprite Module Introduction", "Pygame Tutorials - Surfarray Introduction", "pygame/examples/chimp.py", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Tutorial de Pygame - Ejemplo del Chimpanc\u00e9, L\u00ednea Por L\u00ednea", "Crear Juegos con Pygame", "Tutoriales de Pygame - Importar e Inicializar", "Tutoriales de Pygame - Configuraci\u00f3n de los Modos de Visualizaci\u00f3n", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "Author: Youngwook Kim (Korean)", "\ud55c\uad6d\uc5b4 \ud29c\ud1a0\ub9ac\uc5bc", "A Newbie Guide to pygame", "Revision: Pygame fundamentals", "Kicking things off", "Game object classes", "User-controllable objects", "Putting it all together"], "terms": {"slot": 0, "c_api": 0, "make": [0, 15, 20, 22, 24, 25, 26, 27, 31, 38, 42, 44, 45, 50, 51, 52, 54, 56, 57, 58, 59, 60, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 88, 89, 90, 91, 92, 93], "function": [0, 1, 7, 8, 9, 12, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61, 63, 64, 66, 67, 68, 69, 70, 72, 73, 88, 89, 91, 92, 93], "data": [0, 2, 15, 17, 18, 19, 22, 26, 31, 35, 37, 38, 39, 40, 41, 43, 46, 51, 56, 58, 62, 63, 65, 66, 68, 70, 71, 72, 73, 75, 88, 90, 93], "avail": [0, 1, 9, 16, 18, 20, 22, 23, 26, 27, 28, 29, 30, 31, 36, 37, 38, 41, 44, 45, 46, 49, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 78, 88], "from": [0, 3, 5, 6, 8, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93], "other": [0, 15, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 40, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 61, 62, 63, 64, 68, 70, 71, 88, 89, 90, 91, 92, 93], "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 17, 21, 26, 34, 41, 42, 48, 51, 53, 59, 60, 61, 62, 65, 66, 68, 75, 78, 88, 91, 93], "high": [0, 23, 26, 50, 67, 69], "level": [0, 15, 17, 20, 23, 28, 32, 36, 37, 38, 40, 41, 51, 53, 56, 63, 64, 65, 67, 70], "export": [0, 10, 20, 31, 38, 42, 43, 51], "base": [0, 10, 17, 18, 24, 25, 26, 28, 29, 35, 36, 48, 50, 57, 58, 62, 64, 65, 66, 67, 68, 75, 88, 91, 93], "class": [0, 15, 17, 19, 20, 26, 29, 31, 32, 35, 37, 38, 45, 51, 57, 61, 62, 66, 75, 88, 90, 93], "bufferproxi": [0, 15, 17, 31, 51], "color": [0, 1, 10, 15, 22, 23, 24, 28, 29, 30, 31, 35, 42, 43, 48, 50, 51, 52, 56, 57, 58, 59, 62, 63, 65, 67, 68, 71, 72, 73, 75, 78, 84, 85, 88, 89], "displai": [0, 1, 15, 22, 24, 25, 26, 30, 32, 33, 34, 36, 38, 39, 41, 44, 46, 48, 50, 51, 53, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 92, 93], "event": [0, 15, 18, 22, 23, 24, 26, 32, 33, 34, 37, 38, 39, 40, 47, 54, 57, 61, 62, 63, 66, 67, 69, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 93], "_freetyp": [0, 10], "mixer": [0, 15, 26, 38, 44, 49, 58, 66, 75], "rect": [0, 15, 24, 29, 30, 33, 35, 41, 45, 48, 50, 51, 56, 57, 58, 62, 63, 64, 66, 71, 72, 73, 75, 83, 84, 85, 90, 91, 92, 93], "rwobject": 0, "surfac": [0, 1, 2, 10, 12, 15, 18, 20, 22, 23, 24, 26, 28, 29, 30, 31, 35, 36, 39, 41, 43, 46, 48, 50, 51, 57, 58, 59, 62, 63, 64, 66, 75, 78, 89, 93], "surflock": 0, "version": [0, 11, 17, 20, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 38, 40, 43, 45, 47, 50, 51, 56, 57, 58, 60, 61, 62, 63, 64, 88, 90, 93], "src_c": [0, 10, 13], "includ": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 22, 23, 26, 28, 29, 30, 31, 32, 34, 37, 44, 45, 50, 51, 53, 54, 56, 58, 61, 63, 64, 65, 67, 70, 74, 88, 90, 91], "contain": [0, 6, 8, 15, 19, 22, 23, 24, 25, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 43, 45, 46, 47, 50, 51, 53, 55, 58, 59, 62, 63, 64, 66, 75, 88, 90, 92, 93], "header": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 68, 70, 80], "file": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 22, 23, 25, 26, 28, 29, 31, 38, 40, 44, 49, 53, 58, 61, 63, 65, 67, 68, 73, 75, 88, 90], "applic": [0, 17, 23, 25, 26, 27, 33, 34, 37, 38, 46, 51, 88, 92], "us": [0, 1, 8, 9, 10, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 75, 76, 89, 90, 91, 92, 93], "while": [0, 15, 17, 19, 22, 24, 25, 28, 30, 31, 32, 36, 38, 39, 40, 42, 43, 44, 49, 50, 51, 54, 57, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 93], "intern": [0, 12, 23, 24, 25, 27, 33, 38, 44, 46, 51, 58, 68, 70, 88, 93], "thi": [1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 88, 89, 90, 91, 92, 93], "extens": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 31, 56, 63], "defin": [1, 2, 3, 6, 7, 8, 10, 11, 25, 28, 29, 34, 36, 44, 46, 50, 58, 61, 62, 76, 88, 89, 92], "gener": [1, 15, 23, 25, 26, 31, 32, 33, 36, 37, 39, 40, 42, 47, 51, 52, 56, 57, 58, 63, 64, 65, 68, 73, 77, 88, 90, 93], "purpos": [1, 18, 48, 57, 61], "routin": [1, 18, 25, 28, 29, 51, 56, 58, 59, 68, 88], "start": [1, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 35, 38, 39, 40, 42, 44, 45, 47, 50, 51, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 74, 75, 88, 89, 90, 92, 93], "stop": [1, 18, 19, 24, 30, 32, 33, 38, 39, 40, 44, 47, 54, 57, 62, 64, 88, 92, 93], "sdl": [1, 5, 7, 9, 11, 12, 23, 25, 26, 27, 32, 38, 41, 43, 44, 47, 48, 56, 59, 63, 78, 88], "well": [1, 2, 12, 22, 24, 27, 30, 31, 33, 39, 42, 44, 47, 51, 56, 61, 62, 63, 64, 65, 88, 93], "variou": [1, 15, 22, 25, 26, 34, 36, 93], "convers": [1, 18, 20, 35, 42, 52, 88], "elsewher": [1, 88], "h": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 20, 25, 26, 30, 33, 42, 43, 45, 51, 56], "pyobject": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12], "pgexc_sdlerror": 1, "i": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 83, 84, 85, 89, 90, 91, 92, 93], "error": [1, 2, 6, 9, 11, 20, 23, 25, 26, 28, 29, 33, 36, 37, 43, 44, 46, 51, 53, 56, 58, 60, 64, 65, 74, 75, 77, 88, 90], "except": [1, 3, 4, 5, 6, 7, 8, 9, 11, 14, 20, 22, 23, 24, 25, 28, 29, 31, 33, 37, 38, 44, 45, 46, 51, 56, 60, 61, 65, 69, 90, 93], "type": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 54, 56, 57, 58, 59, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 92, 93], "rais": [1, 2, 3, 4, 5, 6, 7, 8, 9, 14, 17, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 36, 37, 38, 40, 43, 44, 45, 46, 48, 49, 50, 51, 52, 56, 57, 60, 65, 88, 90, 93], "int": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 17, 18, 20, 23, 24, 25, 28, 29, 30, 32, 33, 35, 36, 37, 41, 42, 44, 45, 47, 48, 50, 51, 55, 56, 71, 72, 73, 83, 84, 85], "pg_mod_autoinit": 1, "const": [1, 6, 9, 70], "char": [1, 6, 9, 28, 29, 51], "modnam": 1, "init": [1, 15, 18, 19, 22, 23, 24, 27, 28, 29, 32, 37, 38, 39, 44, 46, 47, 53, 54, 58, 59, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 93], "which": [1, 12, 14, 15, 17, 18, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 89, 90, 91, 92, 93], "ha": [1, 2, 10, 15, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 75, 77, 88, 90, 91, 93], "name": [1, 9, 18, 19, 20, 23, 25, 26, 28, 29, 32, 33, 36, 37, 44, 45, 47, 50, 51, 53, 58, 59, 61, 62, 63, 64, 65, 66, 68, 70, 75, 78, 82, 90, 92, 93], "return": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 68, 71, 72, 73, 75, 83, 84, 85, 88, 89, 90, 91, 92, 93], "1": [1, 2, 3, 5, 8, 11, 13, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88], "success": [1, 2, 5, 8, 9, 11, 23, 44, 88], "0": [1, 2, 5, 6, 9, 11, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 92, 93], "python": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 17, 18, 19, 22, 26, 28, 29, 31, 38, 43, 44, 45, 50, 51, 53, 58, 60, 61, 62, 64, 66, 67, 68, 75, 76, 77, 89, 90, 91], "set": [1, 6, 17, 18, 20, 22, 23, 24, 25, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 58, 60, 62, 65, 67, 68, 70, 71, 72, 73, 88, 89, 90, 91, 92, 93], "void": [1, 8, 12], "pg_mod_autoquit": 1, "quit": [1, 15, 19, 22, 23, 24, 25, 26, 28, 29, 32, 37, 38, 39, 44, 47, 51, 53, 57, 58, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 89, 92, 93], "pg_registerquit": 1, "f": [1, 17, 18, 32, 33, 45, 88, 90, 93], "regist": [1, 44, 46, 91], "callback": [1, 2, 17, 50], "termin": [1, 25, 37, 44, 58, 62, 68, 75], "multipl": [1, 6, 18, 19, 22, 23, 24, 25, 26, 28, 32, 33, 36, 38, 41, 44, 45, 50, 51, 56, 57, 61, 63, 64, 65, 69], "can": [1, 8, 9, 13, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 88, 89, 90, 91, 92, 93], "ar": [1, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 89, 90, 91, 92, 93], "call": [1, 9, 12, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 50, 51, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 75, 77, 78, 88, 89, 90, 91, 92, 93], "revers": [1, 51, 58, 63, 65, 93], "order": [1, 18, 23, 28, 29, 33, 37, 38, 40, 42, 44, 50, 51, 53, 54, 58, 62, 65, 68, 88, 93], "thei": [1, 10, 18, 19, 22, 23, 24, 25, 26, 28, 29, 32, 35, 36, 38, 39, 44, 45, 46, 47, 50, 51, 56, 58, 59, 62, 63, 64, 65, 68, 69, 71, 72, 88, 90, 91, 92, 93], "were": [1, 10, 23, 25, 28, 33, 50, 53, 62, 63, 64, 69, 88, 90, 93], "pg_intfromobj": 1, "obj": [1, 2, 3, 4, 7, 8, 9, 44, 45], "val": [1, 65], "convert": [1, 18, 20, 22, 24, 29, 31, 37, 38, 40, 43, 45, 49, 51, 52, 58, 59, 62, 65, 66, 75, 89, 90, 93], "number": [1, 7, 10, 17, 18, 19, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 42, 44, 47, 49, 50, 51, 52, 53, 54, 55, 56, 62, 64, 65, 69, 73, 74, 88], "like": [1, 9, 15, 18, 20, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 47, 50, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 72, 73, 74, 75, 88, 89, 90, 91, 92, 93], "object": [1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 38, 39, 40, 43, 44, 46, 47, 48, 49, 52, 54, 56, 57, 59, 61, 62, 63, 64, 65, 66, 68, 69, 70, 75, 76, 78, 88, 90, 93], "place": [1, 23, 25, 27, 29, 34, 36, 37, 39, 42, 44, 45, 46, 50, 51, 52, 53, 58, 62, 63, 64, 65, 68, 88, 91, 92], "argument": [1, 2, 3, 9, 11, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 41, 43, 44, 45, 47, 48, 50, 51, 53, 54, 56, 58, 59, 62, 64, 88, 89], "els": [1, 8, 33, 36, 43, 44, 45, 46, 58, 59, 64, 66, 69, 75, 78, 90, 93], "No": [1, 5, 6, 8, 11, 33, 44, 45, 50, 51, 67, 70, 75, 77], "pg_intfromobjindex": 1, "index": [1, 6, 15, 18, 19, 23, 29, 32, 33, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 55, 62, 65, 88], "posit": [1, 8, 17, 19, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 38, 39, 40, 44, 45, 48, 50, 51, 53, 55, 57, 58, 62, 63, 64, 66, 68, 69, 75, 88, 89, 91, 92, 93], "sequenc": [1, 8, 14, 22, 23, 24, 25, 29, 30, 33, 35, 37, 39, 42, 45, 50, 51, 56, 59, 63, 64, 88, 92], "failur": [1, 2, 3, 4, 5, 7, 8, 53], "pg_twointsfromobj": 1, "val1": 1, "v2": [1, 40], "two": [1, 15, 18, 19, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 36, 37, 38, 42, 43, 45, 47, 49, 50, 51, 53, 54, 56, 58, 62, 63, 64, 65, 70, 71, 72, 73, 88, 89, 91], "length": [1, 3, 8, 17, 19, 20, 23, 24, 25, 30, 32, 33, 36, 38, 42, 47, 51, 58, 68, 91], "2": [1, 8, 14, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 54, 55, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 87, 88], "val2": 1, "respect": [1, 22, 23, 24, 33, 35, 36, 46, 50, 51], "pg_floatfromobj": 1, "float": [1, 17, 19, 20, 24, 29, 30, 32, 35, 36, 38, 40, 45, 48, 50, 54, 56, 65], "pg_floatfromobjindex": 1, "pg_twofloatsfromobj": 1, "pg_uintfromobj": 1, "uint32": 1, "unsign": [1, 17, 20, 35, 38, 51, 65], "32": [1, 14, 17, 18, 28, 29, 31, 35, 38, 51, 52, 56, 59, 65, 68, 69, 70, 71, 72, 73, 78, 80, 81, 82, 83, 84, 85], "bit": [1, 14, 15, 17, 18, 22, 23, 26, 28, 29, 30, 31, 32, 35, 38, 40, 42, 43, 49, 50, 51, 52, 56, 57, 58, 59, 61, 62, 64, 65, 78, 88, 91, 93], "integ": [1, 8, 13, 17, 19, 20, 23, 24, 26, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 42, 43, 44, 45, 47, 49, 50, 51, 52, 53, 54, 55, 65, 71, 73], "pg_uintfromobjindex": 1, "_index": 1, "pg_rgbafromobj": [1, 10], "uint8": [1, 3], "rgba": [1, 3, 20, 23, 24, 30, 31, 51], "repres": [1, 11, 12, 13, 15, 17, 19, 20, 22, 23, 24, 25, 29, 31, 32, 33, 35, 36, 38, 39, 40, 41, 44, 45, 47, 48, 52, 54, 56, 58, 62, 63, 64, 65, 88, 91], "red": [1, 15, 18, 20, 21, 23, 24, 31, 42, 50, 51, 52, 56, 65, 68, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 84, 85, 89], "green": [1, 18, 20, 21, 23, 24, 42, 51, 52, 56, 57, 58, 65, 68, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 84, 85, 89], "blue": [1, 18, 20, 21, 23, 24, 28, 31, 42, 51, 52, 56, 57, 65, 68, 71, 72, 73, 75, 83, 84, 85, 89, 91], "alpha": [1, 20, 23, 24, 26, 28, 29, 30, 31, 35, 43, 44, 48, 51, 52, 56, 63, 65, 90], "4": [1, 3, 8, 17, 20, 24, 25, 28, 29, 33, 36, 37, 38, 39, 42, 47, 51, 56, 57, 58, 59, 60, 61, 62, 65, 66, 68, 69, 70, 71, 72, 73, 75, 77, 78, 80, 81, 82, 83, 84, 85, 87, 88, 90, 93], "arrai": [1, 2, 3, 15, 20, 22, 26, 29, 31, 33, 38, 42, 49, 51, 62, 63, 65, 72, 73, 84], "The": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 63, 65, 66, 68, 71, 75, 88, 91, 92], "must": [1, 2, 3, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 56, 58, 59, 60, 63, 64, 65, 68, 72, 88], "3": [1, 16, 17, 18, 20, 22, 23, 24, 25, 28, 30, 31, 32, 33, 36, 37, 38, 39, 42, 43, 44, 45, 47, 50, 51, 56, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 80, 81, 82, 83, 85, 87, 88], "have": [1, 3, 8, 10, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 36, 38, 40, 41, 42, 43, 44, 45, 47, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 72, 73, 88, 89, 90, 91, 92, 93], "valu": [1, 3, 8, 9, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 59, 62, 64, 65, 68, 69, 71, 72, 88, 89, 92, 93], "between": [1, 3, 20, 23, 24, 25, 28, 29, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 64, 65, 67, 70, 88], "255": [1, 20, 28, 29, 30, 32, 35, 42, 43, 50, 51, 56, 57, 58, 59, 65, 68, 69, 70, 71, 72, 73, 75, 78, 80, 81, 82, 83, 84, 85, 88, 89], "inclus": [1, 3, 20, 25, 29, 38], "For": [1, 15, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 57, 60, 61, 62, 63, 64, 65, 67, 68, 71, 88, 89, 90, 92], "an": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 64, 65, 67, 69, 75, 88, 89, 90, 91, 92, 93], "assum": [1, 9, 11, 20, 28, 29, 37, 39, 45, 51, 57, 61, 64, 90, 92], "otherwis": [1, 2, 5, 9, 12, 17, 18, 22, 23, 24, 26, 28, 29, 31, 35, 36, 37, 38, 39, 43, 45, 46, 50, 51, 52, 56, 62, 72, 73, 93], "pg_buffer": [1, 2], "py_buff": [1, 17], "view": [1, 2, 15, 42, 51], "A": [1, 4, 7, 8, 11, 12, 14, 15, 17, 18, 20, 22, 23, 24, 25, 26, 29, 30, 32, 33, 35, 38, 39, 40, 42, 43, 45, 46, 49, 50, 51, 53, 54, 56, 58, 63, 64, 75, 76, 78, 89, 90, 93], "standard": [1, 22, 25, 27, 41, 43, 44, 46, 50, 57, 58, 59, 61, 63, 64, 65, 68, 88], "buffer": [1, 2, 18, 20, 23, 31, 37, 38, 43, 46, 51, 58, 63, 64], "descript": [1, 18, 22, 25, 29, 33, 34, 44, 46, 62, 64], "consum": [1, 54, 65, 88], "hold": [1, 25, 28, 32, 33, 50, 56, 64, 65, 70], "pybuffer_releaseproc": 1, "release_buff": 1, "releas": [1, 12, 17, 18, 23, 29, 30, 32, 33, 37, 39, 42, 44, 46, 51, 58, 63, 88, 90, 92, 93], "pgexc_buffererror": 1, "ani": [1, 9, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 37, 38, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 74, 88, 89, 90, 91, 92], "relat": [1, 23, 29, 34, 39, 43, 47, 50, 88], "pgbuffer_asarrayinterfac": 1, "view_p": 1, "interfac": [1, 17, 20, 29, 33, 37, 38, 42, 43, 47, 51, 57, 63, 70, 73], "represent": [1, 3, 8, 15, 21, 24, 30, 42, 56, 58, 75], "On": [1, 2, 3, 4, 5, 6, 7, 8, 9, 18, 23, 25, 26, 37, 40, 44, 46, 50, 51, 56, 63, 66, 88], "null": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 28], "pgbuffer_asarraystruct": 1, "struct": [1, 4, 5, 6, 7, 9, 17, 29, 42, 43, 51, 52], "pgobject_getbuff": 1, "pg_view_p": 1, "flag": [1, 17, 20, 23, 24, 26, 28, 29, 32, 34, 35, 43, 50, 51, 58, 59, 64, 75, 78, 88], "request": [1, 23, 26, 28, 29, 35, 38, 49, 51, 52, 59], "pybuf": 1, "option": [1, 17, 18, 20, 23, 24, 26, 28, 29, 30, 32, 35, 37, 38, 39, 40, 43, 44, 50, 51, 53, 54, 56, 57, 58, 60, 62, 65], "mai": [1, 2, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 40, 43, 44, 45, 46, 51, 53, 56, 57, 59, 62, 63, 64, 65, 88], "support": [1, 6, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 63, 88, 91], "numpi": [1, 15, 26, 31, 42, 43, 49, 51, 52, 63], "pgbuffer_releas": 1, "pgdict_asbuff": 1, "dict": [1, 5, 17, 20, 23, 25, 32, 35, 45, 47, 51, 53, 55], "write": [1, 9, 17, 26, 37, 51, 61, 63, 67, 88, 90, 91], "dictionari": [1, 5, 23, 25, 45, 47, 50, 53, 64, 88], "describ": [1, 17, 22, 23, 37, 39, 45, 57, 59, 90], "import_pygame_bas": [1, 10], "import": [1, 10, 15, 18, 22, 24, 25, 26, 27, 28, 29, 30, 32, 34, 36, 38, 39, 44, 49, 52, 53, 59, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 93], "sdl_window": 1, "pg_getdefaultwindow": 1, "default": [1, 14, 18, 20, 22, 23, 24, 25, 26, 28, 29, 31, 33, 35, 36, 37, 38, 40, 43, 44, 45, 48, 50, 51, 53, 54, 56, 58, 59, 62, 63, 75, 78], "window": [1, 4, 15, 18, 25, 26, 27, 28, 29, 32, 33, 34, 37, 39, 44, 46, 48, 51, 58, 59, 62, 63, 68, 69, 75, 78, 88, 89, 92], "creat": [1, 2, 5, 6, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 28, 29, 31, 32, 33, 35, 36, 38, 39, 41, 42, 43, 45, 47, 48, 49, 50, 51, 52, 54, 56, 57, 59, 63, 64, 65, 66, 74, 78, 88, 89, 90, 91, 92, 93], "set_mod": [1, 15, 22, 23, 24, 32, 33, 34, 39, 44, 46, 48, 51, 57, 58, 59, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 93], "pg_setdefaultwindow": 1, "win": [1, 58, 66, 73, 75], "replac": [1, 23, 27, 29, 38, 42, 43, 44, 51, 52, 54, 62, 65, 68], "previou": [1, 23, 29, 38, 39, 48, 50, 54, 56, 58, 62, 64, 65, 69, 70, 72, 73, 88, 89, 93], "destroi": [1, 48, 64], "pgsurfaceobject": [1, 11, 12], "pg_getdefaultwindowsurfac": 1, "borrow": [1, 63, 90], "refer": [1, 12, 17, 23, 24, 31, 33, 35, 42, 46, 47, 49, 51, 52, 57, 58, 59, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 88, 92], "open": [1, 6, 9, 15, 18, 19, 23, 32, 33, 37, 44, 46, 47, 57, 58, 63, 89, 90], "pg_setdefaultwindowsurfac": 1, "screen": [1, 4, 15, 22, 24, 25, 26, 28, 31, 32, 33, 34, 39, 44, 45, 46, 48, 50, 51, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 92, 93], "invalid": [1, 23, 38, 45, 47, 56], "through": [2, 18, 25, 27, 28, 29, 31, 35, 37, 38, 44, 50, 51, 58, 61, 62, 63, 64, 74, 88, 89, 92], "protocol": [2, 15, 31, 43, 51], "pygame_bufferproxi": 2, "pytypeobject": [2, 3, 4, 7, 8, 11, 12], "pgbufproxy_typ": 2, "proxi": [2, 17], "pgbufproxy_check": 2, "x": [2, 4, 5, 6, 7, 8, 11, 12, 15, 16, 22, 23, 24, 25, 26, 28, 29, 30, 33, 35, 36, 37, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 62, 68, 69, 70, 72, 73, 75, 78, 80, 81, 82, 84, 85, 88, 89, 91, 93], "true": [2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 50, 51, 53, 56, 57, 58, 60, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 93], "instanc": [2, 3, 4, 5, 6, 7, 8, 11, 12, 17, 19, 25, 26, 29, 30, 32, 35, 36, 38, 42, 45, 50, 51, 58, 61, 64, 89, 91, 92], "fals": [2, 4, 5, 6, 11, 12, 15, 17, 18, 19, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 50, 53, 56, 57, 58, 62, 66, 75, 93], "subclass": [2, 3, 4, 5, 6, 7, 11, 12, 17, 20, 35, 36, 45, 50, 51], "pgbufproxy_new": 2, "getbufferproc": 2, "get_buff": [2, 17, 51], "new": [2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 17, 18, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 69, 71, 72, 73, 74, 75, 88, 89, 90, 91, 93], "its": [2, 9, 12, 17, 18, 23, 24, 25, 29, 30, 32, 35, 36, 37, 38, 42, 44, 45, 46, 48, 50, 51, 58, 59, 61, 62, 63, 64, 68, 69, 70, 88, 89, 90, 91, 92, 93], "expos": [2, 10, 29, 43, 51], "It": [2, 9, 12, 15, 17, 18, 19, 20, 23, 25, 26, 28, 29, 31, 32, 33, 36, 37, 38, 40, 42, 43, 44, 45, 47, 50, 51, 53, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 68, 69, 72, 73, 88, 90, 91, 92, 93], "get": [2, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 35, 37, 38, 39, 40, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93], "pgbufproxy_getpar": 2, "wrap": [2, 4, 9, 17, 22, 28, 30, 42, 51, 63], "pgbufproxy_trip": 2, "caus": [2, 18, 20, 25, 28, 35, 40, 42, 44, 56, 58, 64, 65, 66, 68, 75, 88, 92], "parent": [2, 12, 17, 48, 50, 51], "pgcolor_typ": 3, "pgcolor_check": 3, "macro": [3, 4, 5, 6, 7, 8, 11, 13], "doe": [3, 4, 7, 12, 19, 22, 23, 24, 25, 26, 28, 29, 30, 32, 33, 35, 36, 37, 38, 40, 41, 43, 44, 45, 46, 47, 50, 51, 54, 56, 57, 58, 62, 64, 65, 68, 88, 90, 92], "check": [3, 4, 5, 6, 7, 11, 15, 18, 23, 25, 26, 28, 32, 35, 38, 39, 40, 42, 44, 46, 47, 49, 50, 52, 57, 58, 60, 62, 63, 64, 67, 68, 70, 71, 72, 88, 89, 90, 91, 92, 93], "inde": 3, "pgcolor_new": 3, "four": [3, 19, 22, 23, 24, 29, 45, 52, 70, 93], "element": [3, 17, 20, 29, 36, 37, 42, 43, 49, 51, 62, 64, 65], "pgcolor_newlength": 3, "taken": [3, 21, 23, 26, 27, 36, 38, 39, 56, 91], "first": [3, 17, 19, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 45, 49, 50, 51, 52, 54, 57, 58, 59, 60, 61, 63, 64, 65, 68, 69, 70, 71, 72, 73, 88, 89, 91, 92, 93], "control": [4, 15, 18, 22, 25, 26, 28, 29, 33, 34, 38, 41, 44, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 69, 70, 75, 77, 78, 82, 88, 90], "pgvidinfoobject": 4, "sdl_videoinfo": 4, "info": [4, 23, 37, 59, 78, 90], "pgvidinfo_typ": 4, "pgvidinfo_asvidinfo": 4, "field": [4, 8, 12, 17, 32, 37], "actual": [4, 11, 18, 19, 22, 23, 28, 30, 32, 37, 38, 40, 41, 43, 45, 50, 51, 54, 56, 58, 59, 62, 63, 64, 65, 73, 75, 78, 88, 89, 92], "pgvidinfo_new": 4, "pgvidinfo_check": 4, "Will": [4, 5, 6, 11, 32, 38, 54], "interact": [5, 15, 26, 33, 34, 42, 47, 50, 53, 62, 63, 65, 70, 91], "queue": [5, 18, 23, 32, 33, 34, 37, 38, 39, 40, 47, 54, 58, 63, 88, 92], "pgeventobject": 5, "eventtyp": [5, 25], "code": [5, 14, 15, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 39, 42, 43, 44, 45, 46, 50, 51, 56, 57, 58, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 76, 88, 89, 90, 91, 92, 93], "pgevent_typ": 5, "pgevent_check": 5, "made": [5, 6, 11, 15, 23, 25, 49, 62, 71, 73, 74, 88, 91], "pgevent_new": 5, "sdl_event": 5, "If": [5, 9, 12, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 71, 72, 73, 74, 88, 89, 91, 92, 93], "empti": [5, 19, 23, 25, 27, 28, 29, 32, 33, 35, 44, 45, 46, 50, 53, 59, 64], "pgevent_new2": 5, "attribut": [5, 23, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 39, 44, 45, 50, 51, 53, 54, 58, 64, 89, 91, 92, 93], "pgevent_filluserev": 5, "e": [5, 20, 23, 24, 28, 30, 31, 32, 33, 35, 36, 37, 38, 44, 45, 50, 51, 57, 61, 75, 76, 78, 88, 89, 91, 92], "fill": [5, 8, 9, 15, 22, 23, 24, 25, 26, 29, 30, 32, 35, 39, 43, 48, 50, 51, 56, 57, 58, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 89, 93], "inform": [5, 13, 15, 17, 18, 19, 23, 28, 32, 33, 36, 37, 39, 47, 51, 52, 53, 55, 59, 62, 64, 65, 68, 78], "user": [5, 15, 18, 23, 24, 25, 27, 28, 33, 37, 44, 46, 51, 53, 58, 61, 63, 64, 65, 67, 72, 88, 89, 91], "freetyp": [6, 15, 26, 28, 29, 44], "font": [6, 15, 26, 32, 44, 58, 60, 63, 66, 68, 69, 70, 71, 72, 73, 75, 77, 80, 81, 82, 83, 84, 85, 88, 89], "pygame_freetyp": [6, 28, 44], "pgfontobject": 6, "pgfont_typ": 6, "pgfont_new": 6, "filenam": [6, 22, 28, 29, 31, 38, 40, 62, 90], "long": [6, 25, 27, 29, 35, 38, 40, 44, 50, 53, 63, 64, 88, 92], "font_index": [6, 29], "path": [6, 9, 15, 25, 26, 28, 29, 31, 36, 38, 44, 53, 57, 58, 66, 75, 88, 90, 93], "unless": [6, 19, 23, 29, 31, 41, 46, 51, 54, 56, 58, 62, 64, 68, 69, 91, 92], "pgfont_check": 6, "pgfont_is_al": 6, "o": [6, 9, 18, 22, 23, 25, 26, 31, 32, 33, 37, 44, 45, 46, 58, 62, 66, 75, 76, 78, 88, 90, 93], "startup": [7, 38], "shutdown": [7, 63], "load": [7, 15, 18, 22, 26, 30, 31, 40, 50, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 91, 93], "plai": [7, 15, 19, 23, 26, 32, 36, 37, 40, 47, 58, 62, 63, 64, 66, 70, 74, 75, 88, 90], "sound": [7, 15, 26, 40, 58, 61, 63, 64, 66, 67, 70, 73, 75, 88, 90], "pygame_mix": 7, "pgsoundobject": 7, "structur": [7, 10, 43, 89, 91, 92], "pgsound_typ": 7, "pgsound_new": 7, "mix_chunk": 7, "chunk": [7, 17, 93], "pgsound_check": 7, "pgsound_aschunk": 7, "associ": [7, 29, 48, 55], "pgchannelobject": 7, "channel": [7, 20, 31, 37, 38, 40, 51, 65, 88], "pgchannel_typ": 7, "pgchannel_new": 7, "channelnum": 7, "pgchannel_check": 7, "pgchannel_asint": 7, "music": [7, 15, 26, 37, 38, 40, 63, 74, 90], "store": [8, 22, 23, 29, 30, 35, 50, 51, 52, 58, 62, 64, 68], "rectangular": [8, 29, 30, 35, 42, 48, 50, 51, 62, 63, 71, 88], "coordin": [8, 22, 24, 29, 30, 32, 35, 36, 39, 50, 51, 56, 89, 93], "pgrectobject": 8, "sdl_rect": [8, 11], "r": [8, 20, 24, 26, 30, 32, 33, 36, 42, 43, 45, 51, 56, 64, 65, 71, 72, 73, 83, 84, 85], "rectangl": [8, 15, 23, 24, 26, 28, 29, 30, 33, 45, 48, 50, 51, 56, 64, 68, 88, 89, 91, 93], "pgrect_typ": 8, "pgrect_asrect": 8, "access": [8, 9, 15, 17, 19, 24, 25, 26, 28, 29, 32, 35, 37, 38, 39, 41, 43, 44, 46, 50, 51, 59, 64, 65, 67, 88], "pgrect_new": 8, "pgrect_new4": 8, "y": [8, 15, 20, 22, 23, 24, 25, 28, 29, 30, 32, 33, 35, 36, 39, 41, 42, 44, 45, 47, 48, 49, 50, 51, 52, 55, 56, 58, 62, 66, 68, 69, 70, 72, 73, 75, 76, 77, 78, 81, 82, 84, 85, 88, 89, 91, 92, 93], "w": [8, 25, 26, 30, 33, 35, 36, 42, 43, 45, 56], "size": [8, 17, 18, 22, 23, 24, 25, 26, 28, 29, 31, 35, 38, 39, 41, 42, 43, 45, 48, 50, 51, 52, 56, 57, 58, 59, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 78, 79, 80, 81, 82, 83, 84, 85, 88, 89], "pgrect_fromobject": 8, "temp": 8, "translat": [8, 14, 26, 29, 33, 42], "tupl": [8, 17, 19, 20, 22, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 42, 44, 45, 47, 49, 50, 51, 52, 53, 62, 65, 88], "method": [8, 9, 11, 14, 15, 17, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 35, 36, 38, 39, 40, 42, 44, 45, 46, 49, 50, 51, 52, 54, 58, 59, 61, 62, 63, 64, 65, 71, 73, 88, 89, 90, 91, 93], "pass": [8, 9, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 50, 51, 53, 54, 56, 58, 62, 63, 64, 66, 75, 88, 90], "pointer": [8, 9, 11, 58], "local": [8, 15, 25, 33, 34, 38, 39, 44, 57, 58, 60, 61, 68, 69, 70, 71, 72, 73, 75, 76, 77, 80, 81, 82, 83, 84, 85, 89, 90, 93], "declar": [8, 62, 65], "do": [8, 15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 32, 33, 35, 41, 42, 44, 45, 50, 51, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 74, 75, 89, 90, 91, 92, 93], "reli": [8, 33, 92], "being": [8, 18, 23, 24, 25, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 46, 62, 63, 64, 69, 88, 92], "": [8, 11, 12, 14, 17, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 54, 56, 58, 59, 61, 63, 64, 65, 67, 68, 69, 70, 71, 74, 88, 89, 90, 91, 92, 93], "instead": [8, 14, 20, 22, 23, 24, 25, 26, 28, 29, 32, 33, 36, 38, 42, 44, 50, 51, 53, 56, 62, 64, 65, 69, 88, 91], "pgrect_norm": 8, "normal": [8, 11, 19, 20, 28, 29, 35, 36, 44, 45, 50, 51, 53, 55, 58, 64, 65, 71, 75, 91, 93], "given": [8, 13, 17, 20, 22, 23, 24, 25, 28, 29, 30, 32, 35, 36, 37, 38, 39, 44, 45, 46, 47, 50, 51, 52, 54, 55, 56, 58, 59, 64, 68, 70, 73, 88], "neg": [8, 9, 17, 25, 29, 35, 36, 38, 39, 40, 42, 45, 51, 56, 65, 93], "width": [8, 18, 22, 23, 24, 26, 28, 29, 31, 32, 35, 41, 42, 45, 48, 50, 51, 56, 59, 62, 63, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 83, 84, 85, 88], "height": [8, 18, 22, 23, 24, 26, 28, 29, 31, 32, 35, 41, 42, 45, 48, 50, 51, 56, 59, 62, 63, 67, 68, 69, 70, 71, 72, 73, 78, 79, 80, 81, 82, 83, 84, 85, 88], "adjust": [8, 20, 23, 28, 29, 37, 71, 93], "implement": [9, 10, 12, 17, 18, 20, 23, 26, 29, 33, 37, 42, 43, 44, 50, 61, 63, 64, 73, 74, 88, 93], "sdl_rwop": 9, "pgrwops_fromobject": 9, "string": [9, 14, 17, 18, 19, 20, 22, 23, 25, 28, 29, 31, 32, 33, 37, 38, 41, 44, 46, 48, 49, 51, 52, 53, 56, 68, 88, 90, 91], "let": [9, 20, 21, 26, 44, 51, 58, 59, 61, 63, 65, 69, 70, 71, 88, 92], "read": [9, 17, 20, 25, 26, 29, 37, 39, 46, 48, 50, 51, 61, 62, 65, 88], "seek": 9, "tell": [9, 38, 39, 44, 51, 58, 59, 62, 64, 88, 92], "close": [9, 15, 18, 22, 23, 24, 25, 26, 29, 32, 37, 40, 42, 47, 56, 57, 62, 65, 89, 90], "thread": [9, 18, 25, 26, 27, 28, 30, 38, 39, 50, 53, 57], "gil": [9, 30], "acquir": [9, 51, 52], "befor": [9, 17, 18, 19, 22, 23, 27, 28, 29, 32, 33, 35, 37, 38, 39, 40, 44, 46, 50, 51, 53, 54, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 88, 91, 92], "pgrwops_fromfileobject": 9, "pgrwops_isfileobject": 9, "rw": 9, "wrapper": [9, 88], "pgrwops_getfileextens": [], "origin": [20, 22, 23, 24, 26, 29, 31, 32, 33, 35, 42, 45, 47, 48, 50, 51, 56, 58, 62, 63, 64, 65, 66, 75], "come": [25, 26, 28, 29, 37, 44, 57, 62, 63, 64, 65, 66, 88, 91, 92, 93], "pgrwops_releaseobject": 9, "context": [9, 23, 42, 48, 88], "free": [9, 25, 26, 40, 62, 64, 88], "attach": [9, 23, 26, 47, 57], "decrement": 9, "refcount": 9, "handl": [9, 14, 15, 23, 25, 28, 29, 32, 33, 38, 43, 44, 50, 56, 59, 61, 63, 64, 65, 66, 70, 88, 91, 93], "pg_encodefilepath": 9, "eclass": 9, "byte": [9, 14, 17, 18, 20, 22, 23, 28, 29, 31, 37, 38, 42, 43, 44, 46, 51], "properli": [9, 15, 25, 39, 53, 58, 62, 64, 65, 88], "encod": [9, 14, 22, 28, 29, 40, 44, 46, 51], "forbidden": 9, "wa": [9, 15, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 35, 37, 38, 39, 40, 42, 43, 44, 47, 54, 57, 58, 62, 63, 64, 65, 68, 70, 73, 88, 90, 92], "alreadi": [9, 19, 23, 25, 29, 32, 37, 38, 40, 45, 47, 50, 57, 62, 63, 64, 65, 88, 92], "pg_encodestr": 9, "same": [9, 18, 19, 20, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 42, 43, 44, 45, 47, 50, 51, 52, 54, 56, 57, 58, 59, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 88, 89, 93], "pyunicode_asencodedstr": [9, 44], "One": [10, 19, 32, 63, 65, 88], "exampl": [10, 15, 17, 20, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 49, 50, 51, 53, 56, 57, 60, 61, 62, 63, 64, 67, 68, 70, 71, 74, 75, 88, 89, 90, 91, 92], "where": [10, 15, 17, 19, 20, 22, 23, 24, 26, 29, 30, 33, 35, 36, 38, 39, 40, 41, 42, 44, 46, 47, 50, 51, 53, 56, 57, 58, 62, 64, 65, 68, 88, 89, 92, 93], "c": [10, 15, 17, 18, 20, 26, 28, 30, 33, 43, 44, 45, 51, 60, 63, 65, 67, 77, 79], "also": [10, 12, 14, 15, 17, 19, 20, 22, 23, 25, 26, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 72, 73, 88, 89, 90, 91, 92, 93], "_pygam": 10, "12": [10, 28, 29, 32, 44, 58, 66, 68, 75, 80], "Then": [10, 22, 24, 58, 62, 64, 65, 68, 71, 73, 89, 90, 92, 93], "need": [10, 15, 18, 19, 20, 22, 23, 25, 26, 27, 28, 31, 32, 33, 35, 42, 44, 45, 46, 50, 51, 53, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 89, 90, 91, 92, 93], "pygameapi_base_numslot": 10, "so": [10, 17, 18, 20, 22, 23, 24, 26, 29, 30, 31, 32, 33, 36, 38, 42, 43, 44, 45, 50, 51, 52, 53, 56, 58, 59, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 74, 88, 89, 90, 91, 92, 93], "you": [9, 10, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 46, 50, 51, 54, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 71, 72, 74, 89, 90, 91, 92, 93], "ad": [10, 23, 24, 25, 29, 31, 32, 33, 35, 38, 39, 40, 42, 43, 44, 47, 50, 54, 56, 58, 64, 65, 68, 69, 70, 72, 73, 88, 91, 93], "anoth": [10, 20, 23, 24, 26, 28, 29, 30, 32, 33, 35, 36, 39, 40, 42, 43, 45, 46, 47, 48, 50, 51, 62, 63, 64, 65, 73, 74, 88, 90, 93], "increment": [10, 56, 65], "pygam": [10, 14, 21, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 90, 91, 93], "sure": [10, 50, 54, 57, 58, 62, 63, 64, 65, 69, 70, 88, 93], "gfxdraw": [10, 15, 24, 30], "imag": [11, 12, 15, 16, 18, 20, 22, 23, 26, 28, 29, 30, 41, 46, 48, 50, 52, 56, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93], "pgsurface_typ": 11, "pgsurface_check": 11, "pgsurface_new": 11, "sdl_surfac": 11, "pgsurface_assurfac": 11, "pgsurface_blit": 11, "dstobj": 11, "srcobj": 11, "dstrect": [11, 48], "srcrect": [11, 48], "the_arg": 11, "blit": [11, 20, 23, 26, 28, 29, 30, 32, 43, 48, 50, 51, 52, 56, 57, 58, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 91, 92, 93], "portion": [11, 23, 45, 48, 51, 56, 63, 64, 88], "onto": [11, 20, 27, 28, 29, 30, 35, 36, 50, 51, 58, 62, 63, 65, 68, 88, 89, 91], "indic": [11, 23, 24, 25, 30, 35, 37, 39, 40, 42, 45, 46, 49, 50, 52, 53, 65], "perform": [11, 23, 25, 26, 28, 29, 30, 35, 36, 38, 42, 50, 51, 52, 56, 57, 59, 64, 65, 88, 89, 92], "pygame_blend_add": 11, "pygame_blend_sub": 11, "pygame_blend_mult": 11, "pygame_blend_min": 11, "pygame_blend_max": 11, "pygame_blend_rgba_add": 11, "pygame_blend_rgba_sub": 11, "pygame_blend_rgba_mult": 11, "pygame_blend_rgba_min": 11, "pygame_blend_rgba_max": 11, "pygame_blend_alpha_sdl2": [11, 44], "pygame_blend_premultipli": 11, "updat": [11, 15, 20, 23, 24, 25, 32, 36, 41, 44, 45, 47, 48, 50, 54, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 84, 85, 88, 89, 91, 92, 93], "area": [11, 23, 24, 26, 28, 29, 32, 35, 44, 45, 48, 50, 51, 56, 57, 58, 62, 63, 64, 66, 68, 72, 75, 88, 89, 91, 92, 93], "affect": [11, 23, 24, 29, 38, 42, 44, 45, 50, 51, 52, 65, 74], "lock": [12, 17, 24, 25, 27, 33, 42, 43, 50, 51, 52], "pglifetimelockobject": 12, "lockobj": 12, "own": [12, 16, 22, 25, 26, 27, 37, 38, 46, 48, 59, 61, 63, 65, 88, 90], "lifetim": [12, 42, 52, 65], "pair": [12, 23, 24, 28, 29, 31, 32, 45, 51], "modif": [12, 18, 51, 90], "remov": [12, 17, 18, 25, 27, 28, 32, 36, 48, 50, 56, 58, 62, 64, 93], "automat": [12, 19, 23, 28, 29, 30, 31, 32, 33, 34, 37, 38, 44, 46, 50, 51, 58, 60, 65, 68, 69], "when": [12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 88, 89, 91, 92, 93], "garbag": [12, 51], "collect": [12, 23, 33, 51, 60, 88], "pglifetimelock_typ": 12, "pglifetimelock_check": 12, "pgsurface_prep": 12, "surfobj": 12, "subsurfac": [12, 51, 56], "owner": 12, "pgsurface_unprep": 12, "pgsurface_lock": 12, "pgsurface_lockbi": 12, "keep": [12, 17, 25, 32, 50, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 88, 92], "weak": [12, 17, 88], "eventu": [12, 23, 25], "itself": [12, 18, 28, 29, 36, 42, 43, 44, 48, 51, 58, 61, 62, 63, 64, 88, 91, 92, 93], "howev": [12, 18, 29, 31, 34, 36, 42, 44, 45, 47, 50, 56, 62, 67, 68, 69, 70, 74, 88], "best": [12, 18, 23, 25, 26, 35, 38, 42, 43, 51, 52, 59, 62, 63, 64, 65, 72, 78, 90], "pgsurface_unlockbi": 12, "finish": [12, 33, 38, 40, 51, 60, 61, 62, 63, 65, 88], "pgsurface_unlock": 12, "pgsurface_locklifetim": 12, "anywher": [12, 62], "within": [12, 17, 22, 29, 33, 35, 36, 44, 50, 51, 56, 62, 68, 74, 88], "candid": [12, 33], "retriev": [13, 36, 38, 46, 88, 92], "compil": [13, 15, 19, 22, 25, 28, 29, 31, 38, 41, 44], "time": [13, 15, 18, 19, 22, 23, 24, 25, 26, 28, 29, 32, 34, 37, 38, 39, 40, 48, 49, 50, 51, 53, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 81, 82, 83, 84, 85, 88, 89, 90, 91, 93], "9": [13, 15, 17, 18, 20, 23, 25, 26, 29, 30, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 51, 52, 56, 57, 65, 68, 69, 70, 80, 81, 82], "5": [13, 20, 23, 24, 25, 29, 32, 33, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 49, 50, 57, 58, 61, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 84, 85, 87, 93], "pg_major_vers": 13, "pg_minor_vers": 13, "pg_patch_vers": 13, "pg_versionnum": 13, "major": [13, 23, 28, 31, 38, 44, 63], "minor": [13, 28, 31, 38, 44, 63], "patch": [13, 26, 28, 31, 38, 44, 63], "pg_version_atleast": 13, "current": [13, 18, 19, 22, 23, 25, 26, 27, 28, 29, 32, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 58, 59, 62, 63, 64, 67, 68, 69, 71, 88, 91, 92, 93], "least": [13, 24, 30, 35, 43, 51, 55, 61, 65, 67, 70, 88], "equal": [13, 17, 20, 22, 24, 25, 29, 33, 35, 36, 51, 67, 73], "specifi": [13, 18, 21, 23, 24, 28, 29, 31, 32, 35, 36, 37, 38, 40, 46, 47, 50, 56, 59, 65, 93], "take": [14, 22, 24, 25, 26, 28, 29, 31, 32, 33, 35, 36, 37, 38, 40, 42, 45, 50, 51, 53, 56, 57, 58, 59, 63, 64, 65, 68, 88, 89, 90, 92, 93], "accept": [14, 24, 26, 28, 29, 30, 31, 38, 39, 45, 50, 51, 52, 62], "either": [14, 17, 19, 22, 23, 29, 31, 32, 36, 38, 39, 45, 50, 51, 56, 58, 59, 93], "unicod": [14, 25, 28, 29, 33, 38, 44, 46, 51], "8": [14, 17, 18, 20, 22, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 38, 42, 43, 44, 46, 49, 50, 51, 52, 54, 56, 59, 62, 63, 65, 68, 69, 70, 78, 80, 81, 82, 87, 93], "ascii": [14, 22, 33, 52, 67], "charact": [14, 17, 23, 28, 29, 33, 43, 44, 52, 62, 88, 92], "filesystem": 14, "sy": [14, 44, 53, 62, 63, 67, 68, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 90, 93], "getfilesystemencod": [14, 44], "point": [14, 17, 19, 20, 22, 24, 26, 29, 30, 35, 36, 37, 45, 48, 50, 56, 57, 62, 63, 64, 65, 67, 72, 88, 93], "abov": [14, 18, 19, 22, 23, 24, 28, 29, 32, 40, 41, 42, 43, 45, 48, 57, 58, 62, 64, 65, 74, 88, 91], "u": [14, 17, 32, 33, 36, 41, 58, 62, 63, 65, 75, 88], "ffff": 14, "uffff": [14, 28], "directli": [14, 17, 22, 24, 25, 28, 29, 31, 33, 42, 43, 46, 49, 51, 52, 53, 62, 64, 65, 67, 88], "escap": [14, 29, 33, 58, 75, 88, 93], "uxxxxxxxx": [14, 29], "even": [14, 18, 19, 23, 24, 26, 28, 29, 32, 36, 40, 42, 44, 54, 57, 62, 63, 64, 65, 67, 68, 72, 88], "interpret": [14, 26, 29, 44, 61, 88], "built": [14, 18, 28, 29, 31, 44, 47, 88, 89], "uc": [14, 28, 29], "16": [14, 22, 23, 28, 29, 32, 38, 49, 59, 65, 68, 78, 80], "oper": [14, 20, 22, 23, 24, 25, 27, 33, 36, 42, 44, 45, 48, 50, 51, 52, 56, 64, 65, 88, 89], "system": [14, 15, 18, 19, 22, 23, 25, 26, 27, 28, 29, 32, 33, 36, 37, 39, 40, 44, 48, 49, 51, 52, 53, 59, 68, 70, 88, 89, 92], "unchang": [14, 20, 23, 29], "x00": [14, 28], "permit": [14, 18, 29, 75, 78], "cannot": [14, 18, 23, 25, 28, 30, 38, 40, 45, 48, 50, 51, 52, 54, 62, 63, 64, 69, 88, 90, 93], "how": [14, 15, 19, 20, 23, 24, 26, 29, 31, 32, 33, 35, 36, 38, 40, 44, 46, 50, 51, 54, 56, 58, 61, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 88, 91, 92, 93], "utf": [14, 28, 29, 46], "surrog": [14, 29], "depend": [14, 23, 25, 28, 29, 31, 35, 38, 40, 42, 43, 46, 49, 58, 63, 66, 69, 71, 75, 88], "readm": 15, "basic": [15, 18, 20, 23, 26, 31, 46, 58, 61, 62, 63, 64, 65, 75, 80, 88, 90, 91, 92, 93], "about": [9, 15, 18, 19, 23, 26, 28, 32, 36, 37, 39, 42, 44, 48, 50, 51, 55, 58, 59, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 88, 89, 91, 92], "what": [15, 20, 22, 23, 24, 26, 28, 32, 38, 39, 44, 46, 50, 57, 58, 59, 60, 61, 63, 64, 65, 68, 69, 71, 74, 89, 90, 92, 93], "who": [15, 48, 61, 62, 64, 90, 93], "involv": [15, 26, 29, 51, 64, 88, 91, 93], "find": [15, 18, 19, 23, 24, 25, 26, 28, 32, 35, 36, 38, 50, 51, 56, 57, 58, 59, 62, 63, 64, 65, 69, 71, 88, 91, 93], "instal": [15, 18, 26, 28, 31, 58, 65], "step": [15, 30, 32, 42, 58, 65, 68, 70, 73, 92], "sever": [15, 22, 23, 24, 26, 29, 38, 45, 50, 54, 59, 60, 62, 63, 64, 65, 88, 89, 93], "platform": [15, 18, 23, 24, 25, 30, 33, 35, 37, 38, 41, 44, 46, 51, 53, 54, 57, 58, 59, 63, 88, 90, 92], "help": [15, 22, 25, 26, 28, 32, 33, 36, 37, 38, 39, 48, 50, 51, 53, 54, 58, 59, 61, 64, 65, 70, 88, 90, 91, 92], "prebuilt": 15, "binari": [15, 18, 20, 22, 41], "your": [15, 16, 18, 19, 22, 23, 25, 26, 27, 28, 30, 31, 33, 37, 38, 44, 46, 54, 56, 57, 58, 59, 60, 61, 63, 65, 67, 70, 89, 90, 91, 92, 93], "logo": [15, 23], "differ": [15, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 32, 33, 35, 38, 40, 42, 44, 48, 50, 51, 56, 57, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 88, 89, 91, 92], "resolut": [15, 16, 23, 29, 41, 51, 54, 56, 58, 59, 75], "lgpl": 15, "licens": [15, 90, 93], "distribut": [15, 18, 53, 58], "under": [15, 37, 39, 40, 62, 63, 90, 93], "provid": [15, 18, 20, 23, 26, 27, 28, 29, 33, 35, 36, 38, 41, 42, 44, 45, 50, 51, 53, 54, 56, 57, 58, 67, 90, 91], "sourc": [15, 18, 26, 31, 37, 38, 42, 43, 48, 50, 51, 56, 58, 61, 62, 63, 64, 67, 68, 69, 70, 75, 88, 90, 93], "commerci": [15, 63], "softwar": [15, 18, 23, 30, 37, 41, 50, 51, 58, 63, 75], "chang": [15, 18, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 57, 58, 59, 61, 63, 64, 65, 68, 69, 70, 71, 73, 88, 91, 92, 93], "program": [15, 19, 23, 25, 27, 32, 33, 37, 38, 41, 44, 45, 53, 54, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 88, 89, 90, 91, 92], "introduct": [15, 60, 67, 79], "written": [15, 24, 28, 60, 61, 63, 64, 88, 90, 91], "appear": [15, 23, 25, 54, 62, 63, 64, 70, 88], "volum": [15, 38, 40, 63], "py": [15, 23, 26, 44, 46, 53, 56, 61, 62, 65, 76], "magazin": [15, 71], "initi": [15, 18, 19, 23, 24, 25, 27, 28, 29, 32, 33, 34, 37, 38, 44, 46, 47, 49, 50, 51, 54, 57, 59, 63, 64, 66, 68, 69, 75, 81, 88, 91], "begin": [15, 17, 18, 26, 38, 40, 45, 56, 62, 63, 65, 69, 91], "packag": [15, 26, 28, 29, 30, 31, 49, 52, 58, 60, 63, 65], "some": [15, 18, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 42, 44, 45, 46, 50, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 72, 88, 89, 90, 91, 92, 93], "all": [15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 88, 89, 90, 91, 92], "move": [15, 25, 26, 36, 39, 44, 45, 50, 51, 56, 58, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 92, 93], "cover": [15, 24, 33, 44, 45, 51, 56, 57, 59, 62, 74, 88, 89], "concept": [15, 61, 62, 63, 65, 69, 74, 88], "behind": [15, 23, 31, 50, 91, 92, 93], "2d": [15, 35, 42, 43, 48, 52, 63, 64, 65, 68, 73, 80, 88], "comput": [15, 18, 19, 26, 28, 31, 32, 38, 54, 58, 62, 63, 64, 69, 74, 88], "anim": [15, 26, 31, 50, 56, 62, 63, 64, 67], "draw": [15, 20, 23, 28, 29, 31, 32, 35, 48, 50, 51, 57, 62, 63, 64, 66, 67, 68, 71, 72, 73, 75, 83, 84, 85, 88, 89, 93], "clear": [15, 23, 24, 25, 32, 33, 35, 38, 43, 48, 50, 51, 62, 63, 64, 67, 79, 88], "them": [15, 16, 22, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 38, 42, 44, 45, 49, 50, 51, 52, 57, 58, 59, 62, 63, 65, 71, 88, 89, 90, 91, 92, 93], "chimp": [15, 26, 61, 64, 75, 90], "line": [15, 24, 26, 28, 30, 31, 32, 45, 48, 53, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 88, 91, 93], "simpl": [15, 22, 23, 24, 25, 26, 32, 42, 50, 51, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 88, 89, 90, 93], "fist": [15, 58, 66, 75], "chimpanze": 15, "inspir": 15, "annoi": [15, 61, 73], "flash": 15, "banner": [15, 26, 58, 66], "earli": [15, 48, 63, 88], "2000": [15, 63, 88], "examin": 15, "everi": [15, 18, 19, 22, 25, 26, 32, 33, 35, 36, 38, 40, 44, 50, 51, 52, 54, 56, 59, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 74, 88, 89, 90, 92], "sprite": [15, 26, 35, 36, 50, 61, 66, 88, 92, 93], "higher": [15, 16, 23, 36, 37, 47, 50, 52, 59, 63, 64], "organ": [15, 50, 64, 88], "game": [15, 16, 18, 22, 23, 25, 26, 27, 32, 39, 44, 47, 51, 54, 57, 59, 60, 62, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 90, 92, 93], "manag": [15, 19, 25, 32, 38, 42, 50, 51, 59, 63, 64], "detail": [15, 23, 24, 29, 32, 33, 34, 35, 36, 37, 41, 50, 51, 56, 57, 61, 71, 88], "found": [15, 20, 26, 28, 29, 33, 34, 35, 37, 45, 49, 50, 51, 52, 58, 59, 62, 65, 70, 89, 92], "almost": [15, 58, 61, 63, 64, 65, 67, 90], "more": [15, 18, 19, 20, 23, 24, 25, 26, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 42, 43, 44, 47, 50, 51, 54, 57, 58, 59, 60, 61, 63, 64, 70, 71, 73, 74, 88, 89, 90, 91, 92, 93], "advanc": [15, 28, 29, 47, 50, 51, 58, 62, 63, 67, 70], "than": [15, 18, 19, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 44, 45, 47, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 69, 70, 74, 88, 89, 90, 91, 92, 93], "regular": [15, 23, 40, 41, 50, 51, 56, 64], "understand": [15, 41, 59, 61, 62, 63, 64, 65, 68, 69, 70, 71, 88, 89, 90, 92, 93], "surfarrai": [15, 17, 26, 43, 49, 51, 52, 63, 88], "allow": [15, 18, 20, 22, 23, 25, 27, 28, 29, 31, 32, 36, 38, 42, 44, 45, 46, 50, 51, 56, 57, 58, 59, 62, 64, 65, 91, 93], "effici": [15, 23, 25, 28, 50, 62, 64, 88], "per": [15, 24, 25, 29, 30, 31, 32, 35, 49, 50, 51, 52, 53, 54, 58, 59, 62, 63, 65, 69, 81, 88, 92, 93], "pixel": [15, 17, 18, 20, 22, 23, 24, 26, 28, 29, 30, 31, 35, 41, 45, 48, 51, 56, 58, 59, 63, 65, 89, 92, 93], "effect": [15, 23, 25, 26, 28, 32, 40, 44, 46, 47, 50, 51, 56, 57, 58, 62, 63, 64, 65, 73, 88, 90], "featur": [15, 23, 25, 26, 27, 28, 29, 35, 36, 44, 45, 50, 51, 56, 59, 64, 65, 88, 91], "custom": [15, 23, 25, 26, 38, 50, 63], "filter": [15, 25, 35, 56, 65], "arraydemo": [15, 26, 65], "camera": [15, 26, 44, 88], "captur": [15, 18, 26, 31, 32], "watch": [15, 57, 61, 89], "live": [15, 26, 65], "stream": [15, 37, 38, 48, 63], "vision": [15, 18], "those": [15, 18, 22, 23, 24, 25, 26, 28, 29, 39, 42, 43, 50, 57, 61, 62, 64, 65, 88, 90, 91, 92, 93], "case": [15, 18, 20, 23, 24, 28, 29, 31, 33, 36, 37, 38, 40, 43, 44, 51, 57, 58, 62, 64, 68, 70, 72, 73, 74, 88, 89, 91, 92], "newbi": 15, "guid": [15, 32, 57, 65, 89], "list": [15, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 41, 44, 45, 46, 50, 51, 53, 58, 59, 64, 65, 68, 70, 78, 88], "thirteen": 15, "tip": [15, 64, 88], "peopl": [15, 31, 58, 61, 62, 63], "comfort": [15, 91], "larg": [15, 29, 36, 43, 45, 51, 61, 64, 65, 88, 91], "bigger": [15, 23, 58, 73], "topic": [15, 88], "entir": [15, 19, 23, 24, 35, 38, 48, 50, 51, 62, 63, 64, 68, 69, 70, 72, 88], "mode": [15, 20, 23, 25, 26, 28, 29, 30, 33, 38, 39, 44, 46, 48, 50, 51, 53, 58, 63, 65, 78], "\ud55c\uad6d\uc5b4": 15, "\ud29c\ud1a0\ub9ac\uc5bc": [15, 85], "korean": 15, "\ube68\uac04\ube14\ub85d": 15, "\uac80\uc740\ube14\ub85d": 15, "de": 15, "ejemplo": [15, 76, 77], "del": [15, 32, 65, 76, 78], "chimpanc\u00e9": [15, 76], "l\u00ednea": [15, 76, 77], "por": [15, 76, 77, 78], "lo": [15, 76, 77], "incluyen": 15, "un": [15, 75, 76, 77, 78], "sencillo": [15, 76], "programa": [15, 75, 76], "con": [15, 75, 77, 78], "pu\u00f1o": [15, 75], "interactivo": 15, "est\u00e1": [15, 75, 76, 77, 78], "inspirado": 15, "en": [15, 76, 77, 78], "el": [15, 76, 77, 78], "molesto": [15, 76], "principio": 15, "la": [15, 76, 77, 78], "d\u00e9cada": 15, "est": [15, 75, 76, 77, 78], "examina": 15, "cada": [15, 75, 76, 77, 78], "c\u00f3digo": [15, 75, 76], "utilizada": [15, 77], "cursor": [15, 26, 39, 58, 63, 75, 88], "configur": [15, 23, 29, 39, 65], "shape": [15, 17, 28, 42, 43, 51, 63, 65, 72, 88], "ellips": [15, 24, 30], "incom": 15, "input": [15, 18, 23, 25, 26, 28, 32, 33, 39, 44, 45, 48, 51, 53, 56, 57, 61, 63, 66, 67, 68, 69, 72, 73, 74, 82, 88, 91], "devic": [15, 18, 19, 25, 26, 32, 33, 37, 39, 44, 47, 55, 57, 59, 63, 88], "demonstr": [15, 26, 36, 58, 65], "individu": [15, 19, 29, 35, 44, 51, 53, 58, 88], "render": [15, 23, 24, 26, 32, 41, 48, 50, 58, 63, 66, 68, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 84, 85, 88, 89, 91, 92], "truetyp": [15, 28, 58, 63, 75], "enhanc": [15, 28, 29], "face": 15, "anti": [15, 23, 29, 89], "alias": [15, 23, 28, 29, 89], "save": [15, 18, 31, 61, 63, 88], "transfer": [15, 46, 56, 61, 65], "joystick": [15, 25, 26, 44, 47, 63, 88, 89, 92], "kei": [15, 17, 20, 22, 23, 25, 26, 33, 34, 35, 45, 51, 55, 57, 58, 61, 62, 63, 64, 66, 70, 71, 72, 73, 74, 75, 82, 83, 84, 85, 88, 92, 93], "keyboard": [15, 25, 26, 34, 39, 62, 63, 67, 70, 88, 89], "constant": [15, 22, 25, 29, 33, 38, 39, 44, 46, 47, 54, 57, 60, 62, 68, 72], "mous": [15, 22, 23, 25, 26, 32, 46, 48, 58, 61, 62, 63, 66, 67, 70, 72, 75, 88, 89, 92], "track": [15, 19, 50, 54, 57, 62, 64, 88], "top": [15, 23, 24, 26, 28, 29, 31, 35, 38, 39, 45, 50, 51, 62, 63, 67, 68, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 93], "pixelarrai": [15, 26, 42, 51], "manipul": [15, 31, 42, 45, 51, 63, 65, 88, 91], "flexibl": [15, 60, 64, 77, 90, 91], "scrap": [15, 46], "nativ": [15, 18, 22, 44, 57, 88], "clipboard": [15, 25, 26], "sndarrai": [15, 26, 38, 49, 63], "sampl": [15, 20, 38, 40, 56, 57, 62, 64, 65, 92], "test": [15, 19, 23, 25, 26, 28, 29, 31, 32, 33, 36, 38, 39, 41, 44, 45, 47, 50, 51, 56, 58, 59, 60, 65], "framer": [15, 18, 54, 57, 58, 62], "transform": [15, 18, 29, 57, 58, 62, 63, 65, 66, 75], "resiz": [15, 23, 25, 26, 35, 45, 48, 56, 58, 75, 89], "api": [15, 18, 23, 25, 30, 33, 37, 46, 47, 48, 57, 88], "share": [15, 25, 28, 31, 32, 33, 38, 46, 48, 51, 52, 54], "amongst": 15, "search": [15, 28, 29, 35, 45, 50, 56], "keyword": [15, 18, 24, 25, 26, 29, 31, 35, 38, 44, 48, 51, 53, 56], "These": [16, 20, 22, 23, 24, 26, 29, 32, 37, 39, 44, 45, 47, 48, 50, 51, 52, 53, 56, 58, 59, 62, 64, 65, 88, 89, 91], "project": [16, 26, 36, 61, 63, 67, 68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93], "pleas": [16, 23, 28, 33, 36, 44, 45, 51, 56, 88], "put": [15, 16, 32, 46, 54, 60, 61, 63, 64, 66, 68, 89, 90, 91], "up": [15, 16, 18, 22, 23, 24, 25, 27, 28, 32, 33, 37, 38, 39, 40, 42, 44, 47, 50, 51, 58, 60, 62, 64, 65, 71, 72, 73, 75, 84, 85, 88, 89, 90, 91, 92], "wherev": [16, 25, 65], "see": [9, 16, 18, 19, 20, 23, 24, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 43, 44, 45, 47, 50, 51, 52, 56, 57, 58, 60, 61, 62, 63, 64, 65, 88, 89, 91, 92, 93], "fit": [16, 18, 23, 29, 38, 45, 51, 89], "thecorruptor": 16, "juli": 16, "29": 16, "2001": [16, 63], "upscal": 16, "mega_jc": 16, "august": 16, "2021": 16, "pygame_logo": 16, "svg": [16, 31], "png": [16, 26, 31, 58, 63, 65, 66, 67, 68, 69, 70, 75, 79, 80, 81, 82, 88, 90, 91, 92, 93], "1561": 16, "438": 16, "pygame_lofi": 16, "pygame_pow": 16, "1617": 16, "640": [16, 18, 26, 39, 48, 57, 59, 62, 68, 69, 70, 71, 72, 73, 78, 80, 81, 82, 83, 84, 85, 93], "pygame_tini": 16, "214": 16, "60": [15, 16, 22, 24, 37, 38, 39, 58, 62, 66, 69, 71, 72, 73, 75, 81, 83, 84, 85, 88, 93], "pygame_powered_lowr": 16, "101": 16, "40": [15, 16, 22, 24, 54, 56, 62, 63, 71, 72, 73, 83, 84, 85, 88], "There": [16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 37, 39, 45, 46, 50, 51, 57, 58, 59, 60, 62, 64, 65, 69, 70, 72, 73, 89], "layer": [16, 50, 63, 64], "photoshop": 16, "here": [15, 16, 18, 23, 25, 26, 34, 35, 39, 41, 44, 50, 51, 58, 59, 60, 64, 65, 66, 68, 70, 88, 89, 90, 91, 92, 93], "mb": 16, "legacy_logo": 16, "zip": [16, 88], "50": [16, 22, 24, 26, 36, 45, 57, 65, 73, 85, 88, 89], "kb": 16, "raw": [17, 31, 42, 43, 51, 52, 65], "copi": [17, 22, 26, 31, 35, 36, 38, 42, 45, 46, 48, 49, 50, 51, 52, 56, 58, 62, 63, 64, 65, 88, 89], "singl": [17, 20, 22, 23, 24, 25, 28, 29, 30, 32, 33, 38, 40, 41, 42, 43, 45, 50, 51, 52, 53, 58, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 88, 89], "block": [17, 18, 25, 35, 40, 50, 51, 57, 58, 73, 88], "design": [17, 50, 61, 62, 63, 64, 68, 71, 92], "get_view": [17, 51], "behalf": 17, "In": [17, 18, 22, 23, 27, 29, 30, 31, 32, 33, 36, 37, 39, 40, 43, 44, 51, 54, 57, 58, 59, 61, 62, 63, 64, 65, 68, 70, 72, 88, 89, 90, 91, 92, 93], "layout": [17, 25, 28, 29, 43, 52, 92], "entri": [17, 33, 51, 88], "map": [17, 20, 24, 42, 43, 47, 51, 52, 59, 65], "follow": [17, 18, 22, 24, 25, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 45, 46, 47, 49, 50, 52, 58, 61, 63, 64, 65, 66, 67, 75, 88], "recogn": [17, 25, 29, 32, 43, 45, 56], "each": [17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 35, 36, 38, 39, 42, 46, 49, 50, 51, 52, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 71, 88, 89, 91, 92, 93], "dimens": [17, 18, 23, 24, 26, 28, 29, 30, 35, 36, 42, 43, 45, 50, 51, 52, 56, 58, 65, 93], "typestr": 17, "give": [15, 17, 22, 23, 29, 32, 37, 40, 42, 50, 51, 58, 59, 60, 61, 65, 74, 88, 89, 90, 91], "byteord": 17, "littl": [17, 22, 26, 44, 50, 54, 58, 59, 61, 62, 64, 65, 68, 88, 91, 92], "endian": [17, 44], "big": [17, 18, 44, 50, 57, 62, 64, 65, 70, 71, 72], "second": [15, 17, 19, 20, 22, 24, 26, 30, 32, 36, 38, 40, 42, 49, 50, 53, 54, 58, 60, 62, 63, 65, 69, 70, 71, 72, 81, 88, 92, 93], "sign": [17, 33, 37, 38, 39, 44], "v": [17, 20, 33, 36, 41], "third": [17, 18, 22, 30, 36, 62, 63, 65, 71, 89], "bytes": [17, 23, 35, 51, 59, 78], "u4": 17, "pc": [17, 37], "v3": 17, "would": [17, 22, 24, 25, 28, 35, 36, 38, 44, 50, 51, 56, 57, 58, 60, 61, 62, 63, 64, 65, 88, 89, 91, 92, 93], "24": [17, 18, 22, 24, 28, 31, 42, 51, 52, 56, 63, 65], "equival": [17, 29, 35, 37, 42, 43, 88], "physic": [15, 17, 23, 32, 61, 63, 90, 92, 93], "address": [17, 51, 88, 90], "onli": [17, 18, 19, 20, 23, 24, 25, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 72, 73, 74, 88, 89, 90, 91, 93], "bool": [17, 18, 19, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 47, 48, 50, 51, 56], "writabl": 17, "stride": [17, 42], "requir": [17, 18, 23, 25, 26, 28, 33, 35, 36, 37, 38, 44, 45, 46, 47, 50, 51, 55, 56, 59, 61, 62, 63, 64, 65, 68, 70, 88, 89, 90, 92], "non": [17, 19, 23, 24, 26, 29, 31, 33, 41, 42, 44, 50, 51, 56, 58, 64, 88, 90], "contigu": [17, 24, 51], "match": [17, 23, 28, 29, 31, 32, 33, 37, 38, 42, 43, 51, 52, 56, 58, 59, 62, 64, 65, 68], "aliv": [17, 50, 64], "visibl": [17, 22, 23, 39, 41, 50, 58, 59, 62, 63, 75, 78], "callabl": [17, 44, 50], "invok": [17, 29, 92], "one": [15, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 73, 88, 89, 90, 91, 92, 93], "none": [17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 56, 58, 60, 65, 66, 75, 77, 89, 90, 91, 93], "after": [17, 19, 23, 24, 28, 29, 31, 32, 33, 37, 38, 40, 47, 49, 50, 51, 57, 58, 59, 62, 63, 65, 68, 69, 70, 88, 93], "variabl": [17, 22, 23, 28, 32, 37, 40, 44, 57, 58, 62, 63, 64, 65, 69, 70, 71, 74, 75, 77, 93], "extend": [17, 24, 31, 44, 50], "valid": [17, 23, 28, 38, 39, 41, 45, 51, 57, 64], "discontinu": [17, 51, 67], "memori": [9, 17, 23, 24, 25, 29, 31, 38, 51, 52, 62, 67], "gap": [17, 51], "exclud": [17, 25, 51, 53], "count": [17, 19, 32, 35, 38, 42, 56, 57, 69, 73], "properti": [17, 25, 29, 39, 50, 52], "len": [17, 20, 22, 24, 30, 50, 64, 65], "str": [17, 18, 20, 28, 29, 32, 33, 35, 37, 44, 47, 49, 52, 71, 72, 73, 83, 84, 85], "offset": [17, 24, 26, 28, 29, 30, 35, 37, 40, 42, 45, 50, 51, 58], "overwrit": [17, 24, 26, 32, 47], "valueerror": [17, 22, 24, 26, 29, 30, 31, 33, 35, 36, 43, 46, 49, 51, 52, 57, 65], "greater": [17, 24, 28, 29, 33, 35, 36, 37, 40, 51, 74], "indexexcept": 17, "get_backend": 18, "backend": [18, 23, 25, 43, 44, 56, 59, 78], "colorspac": 18, "list_camera": [18, 57], "linux": [18, 23, 37, 40, 44, 57, 63, 88], "v4l2": [18, 57], "msmf": 18, "wider": [18, 33], "via": [18, 23, 29, 35, 57, 88], "integr": 18, "opencv": [18, 44, 57], "experiment": [18, 23, 25, 28, 30, 33, 36, 44, 45, 46, 48, 51, 56, 57], "disappear": [18, 30, 46], "later": [18, 23, 30, 33, 37, 38, 42, 46, 50, 57, 58, 59, 60, 62, 63, 64, 65, 68, 88, 90, 93], "veri": [18, 23, 26, 37, 54, 58, 60, 62, 63, 64, 65, 70, 88, 91, 92, 93], "break": [18, 30, 33, 46, 54, 62, 92], "next": [15, 18, 27, 29, 30, 35, 36, 38, 41, 46, 58, 64, 68, 73, 88, 89, 92, 93], "bayer": 18, "rgb": [18, 20, 23, 24, 28, 30, 31, 41, 43, 51, 57, 58, 63, 65, 75, 88, 89], "sonix": 18, "sn9c101": 18, "webcam": 18, "copyright": 18, "2004": 18, "takafumi": 18, "mizuno": 18, "taka": 18, "qce": 18, "l": [18, 20, 32, 33], "jp": 18, "redistribut": 18, "form": [18, 22, 25, 30, 37, 51, 88, 89], "without": [18, 22, 23, 24, 29, 32, 36, 38, 42, 45, 48, 50, 51, 52, 58, 59, 62, 63, 64, 65, 69, 70, 72, 88, 92, 93], "condit": [18, 22, 38, 68, 93], "met": [18, 22], "retain": [18, 36, 51], "notic": [18, 36, 45, 62, 68, 69, 70, 72, 88, 91, 92, 93], "disclaim": 18, "reproduc": [18, 75], "document": [18, 34, 38, 44, 51, 57, 59, 61, 62, 63, 64, 65, 88, 90, 91], "materi": [18, 88], "BY": 18, "THE": 18, "author": [18, 28, 33, 36, 45, 51, 56, 57, 58, 59, 60, 62, 63, 64, 65, 78, 88], "AND": [18, 33], "contributor": 18, "AS": 18, "express": [18, 20], "OR": [18, 29, 35], "impli": [18, 29], "warranti": 18, "BUT": 18, "NOT": [18, 37, 40, 56], "limit": [15, 18, 19, 23, 24, 25, 29, 31, 32, 38, 40, 51, 52, 53, 54, 60, 63, 64, 65, 73], "TO": 18, "OF": 18, "merchant": 18, "FOR": 18, "particular": [18, 29, 40, 42, 49, 50, 53, 54, 59, 88], "IN": [18, 27], "NO": 18, "shall": 18, "BE": 18, "liabl": 18, "direct": [18, 23, 24, 26, 29, 30, 32, 36, 39, 43, 47, 51, 58, 62, 65, 70, 88, 91, 93], "indirect": 18, "incident": 18, "special": [18, 22, 23, 25, 33, 35, 38, 43, 50, 51, 56, 58, 59, 62, 64, 65, 68, 88, 89], "exemplari": 18, "consequenti": 18, "damag": 18, "procur": 18, "substitut": [18, 22], "good": [15, 18, 22, 23, 26, 28, 38, 44, 51, 58, 61, 62, 63, 64, 65, 67, 68, 88, 89, 90, 91, 93], "servic": 18, "loss": [18, 23, 58, 59, 78, 88], "profit": 18, "busi": [18, 19, 38, 54, 62], "interrupt": 18, "ON": 18, "theori": [18, 88], "liabil": 18, "whether": [18, 23, 25, 26, 28, 29, 35, 38, 39, 45, 46, 48, 56, 61, 62, 71, 72, 88, 89], "contract": [18, 56], "strict": [18, 61, 88], "tort": 18, "neglig": 18, "aris": 18, "wai": [18, 23, 24, 25, 26, 28, 29, 31, 32, 33, 36, 38, 39, 43, 44, 47, 48, 50, 51, 53, 58, 60, 61, 62, 63, 64, 65, 71, 89, 91, 92, 93], "out": [15, 18, 24, 29, 32, 35, 36, 37, 38, 40, 44, 57, 58, 59, 61, 62, 64, 65, 88, 89, 90, 91, 92, 93], "IF": 18, "advis": [18, 22, 23], "possibl": [18, 23, 25, 28, 29, 31, 32, 36, 44, 50, 51, 57, 58, 63, 65, 67, 68], "SUCH": 18, "choos": [18, 22, 23, 26, 59, 61, 65, 73, 88], "guarante": [18, 23, 25, 33, 38, 46, 53], "succe": [18, 23], "attempt": [18, 28, 29, 37, 51, 58, 60, 65], "parti": [18, 63], "want": [9, 18, 20, 23, 25, 27, 31, 32, 33, 36, 44, 50, 51, 54, 56, 57, 58, 59, 61, 62, 63, 64, 65, 67, 68, 88, 89, 90, 91, 92, 93], "overrid": [18, 29, 35, 44, 50, 51, 63, 88], "choic": [18, 23, 38, 57], "explicitli": [18, 23, 29, 30, 42, 54, 56, 58, 60], "select": [18, 23, 29, 33, 35, 37, 38, 40, 44, 46, 53, 59, 62, 67, 69, 73, 88], "think": [18, 23, 36, 62, 64, 65, 70, 74, 88, 93], "work": [15, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 34, 35, 37, 38, 42, 43, 45, 46, 50, 51, 52, 53, 56, 57, 58, 59, 61, 62, 63, 64, 65, 68, 69, 89, 91, 93], "prioriti": 18, "_camera": 18, "builtin": [18, 28, 64], "python3": 18, "t": [9, 18, 19, 23, 24, 26, 27, 28, 29, 32, 33, 36, 40, 44, 46, 48, 49, 50, 51, 52, 54, 56, 57, 58, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 89, 90, 91, 92, 93], "enumer": 18, "mac": [18, 23, 26, 37, 40, 44, 46, 63, 88], "videocaptur": [18, 57], "abandon": 18, "futur": [18, 19, 23, 25, 27, 28, 29, 32, 37, 38, 41, 46, 64], "main": [18, 25, 26, 27, 32, 39, 41, 46, 50, 53, 56, 57, 61, 62, 64, 65, 66, 71, 72, 73, 83, 84, 85, 89, 90, 91, 92, 93], "among": 18, "don": [9, 18, 24, 26, 29, 32, 36, 50, 54, 56, 57, 58, 61, 62, 63, 64, 65, 68, 70, 74, 89, 90, 91, 93], "someth": [15, 18, 24, 26, 39, 56, 57, 59, 62, 63, 64, 65, 68, 69, 70, 88, 89], "know": [18, 28, 31, 33, 46, 57, 58, 62, 64, 65, 67, 68, 69, 70, 73, 91, 92, 93], "port": [18, 26, 37, 44, 48], "paramet": [18, 20, 23, 24, 25, 26, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 44, 45, 46, 51, 55, 56, 57, 70, 71], "format": [18, 20, 22, 23, 24, 29, 30, 31, 35, 37, 38, 40, 41, 42, 43, 44, 45, 49, 51, 52, 56, 58, 59, 62, 63, 65, 68, 88, 89], "destsurfac": 18, "destin": [18, 28, 29, 30, 35, 42, 50, 51, 56, 62, 63, 89], "hsv": [18, 20, 57], "yuv": [18, 41, 57], "depth": [15, 18, 23, 35, 42, 48, 51, 52, 56, 57, 58, 59, 62, 78], "process": [18, 25, 26, 27, 32, 46, 52, 53, 54, 60, 62, 67, 68, 70, 72, 73, 81, 88], "power": [18, 32, 33, 38, 64, 74, 88], "small": [18, 22, 23, 28, 29, 32, 36, 39, 44, 45, 58, 62, 63, 65, 71, 72, 88, 89, 91], "scale": [18, 23, 24, 26, 29, 31, 35, 36, 44, 45, 48, 50, 56, 58, 63, 65, 66, 75], "smaller": [18, 23, 35, 38, 45, 51, 71, 72, 88], "readi": [18, 22, 32, 48, 53, 57, 58, 62, 63], "fed": 18, "doesn": [18, 23, 26, 28, 29, 44, 51, 58, 62, 64, 72, 73, 88, 90, 91, 92, 93], "much": [18, 24, 26, 28, 31, 54, 56, 58, 59, 60, 61, 62, 63, 65, 67, 68, 71, 73, 74, 88, 89, 91, 93], "uniniti": [18, 19, 23, 28, 32, 37, 38, 44, 47], "get_control": [18, 57], "set_control": [18, 57], "get_siz": [18, 29, 35, 42, 51, 58, 66, 75, 89, 93], "record": [18, 29, 52, 53, 72, 88], "query_imag": [18, 57], "frame": [15, 18, 23, 25, 27, 32, 44, 50, 54, 57, 58, 62, 63, 64, 69, 81, 88, 89, 92, 93], "get_imag": [18, 57], "get_raw": [18, 38], "unmodifi": 18, "typic": [18, 23, 37, 51, 58], "dev": [18, 57], "video0": [18, 57], "480": [18, 26, 39, 48, 57, 58, 59, 62, 66, 68, 69, 70, 71, 72, 73, 75, 78, 80, 81, 82, 83, 84, 85, 93], "desir": [18, 51, 56, 58, 59, 88], "output": [18, 25, 26, 28, 32, 35, 56, 67, 69, 70, 73, 74, 88, 92], "luma": 18, "chromin": 18, "hue": 18, "satur": 18, "below": [15, 18, 20, 23, 24, 26, 27, 32, 37, 44, 45, 47, 50, 57, 62, 71], "onc": [15, 18, 19, 23, 25, 28, 29, 31, 32, 33, 35, 37, 38, 40, 42, 44, 47, 51, 53, 54, 58, 60, 62, 63, 64, 65, 88, 89, 90, 91, 93], "until": [18, 23, 24, 25, 27, 32, 35, 37, 40, 47, 51, 54, 57, 62, 64, 66, 88, 89, 92], "again": [18, 33, 40, 44, 50, 51, 54, 59, 61, 62, 64, 65, 88, 89, 92, 93], "hflip": [18, 57], "vflip": [18, 57], "bright": [18, 57], "horizont": [18, 24, 25, 26, 29, 30, 39, 56, 58, 62, 65, 75], "vertic": [18, 23, 24, 26, 29, 30, 31, 39, 42, 56, 58, 62, 65, 75], "flip": [15, 18, 22, 23, 24, 25, 31, 32, 35, 39, 42, 45, 48, 50, 56, 57, 58, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 89, 93], "unsupport": [18, 40], "note": [18, 19, 20, 23, 24, 25, 26, 27, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 44, 45, 47, 51, 54, 56, 57, 58, 59, 60, 62, 64, 66, 76, 88, 90, 91, 93], "though": [18, 23, 30, 37, 38, 43, 53, 61, 65, 88, 89, 90, 91, 92, 93], "correct": [18, 22, 28, 41, 45, 51, 56, 62, 65, 68, 73], "claim": 18, "succeed": 18, "previous": [18, 20, 25, 28, 29, 31, 38, 40, 44, 59, 62, 89], "chosen": [18, 23, 29], "suppli": [18, 35, 37, 38, 57, 58, 65, 89], "should": [18, 19, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 42, 44, 45, 47, 50, 51, 54, 56, 58, 59, 61, 62, 63, 64, 65, 68, 69, 88, 89, 90, 91, 93], "alwai": [18, 23, 25, 26, 28, 29, 30, 31, 32, 33, 35, 39, 41, 44, 45, 47, 49, 50, 51, 54, 56, 58, 59, 60, 62, 63, 64, 65, 68, 69, 70, 71, 81, 88, 90, 91, 93], "dure": [18, 23, 29, 30, 33, 40, 42, 52, 65], "did": [18, 24, 62, 63, 64], "reliabl": [18, 23, 37], "separ": [18, 22, 26, 28, 29, 37, 38, 44, 45, 50, 51, 52, 53, 56, 57, 61, 62, 64, 65, 72, 88, 90], "pull": [18, 58, 66, 75], "off": [18, 24, 25, 26, 29, 32, 37, 38, 40, 45, 56, 58, 61, 62, 64, 88, 93], "reus": [18, 90], "exist": [18, 19, 22, 23, 24, 25, 28, 29, 32, 33, 37, 47, 48, 50, 51, 64], "pixelformat": 18, "librari": [15, 18, 26, 28, 29, 30, 31, 32, 37, 38, 44, 47, 59, 62, 63, 67], "get_init": [19, 23, 27, 28, 29, 32, 37, 38, 44, 46, 47, 49, 58, 60, 66, 75, 77], "get_count": [19, 32, 37, 47], "cd": 19, "drive": 19, "manual": [19, 28, 29, 32, 41, 44, 51, 57, 64, 77], "sdl1": [19, 23, 41, 51], "altern": [19, 23, 24, 26, 28, 29, 30, 45], "pycdio": 19, "dvd": [19, 69, 81], "playback": [19, 26, 38, 40, 63], "anyth": [15, 19, 23, 27, 44, 50, 51, 58, 62, 63, 64, 65, 74, 88], "most": [15, 19, 23, 24, 26, 28, 29, 31, 38, 39, 40, 44, 45, 50, 51, 54, 57, 59, 60, 61, 63, 64, 65, 74, 88, 89], "thing": [19, 25, 27, 36, 40, 44, 57, 58, 59, 60, 61, 62, 63, 64, 65, 89, 91], "scan": 19, "happen": [19, 24, 58, 60, 62, 63, 64, 88, 89, 92, 93], "safe": [9, 19, 23, 25, 28, 29, 32, 37, 38, 42, 44, 47, 50, 51, 57, 60], "longer": [19, 28, 32, 38, 47, 91, 92], "sinc": [15, 19, 20, 23, 25, 28, 31, 32, 36, 38, 39, 44, 48, 50, 51, 52, 54, 57, 58, 59, 60, 62, 63, 64, 65, 88], "id": [19, 23, 25, 32, 33, 37, 38, 48, 55], "lower": [19, 23, 32, 36, 37, 38, 41, 52, 88], "paus": [19, 26, 33, 38, 40, 54, 90], "temporarili": [19, 24, 33, 38, 40, 51, 52], "resum": [19, 38, 40], "unpaus": [19, 38, 40], "eject": 19, "get_id": [19, 32], "get_nam": [19, 32], "get_busi": [19, 38, 40], "get_paus": 19, "get_curr": 19, "get_empti": 19, "get_numtrack": 19, "get_track_audio": 19, "get_al": 19, "get_track_start": 19, "get_track_length": 19, "determin": [19, 20, 22, 23, 24, 28, 29, 31, 33, 36, 37, 40, 41, 50, 51, 56, 59, 64, 65, 68, 69, 72, 91], "mani": [19, 23, 24, 25, 28, 29, 33, 36, 38, 39, 40, 44, 45, 50, 51, 54, 56, 58, 59, 62, 63, 88], "zero": [19, 20, 24, 28, 29, 36, 37, 38, 45, 51, 59, 64, 65, 93], "cooper": 19, "rest": [19, 25, 27, 57, 58, 62, 63, 65, 88], "been": [19, 20, 22, 23, 24, 25, 29, 32, 36, 38, 39, 40, 44, 46, 47, 50, 51, 59, 60, 62, 63, 64, 88, 92, 93], "brief": [19, 26, 44, 61, 62], "avoid": [19, 23, 28, 33, 36, 38, 42, 53, 65, 88, 93], "awhil": 19, "end": [19, 24, 25, 30, 31, 33, 38, 40, 44, 45, 50, 58, 61, 62, 63, 66, 69, 74, 75, 88, 89, 92], "besid": [19, 26, 65], "section": [15, 19, 51, 58, 61, 62, 64, 65, 67, 68, 90, 93], "disc": 19, "lose": [19, 23, 33, 56], "noth": [19, 23, 24, 30, 32, 50, 58, 59, 63, 64, 88, 89, 90], "isn": [19, 27, 48, 57, 61, 62, 64, 69, 71, 88, 92], "often": [19, 31, 36, 51, 61, 63, 65, 69, 88, 90], "letter": [19, 28, 51], "back": [19, 28, 29, 32, 33, 37, 38, 50, 57, 58, 59, 66, 68, 75, 92, 93], "both": [19, 23, 24, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 42, 51, 56, 57, 62, 63, 64, 65, 67, 71, 74, 88, 91, 93], "num_track": 19, "consist": [19, 24, 25, 27, 38, 46, 61, 65, 89, 90], "absolut": [19, 20, 29, 32, 37, 40, 51, 88], "g": [20, 23, 24, 26, 28, 30, 31, 33, 36, 37, 42, 43, 44, 45, 50, 51, 56, 88, 91, 92], "b": [20, 24, 26, 32, 33, 36, 42, 43, 45, 46, 47, 51, 56, 65], "color_valu": 20, "cmy": 20, "hsva": 20, "hsla": 20, "i1i2i3": 20, "correct_gamma": 20, "appli": [20, 24, 26, 29, 35, 36, 37, 51, 55, 56, 65, 88], "certain": [20, 25, 33, 36, 57, 58, 61, 67, 68, 69, 70, 71, 72, 88], "gamma": [20, 23], "set_length": 20, "lerp": [20, 36], "linear": [20, 23, 36, 50, 65], "interpol": [20, 30, 36], "premul_alpha": [20, 51], "compon": [20, 35, 36, 43, 51, 65, 68], "multipli": [20, 24, 29, 33, 36, 42, 45, 48, 51, 56, 65], "rang": [20, 23, 24, 25, 28, 29, 32, 33, 35, 36, 37, 38, 42, 44, 47, 50, 57, 62, 63, 65, 68, 71, 72, 73, 83, 84, 85], "arithmet": [20, 36, 42, 65], "unari": 20, "space": [20, 28, 29, 31, 33, 37, 42, 62, 88], "hsl": 20, "fulli": [20, 23, 33, 45, 48, 50, 51, 52, 58, 62, 65, 88], "opaqu": [20, 26, 29, 35, 43, 48, 51, 52, 65, 88], "preserv": [20, 44, 45, 51], "left": [20, 23, 24, 25, 29, 33, 35, 38, 39, 44, 45, 47, 50, 51, 57, 58, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 93], "hand": [20, 22, 42, 43, 58, 60, 62, 88, 91], "comparison": [20, 25, 26, 42, 65, 70, 74], "bug": [20, 44, 56, 63, 88, 93], "dimension": [20, 24, 29, 30, 35, 36, 42, 62, 65, 75], "assign": [20, 25, 29, 32, 42, 45, 47, 50, 53, 58, 62, 65, 92], "characterist": [20, 74], "floor": 20, "divis": [20, 22, 88], "modulu": 20, "right": [20, 23, 24, 25, 29, 30, 33, 35, 38, 42, 44, 45, 47, 50, 51, 58, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 88, 91, 92, 93], "result": [20, 24, 28, 29, 35, 36, 37, 40, 42, 45, 51, 53, 56, 58, 62, 63, 64, 65, 68, 69, 70, 73, 80, 88, 93], "64": [20, 29, 56, 58, 66, 75], "63": 20, "immut": 20, "usabl": [20, 31, 57], "get_at_map": [20, 51], "map_rgb": [20, 24, 42, 51, 52], "unmap_rgb": [20, 24, 43, 51, 52], "clone": 20, "swatch": 20, "html": [20, 70, 82], "rrggbbaa": 20, "rrggbb": 20, "rr": 20, "gg": 20, "bb": 20, "aa": [20, 30, 65], "digit": [20, 32, 36], "hex": 20, "0xff": 20, "0xrrggbbaa": 20, "0xrrggbb": 20, "0x00": 20, "readabl": [20, 38, 68, 90], "newli": [20, 35], "m": [15, 20, 26, 32, 33, 37, 39, 47, 53, 58, 65, 75], "exact": [20, 22, 23, 24, 31, 32, 39, 57, 59, 72, 73], "due": [20, 23, 25, 36, 51, 88], "round": [20, 24, 36, 37, 38, 92], "slightli": [15, 20, 25, 26, 36, 39, 40, 51, 54, 58, 64, 88, 89], "might": [20, 23, 25, 26, 29, 36, 44, 46, 60, 61, 62, 64, 65, 88, 90, 91, 93], "expect": [20, 27, 31, 33, 36, 37, 38, 39, 43, 53, 57, 62], "360": [20, 29, 36, 47, 58, 66, 75], "100": [20, 24, 36, 37, 51, 57, 62, 65, 88], "i1": 20, "i2": 20, "i3": 20, "deprec": [20, 23, 24, 25, 26, 27, 29, 32, 36, 49, 50, 51, 52], "unpack": [20, 39], "_": [20, 33], "Or": [20, 26, 44, 64, 74], "acolor": 20, "self": [20, 32, 35, 36, 45, 50, 51, 56, 57, 58, 62, 64, 66, 75, 91, 92, 93], "far": [20, 36, 58, 62, 71, 88, 91, 92, 93], "go": [20, 22, 23, 24, 32, 36, 37, 51, 53, 57, 58, 59, 60, 61, 64, 65, 66, 68, 70, 74, 75, 88, 89, 90, 92, 93], "mean": [15, 20, 22, 23, 24, 29, 32, 33, 36, 37, 38, 39, 40, 43, 47, 48, 50, 56, 57, 58, 59, 62, 63, 64, 68, 69, 70, 71, 72, 88, 92], "colour": [20, 44, 51], "remain": [20, 40, 45, 51, 52, 89], "blend_premultipli": [20, 51], "blend": [20, 24, 26, 29, 44, 48, 51], "pre": [20, 29, 51], "colordict": 21, "aliceblu": 21, "antiquewhit": 21, "antiquewhite1": 21, "antiquewhite2": 21, "antiquewhite3": 21, "antiquewhite4": 21, "aqua": 21, "aquamarin": 21, "aquamarine1": 21, "aquamarine2": 21, "aquamarine3": 21, "aquamarine4": 21, "azur": 21, "azure1": 21, "azure2": 21, "azure3": 21, "azure4": 21, "beig": 21, "bisqu": 21, "bisque1": 21, "bisque2": 21, "bisque3": 21, "bisque4": 21, "black": [21, 22, 23, 24, 26, 29, 35, 42, 51, 56, 57, 58, 63, 65, 67, 68, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 88], "blanchedalmond": 21, "blue1": 21, "blue2": 21, "blue3": 21, "blue4": 21, "blueviolet": 21, "brown": 21, "brown1": 21, "brown2": 21, "brown3": 21, "brown4": 21, "burlywood": 21, "burlywood1": 21, "burlywood2": 21, "burlywood3": 21, "burlywood4": 21, "cadetblu": 21, "cadetblue1": 21, "cadetblue2": 21, "cadetblue3": 21, "cadetblue4": 21, "chartreus": 21, "chartreuse1": 21, "chartreuse2": 21, "chartreuse3": 21, "chartreuse4": 21, "chocol": 21, "chocolate1": 21, "chocolate2": 21, "chocolate3": 21, "chocolate4": 21, "coral": 21, "coral1": 21, "coral2": 21, "coral3": 21, "coral4": 21, "cornflowerblu": 21, "cornsilk": 21, "cornsilk1": 21, "cornsilk2": 21, "cornsilk3": 21, "cornsilk4": 21, "crimson": 21, "cyan": 21, "cyan1": 21, "cyan2": 21, "cyan3": 21, "cyan4": 21, "darkblu": 21, "darkcyan": 21, "darkgoldenrod": 21, "darkgoldenrod1": 21, "darkgoldenrod2": 21, "darkgoldenrod3": 21, "darkgoldenrod4": 21, "darkgrai": 21, "darkgreen": 21, "darkgrei": 21, "darkkhaki": 21, "darkmagenta": 21, "darkolivegreen": 21, "darkolivegreen1": 21, "darkolivegreen2": 21, "darkolivegreen3": 21, "darkolivegreen4": 21, "darkorang": 21, "darkorange1": 21, "darkorange2": 21, "darkorange3": 21, "darkorange4": 21, "darkorchid": 21, "darkorchid1": 21, "darkorchid2": 21, "darkorchid3": 21, "darkorchid4": 21, "darkr": 21, "darksalmon": 21, "darkseagreen": 21, "darkseagreen1": 21, "darkseagreen2": 21, "darkseagreen3": 21, "darkseagreen4": 21, "darkslateblu": 21, "darkslategrai": 21, "darkslategray1": 21, "darkslategray2": 21, "darkslategray3": 21, "darkslategray4": 21, "darkslategrei": 21, "darkturquois": 21, "darkviolet": 21, "deeppink": 21, "deeppink1": 21, "deeppink2": 21, "deeppink3": 21, "deeppink4": 21, "deepskyblu": 21, "deepskyblue1": 21, "deepskyblue2": 21, "deepskyblue3": 21, "deepskyblue4": 21, "dimgrai": 21, "dimgrei": 21, "dodgerblu": 21, "dodgerblue1": 21, "dodgerblue2": 21, "dodgerblue3": 21, "dodgerblue4": 21, "firebrick": 21, "firebrick1": 21, "firebrick2": 21, "firebrick3": 21, "firebrick4": 21, "floralwhit": 21, "forestgreen": 21, "fuchsia": 21, "gainsboro": 21, "ghostwhit": 21, "gold": 21, "gold1": 21, "gold2": 21, "gold3": 21, "gold4": 21, "goldenrod": 21, "goldenrod1": 21, "goldenrod2": 21, "goldenrod3": 21, "goldenrod4": 21, "grai": [21, 29, 71, 72, 73, 83, 84, 85], "gray0": 21, "gray1": 21, "gray2": 21, "gray3": 21, "gray4": 21, "gray5": 21, "gray6": 21, "gray7": 21, "gray8": 21, "gray9": 21, "gray10": 21, "gray11": 21, "gray12": 21, "gray13": 21, "gray14": 21, "gray15": 21, "gray16": 21, "gray17": 21, "gray18": 21, "gray19": 21, "gray20": 21, "gray21": 21, "gray22": 21, "gray23": 21, "gray24": 21, "gray25": 21, "gray26": 21, "gray27": 21, "gray28": 21, "gray29": 21, "gray30": 21, "gray31": 21, "gray32": 21, "gray33": 21, "gray34": 21, "gray35": 21, "gray36": 21, "gray37": 21, "gray38": 21, "gray39": 21, "gray40": 21, "gray41": 21, "gray42": 21, "gray43": 21, "gray44": 21, "gray45": 21, "gray46": 21, "gray47": 21, "gray48": 21, "gray49": 21, "gray50": 21, "gray51": 21, "gray52": 21, "gray53": 21, "gray54": 21, "gray55": 21, "gray56": 21, "gray57": 21, "gray58": 21, "gray59": 21, "gray60": 21, "gray61": 21, "gray62": 21, "gray63": 21, "gray64": 21, "gray65": 21, "gray66": 21, "gray67": 21, "gray68": 21, "gray69": 21, "gray70": 21, "gray71": 21, "gray72": 21, "gray73": 21, "gray74": 21, "gray75": 21, "gray76": 21, "gray77": 21, "gray78": 21, "gray79": 21, "gray80": 21, "gray81": 21, "gray82": 21, "gray83": 21, "gray84": 21, "gray85": 21, "gray86": 21, "gray87": 21, "gray88": 21, "gray89": 21, "gray90": 21, "gray91": 21, "gray92": 21, "gray93": 21, "gray94": 21, "gray95": 21, "gray96": 21, "gray97": 21, "gray98": 21, "gray99": 21, "gray100": 21, "green1": 21, "green2": 21, "green3": 21, "green4": 21, "greenyellow": 21, "grei": [21, 58], "grey0": 21, "grey1": 21, "grey2": 21, "grey3": 21, "grey4": 21, "grey5": 21, "grey6": 21, "grey7": 21, "grey8": 21, "grey9": 21, "grey10": 21, "grey11": 21, "grey12": 21, "grey13": 21, "grey14": 21, "grey15": 21, "grey16": 21, "grey17": 21, "grey18": 21, "grey19": 21, "grey20": 21, "grey21": 21, "grey22": 21, "grey23": 21, "grey24": 21, "grey25": 21, "grey26": 21, "grey27": 21, "grey28": 21, "grey29": 21, "grey30": 21, "grey31": 21, "grey32": 21, "grey33": 21, "grey34": 21, "grey35": 21, "grey36": 21, "grey37": 21, "grey38": 21, "grey39": 21, "grey40": 21, "grey41": 21, "grey42": 21, "grey43": 21, "grey44": 21, "grey45": 21, "grey46": 21, "grey47": 21, "grey48": 21, "grey49": 21, "grey50": 21, "grey51": 21, "grey52": 21, "grey53": 21, "grey54": 21, "grey55": 21, "grey56": 21, "grey57": 21, "grey58": 21, "grey59": 21, "grey60": 21, "grey61": 21, "grey62": 21, "grey63": 21, "grey64": 21, "grey65": 21, "grey66": 21, "grey67": 21, "grey68": 21, "grey69": 21, "grey70": 21, "grey71": 21, "grey72": 21, "grey73": 21, "grey74": 21, "grey75": 21, "grey76": 21, "grey77": 21, "grey78": 21, "grey79": 21, "grey80": 21, "grey81": 21, "grey82": 21, "grey83": 21, "grey84": 21, "grey85": 21, "grey86": 21, "grey87": 21, "grey88": 21, "grey89": 21, "grey90": 21, "grey91": 21, "grey92": 21, "grey93": 21, "grey94": 21, "grey95": 21, "grey96": 21, "grey97": 21, "grey98": 21, "grey99": 21, "grey100": 21, "honeydew": 21, "honeydew1": 21, "honeydew2": 21, "honeydew3": 21, "honeydew4": 21, "hotpink": 21, "hotpink1": 21, "hotpink2": 21, "hotpink3": 21, "hotpink4": 21, "indianr": 21, "indianred1": 21, "indianred2": 21, "indianred3": 21, "indianred4": 21, "indigo": 21, "ivori": 21, "ivory1": 21, "ivory2": 21, "ivory3": 21, "ivory4": 21, "khaki": 21, "khaki1": 21, "khaki2": 21, "khaki3": 21, "khaki4": 21, "lavend": 21, "lavenderblush": 21, "lavenderblush1": 21, "lavenderblush2": 21, "lavenderblush3": 21, "lavenderblush4": 21, "lawngreen": 21, "lemonchiffon": 21, "lemonchiffon1": 21, "lemonchiffon2": 21, "lemonchiffon3": 21, "lemonchiffon4": 21, "lightblu": 21, "lightblue1": 21, "lightblue2": 21, "lightblue3": 21, "lightblue4": 21, "lightcor": 21, "lightcyan": 21, "lightcyan1": 21, "lightcyan2": 21, "lightcyan3": 21, "lightcyan4": 21, "lightgoldenrod": 21, "lightgoldenrod1": 21, "lightgoldenrod2": 21, "lightgoldenrod3": 21, "lightgoldenrod4": 21, "lightgoldenrodyellow": 21, "lightgrai": 21, "lightgreen": 21, "lightgrei": 21, "lightpink": 21, "lightpink1": 21, "lightpink2": 21, "lightpink3": 21, "lightpink4": 21, "lightsalmon": 21, "lightsalmon1": 21, "lightsalmon2": 21, "lightsalmon3": 21, "lightsalmon4": 21, "lightseagreen": 21, "lightskyblu": 21, "lightskyblue1": 21, "lightskyblue2": 21, "lightskyblue3": 21, "lightskyblue4": 21, "lightslateblu": 21, "lightslategrai": 21, "lightslategrei": 21, "lightsteelblu": 21, "lightsteelblue1": 21, "lightsteelblue2": 21, "lightsteelblue3": 21, "lightsteelblue4": 21, "lightyellow": 21, "lightyellow1": 21, "lightyellow2": 21, "lightyellow3": 21, "lightyellow4": 21, "lime": 21, "limegreen": 21, "linen": 21, "magenta": 21, "magenta1": 21, "magenta2": 21, "magenta3": 21, "magenta4": 21, "maroon": 21, "maroon1": 21, "maroon2": 21, "maroon3": 21, "maroon4": 21, "mediumaquamarin": 21, "mediumblu": 21, "mediumorchid": 21, "mediumorchid1": 21, "mediumorchid2": 21, "mediumorchid3": 21, "mediumorchid4": 21, "mediumpurpl": 21, "mediumpurple1": 21, "mediumpurple2": 21, "mediumpurple3": 21, "mediumpurple4": 21, "mediumseagreen": 21, "mediumslateblu": 21, "mediumspringgreen": 21, "mediumturquois": 21, "mediumvioletr": 21, "midnightblu": 21, "mintcream": 21, "mistyros": 21, "mistyrose1": 21, "mistyrose2": 21, "mistyrose3": 21, "mistyrose4": 21, "moccasin": 21, "navajowhit": 21, "navajowhite1": 21, "navajowhite2": 21, "navajowhite3": 21, "navajowhite4": 21, "navi": 21, "navyblu": 21, "oldlac": 21, "oliv": 21, "olivedrab": 21, "olivedrab1": 21, "olivedrab2": 21, "olivedrab3": 21, "olivedrab4": 21, "orang": 21, "orange1": 21, "orange2": 21, "orange3": 21, "orange4": 21, "orangered1": 21, "orangered2": 21, "orangered3": 21, "orangered4": 21, "orchid": 21, "orchid1": 21, "orchid2": 21, "orchid3": 21, "orchid4": 21, "palegoldenrod": 21, "palegreen": 21, "palegreen1": 21, "palegreen2": 21, "palegreen3": 21, "palegreen4": 21, "paleturquois": 21, "paleturquoise1": 21, "paleturquoise2": 21, "paleturquoise3": 21, "paleturquoise4": 21, "palevioletr": 21, "palevioletred1": 21, "palevioletred2": 21, "palevioletred3": 21, "palevioletred4": 21, "papayawhip": 21, "peachpuff": 21, "peachpuff1": 21, "peachpuff2": 21, "peachpuff3": 21, "peachpuff4": 21, "peru": 21, "pink": 21, "pink1": 21, "pink2": 21, "pink3": 21, "pink4": 21, "plum": 21, "plum1": 21, "plum2": 21, "plum3": 21, "plum4": 21, "powderblu": 21, "purpl": [15, 21, 88], "purple1": 21, "purple2": 21, "purple3": 21, "purple4": 21, "red1": 21, "red2": 21, "red3": 21, "red4": 21, "rosybrown": 21, "rosybrown1": 21, "rosybrown2": 21, "rosybrown3": 21, "rosybrown4": 21, "royalblu": 21, "royalblue1": 21, "royalblue2": 21, "royalblue3": 21, "royalblue4": 21, "saddlebrown": 21, "salmon": 21, "salmon1": 21, "salmon2": 21, "salmon3": 21, "salmon4": 21, "sandybrown": 21, "seagreen": 21, "seagreen1": 21, "seagreen2": 21, "seagreen3": 21, "seagreen4": 21, "seashel": 21, "seashell1": 21, "seashell2": 21, "seashell3": 21, "seashell4": 21, "sienna": 21, "sienna1": 21, "sienna2": 21, "sienna3": 21, "sienna4": 21, "silver": 21, "skyblu": 21, "skyblue1": 21, "skyblue2": 21, "skyblue3": 21, "skyblue4": 21, "slateblu": 21, "slateblue1": 21, "slateblue2": 21, "slateblue3": 21, "slateblue4": 21, "slategrai": 21, "slategray1": 21, "slategray2": 21, "slategray3": 21, "slategray4": 21, "slategrei": 21, "snow": 21, "snow1": 21, "snow2": 21, "snow3": 21, "snow4": 21, "springgreen": 21, "springgreen1": 21, "springgreen2": 21, "springgreen3": 21, "springgreen4": 21, "steelblu": 21, "steelblue1": 21, "steelblue2": 21, "steelblue3": 21, "steelblue4": 21, "tan": 21, "tan1": 21, "tan2": 21, "tan3": 21, "tan4": 21, "teal": 21, "thistl": 21, "thistle1": 21, "thistle2": 21, "thistle3": 21, "thistle4": 21, "tomato": 21, "tomato1": 21, "tomato2": 21, "tomato3": 21, "tomato4": 21, "turquois": 21, "turquoise1": 21, "turquoise2": 21, "turquoise3": 21, "turquoise4": 21, "violet": 21, "violetr": 21, "violetred1": 21, "violetred2": 21, "violetred3": 21, "violetred4": 21, "wheat": 21, "wheat1": 21, "wheat2": 21, "wheat3": 21, "wheat4": 21, "white": [21, 22, 24, 32, 35, 42, 57, 58, 68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85, 89], "whitesmok": 21, "yellow": 21, "yellow1": 21, "yellow2": 21, "yellow3": 21, "yellow4": 21, "yellowgreen": 21, "load_xbm": 22, "xbm": 22, "offer": [22, 23, 25, 47, 57], "over": [22, 23, 25, 29, 31, 33, 35, 36, 38, 40, 42, 44, 47, 50, 57, 60, 62, 63, 64, 65, 66, 88, 90], "hardwar": [22, 23, 24, 30, 32, 37, 38, 41, 51, 63, 64, 65, 88], "bitmap": [22, 29, 31, 56, 62], "variant": 22, "insid": [22, 24, 26, 31, 44, 45, 50, 51, 57, 58, 63, 65, 71, 72, 93], "decod": [22, 29, 33, 46, 63], "easili": [22, 44, 57, 58, 60, 62, 64, 65, 69, 74, 88, 91], "extern": [22, 25, 49, 52, 67], "set_cursor": [22, 39], "arrow": [22, 26, 33, 62, 70], "diamond": 22, "broken_x": 22, "tri_left": 22, "tri_right": 22, "few": [22, 28, 54, 62, 63, 64, 65, 74, 88, 90], "ll": [22, 36, 58, 61, 62, 63, 64, 65, 88, 89, 91, 92, 93], "look": [22, 24, 28, 36, 37, 44, 46, 51, 52, 56, 57, 58, 62, 63, 64, 65, 68, 69, 70, 72, 88, 89, 90, 91, 92, 93], "textmarker_str": 22, "thickarrow_str": 22, "sizer_x_str": 22, "sizer_y_str": 22, "sizer_xy_str": 22, "xor": 22, "mask": [22, 23, 26, 29, 42, 50, 51, 59, 78, 88], "fourth": [22, 71], "toggl": [22, 47], "simpli": [22, 25, 37, 41, 44, 50, 57, 58, 59, 62, 63, 65, 67, 88, 89, 91, 93], "24x24": 22, "xx": 22, "xxx": 22, "xxxx": 22, "xxxxx": 22, "cursorfil": 22, "cursor_arg": 22, "maskfil": 22, "subset": [22, 23, 88], "tradition": 22, "unix": [22, 23, 63], "sometim": [22, 23, 27, 44, 64, 88], "split": [22, 29, 58, 63, 64, 66, 75, 88], "readlin": 22, "hotspot": [22, 39], "xormask": [22, 39], "andmask": [22, 39], "extra": [22, 29, 38, 45, 50, 51, 58, 59, 62, 63, 64, 65, 70, 75, 78, 88, 93], "polish": [22, 63], "preset": [22, 38], "convei": 22, "across": [22, 23, 33, 58, 62, 65, 66, 75, 88, 91, 92, 93], "final": [22, 26, 28, 29, 42, 44, 51, 58, 61, 62, 71, 88, 89, 90, 93], "re": [22, 26, 29, 36, 44, 56, 59, 61, 62, 64, 71, 88, 89, 91, 92], "Be": [22, 23, 24, 28, 44, 65], "maco": 22, "wait": [22, 23, 25, 27, 32, 37, 39, 54, 58, 88], "waitarrow": 22, "show": [15, 22, 23, 26, 29, 33, 39, 41, 48, 53, 56, 57, 58, 59, 62, 65, 88, 92, 93], "sizenws": 22, "sizenesw": 22, "sizeal": 22, "And": [22, 32, 58, 62, 66, 68, 69, 71, 74, 75, 88, 89, 93], "wayland": [22, 23], "system_cursor_arrow": 22, "system_cursor_ibeam": 22, "beam": 22, "system_cursor_wait": 22, "system_cursor_crosshair": 22, "crosshair": 22, "system_cursor_waitarrow": 22, "system_cursor_sizenws": 22, "doubl": [9, 22, 23, 56, 58, 63, 65], "northwest": 22, "southeast": 22, "system_cursor_sizenesw": 22, "northeast": 22, "southwest": 22, "system_cursor_sizew": 22, "west": 22, "east": 22, "system_cursor_sizen": 22, "north": 22, "south": 22, "system_cursor_sizeal": 22, "system_cursor_no": 22, "slash": [22, 33], "circl": [15, 22, 24, 26, 30, 32, 50, 57], "crossbon": 22, "system_cursor_hand": 22, "addit": [22, 23, 24, 25, 26, 32, 33, 36, 37, 44, 46, 48, 50, 51, 88], "To": [22, 23, 25, 30, 32, 33, 35, 37, 38, 39, 40, 41, 42, 43, 47, 50, 54, 57, 58, 65, 91, 92], "bound": [22, 24, 29, 35, 50, 51], "bitmask": [22, 33, 35, 50, 51], "lastli": [22, 50, 58, 59, 62, 64, 65], "we": [22, 24, 26, 32, 51, 56, 57, 58, 60, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 88, 89, 90, 91, 92, 93], "sl": [22, 32], "sg": 22, "click": [15, 22, 24, 26, 32, 33, 39, 69, 72, 88, 89], "switch": [22, 23, 29, 44, 50, 59, 93], "setup": [15, 22, 26, 88], "pg": [22, 58, 66, 75], "600": [22, 59, 62, 78], "400": [22, 23, 24, 57], "set_capt": [22, 23, 24, 32, 58, 66, 68, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 84, 85, 89, 93], "bitmap_1": 22, "bitmap_2": 22, "surf": [22, 26, 29, 30, 42, 50, 51, 56], "could": [22, 25, 33, 36, 41, 45, 48, 49, 50, 52, 56, 57, 58, 61, 62, 64, 65, 89, 90, 91], "120": 22, "20": [22, 24, 28, 36, 45, 56, 65, 68, 71, 72, 73, 80, 83, 84, 85, 88], "cursor_index": 22, "clock": [15, 22, 24, 32, 39, 54, 58, 62, 66, 69, 70, 71, 72, 73, 75, 81, 82, 83, 84, 85, 88, 93], "tick": [15, 22, 24, 32, 39, 54, 58, 62, 66, 69, 71, 72, 73, 75, 81, 83, 84, 85, 88, 93], "75": [22, 24, 69, 81], "30": [22, 24, 29, 30, 32, 36, 38, 45, 53, 57, 63, 71, 88], "keydown": [22, 25, 33, 34, 57, 58, 62, 66, 70, 71, 72, 73, 75, 82, 83, 84, 85, 92, 93], "k_escap": [22, 33, 57, 58, 66, 75], "mousebuttondown": [22, 25, 27, 39, 58, 66, 75, 88], "get_surfac": [23, 58, 66, 75, 91, 92, 93], "full": [15, 23, 25, 26, 27, 28, 29, 31, 32, 38, 39, 40, 42, 50, 51, 56, 57, 58, 59, 62, 63, 64, 66, 70, 75, 88, 89, 90, 93], "get_driv": [23, 59, 78], "video": [15, 23, 25, 26, 32, 44, 48, 51, 57, 59, 64, 78], "get_wm_info": 23, "get_desktop_s": 23, "activ": [23, 38, 39, 40, 49, 51, 52, 55, 72, 74], "desktop": [23, 48, 59, 88], "list_mod": [23, 59, 78], "fullscreen": [23, 34, 48, 50, 59, 78], "mode_ok": [23, 59, 78], "pick": [23, 44, 56, 59, 62, 64, 78], "gl_get_attribut": 23, "opengl": [23, 26], "gl_set_attribut": 23, "get_act": 23, "iconifi": 23, "toggle_fullscreen": 23, "set_gamma": 23, "ramp": 23, "set_gamma_ramp": 23, "lookup": [23, 25, 50, 58, 65], "set_icon": [23, 48], "caption": [23, 68], "get_capt": 23, "set_palett": [23, 51], "palett": [23, 28, 31, 35, 51, 52, 56], "get_num_displai": 23, "get_window_s": 23, "get_allow_screensav": 23, "screensav": [23, 44, 69], "run": [15, 23, 25, 26, 31, 32, 38, 44, 53, 54, 56, 58, 59, 62, 63, 64, 65, 66, 67, 88, 89, 93], "set_allow_screensav": 23, "treat": [23, 29, 32, 52, 65], "immedi": [23, 25, 32, 37, 38, 58], "onscreen": 23, "ax": [23, 29, 32, 47, 91], "increas": [23, 29, 38, 45, 50, 68, 72, 74, 88], "toward": [23, 36, 61, 63, 88], "bottom": [23, 24, 26, 28, 29, 30, 31, 35, 45, 50, 63, 67, 68, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 93], "By": [23, 25, 29, 35, 39, 43, 44, 51, 53, 54, 56, 57, 61, 62, 64, 89, 90], "driven": [23, 50, 67], "framebuff": 23, "detect": [23, 26, 35, 36, 42, 44, 45, 50, 57], "appropri": [23, 25, 39, 58, 59, 64, 69, 92], "backward": [23, 25, 29, 38, 54], "compat": [23, 25, 29, 31, 38, 48, 50, 54, 67, 90], "precis": [23, 38, 51, 65, 88], "necessari": [9, 23, 25, 27, 29, 38, 51, 60, 61, 64, 68, 88, 89, 91, 92, 93], "old": [23, 39, 44, 50, 51, 54, 58, 62, 64, 74, 88, 92], "graphic": [23, 26, 56, 58, 59, 62, 63, 64, 65, 67, 68, 88], "card": [23, 38, 65], "crt": 23, "usual": [23, 25, 28, 29, 32, 38, 44, 50, 51, 58, 59, 60, 62, 63, 64, 65, 70, 75, 90], "queri": [23, 37, 46, 59, 78], "becom": [23, 25, 29, 38, 40, 49, 51, 52, 62, 63, 64, 65, 68, 73, 88], "sent": [23, 25, 32, 33, 38, 40], "shut": [23, 29, 32, 44, 69], "down": [23, 29, 32, 33, 39, 44, 47, 51, 57, 59, 62, 63, 65, 68, 69, 71, 72, 88, 92], "receiv": [23, 27, 32, 33, 39, 47, 88], "activeev": [23, 25], "gain": [23, 25, 29, 57, 88], "focu": [23, 25, 32, 33, 39, 44, 48, 57, 67], "videores": [23, 25], "videoexpos": [23, 25], "redrawn": [23, 41], "windowev": [23, 25], "introduc": [23, 25, 31, 43, 61, 62, 65, 91, 93], "doc": [23, 27, 48, 50, 51, 70, 82, 88], "environ": [23, 25, 28, 32, 37, 44, 46, 63, 67, 68, 90, 91], "stretch": [23, 26, 28, 29], "enabl": [23, 25, 28, 29, 33, 44, 47, 48, 63, 67], "distort": 23, "directori": [23, 28, 29, 53, 58, 62, 67, 68, 90], "prevent_display_stretch": 23, "disabl": [23, 25, 29, 33, 44, 47, 51, 54, 58, 66, 75], "microsoft": 23, "vista": 23, "newer": [23, 40], "permiss": 23, "sdl_videodriv": [23, 44], "windib": 23, "directx": [23, 37, 63], "x11": [23, 25, 37, 39, 44, 46, 48], "dga": 23, "fbcon": 23, "directfb": 23, "ggi": 23, "vgl": 23, "svgalib": 23, "aalib": 23, "emb": 23, "sdl_windowid": 23, "awar": [23, 25, 28, 44, 65, 88], "strang": [23, 63], "side": [23, 24, 42, 45, 47, 58, 61, 63, 91, 92], "embed": [23, 29], "harmless": 23, "repeat": [23, 33, 35, 38, 40, 44, 61, 62], "exit": [23, 24, 32, 37, 44, 48, 62, 63, 67, 68, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 89, 90, 93], "vsync": [23, 48], "implicitli": [23, 51], "drawn": [23, 24, 30, 32, 35, 50, 51, 58, 62, 63, 64, 68, 88, 89], "seen": [23, 61, 62, 65, 92, 93], "monitor": [23, 34, 59, 63, 68, 78], "10": [23, 24, 26, 32, 35, 36, 45, 54, 56, 58, 62, 63, 65, 66, 68, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 84, 85, 88, 89, 92, 93], "prior": 23, "fastest": [23, 51, 58, 63], "specif": [23, 25, 28, 29, 33, 35, 36, 38, 43, 46, 50, 51, 52, 57, 58, 59, 62, 64, 65, 68, 70, 71, 72, 88], "emul": [23, 28, 39, 59], "unavail": [23, 58], "slow": [23, 48, 51, 57, 59, 62, 65, 88, 89], "situat": [23, 36, 51, 58, 64, 65, 88], "closest": [23, 37, 38, 59], "still": [23, 25, 28, 31, 33, 36, 38, 39, 43, 45, 46, 47, 48, 51, 56, 57, 58, 61, 62, 63, 64, 65, 71, 72, 73, 88, 89, 92, 93], "4k": 23, "1080p": 23, "tini": [23, 88], "640x480": [23, 62, 65], "unplay": [23, 63], "realli": [23, 41, 56, 58, 59, 62, 63, 64, 65, 70, 89, 91, 92], "consid": [23, 24, 25, 29, 35, 36, 38, 40, 44, 45, 50, 51, 56, 88, 93], "combin": [23, 29, 33, 45, 51, 56, 63, 64, 88, 93], "bitwis": [23, 33, 35], "pipe": 23, "doublebuf": [23, 88], "hwsurfac": [23, 51, 65, 88], "obsolet": [23, 44, 51], "acceler": [23, 24, 30, 41, 48, 51, 56, 63, 69], "sizeabl": 23, "nofram": 23, "border": [23, 24, 30, 39, 45, 48], "shown": [23, 25, 33, 41, 57, 62, 88, 91], "hidden": [23, 25, 39], "sync": [23, 25], "driver": [23, 37, 44, 59], "usag": [23, 27, 37, 51, 53], "window_surfac": 23, "1920": [23, 59, 78], "1080": [23, 59, 78], "behaviour": [23, 39, 44, 46, 93], "screen_width": 23, "700": [23, 32], "screen_height": 23, "overridden": [23, 29, 35, 38, 45], "now": [23, 24, 26, 27, 28, 29, 32, 33, 35, 36, 37, 38, 43, 44, 46, 56, 57, 58, 61, 62, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 88, 89, 91, 93], "ensur": [23, 25, 27, 33, 38, 62, 63, 88, 89, 90], "subsequ": [23, 57], "older": [23, 25, 27, 32, 40, 44, 64, 88], "content": [23, 34, 41, 42, 46, 58, 59, 68, 70], "retrac": 23, "swap": [23, 31, 42, 45], "gl": 23, "rectangle_list": 23, "optim": [23, 26, 28, 51, 56, 64, 65, 88], "part": [23, 24, 25, 29, 30, 35, 51, 53, 56, 62, 63, 64, 65, 68, 69, 70, 72, 75, 90], "wherea": [23, 45, 91], "whole": [23, 24, 37, 44, 62, 88, 91], "partial": [23, 24, 37, 51, 88], "skip": [23, 35, 38, 58], "capabl": [23, 59, 63, 90, 91], "common": [23, 28, 29, 47, 50, 56, 60, 61, 62, 63, 88], "videoinfo": [23, 59, 78], "verifi": 23, "satisfi": 23, "vidinfo": [23, 59, 78], "hw": [23, 59, 78], "wm": [23, 59, 78], "video_mem": [23, 59, 78], "megabyt": 23, "unknown": [23, 25, 28, 32], "bitsiz": [23, 35, 59, 78], "pack": [23, 51, 52, 59], "shift": [23, 26, 33, 35, 42, 44, 51, 59, 65, 78], "blit_hw": [23, 59, 78], "blit_hw_cc": [23, 59, 78], "colorkei": [23, 26, 28, 29, 31, 43, 51, 52, 56, 58, 63, 65, 66, 75], "blit_hw_a": [23, 59, 78], "blit_sw": [23, 59, 78], "blit_sw_cc": [23, 59, 78], "blit_sw_a": [23, 59, 78], "current_h": [23, 59, 78], "current_w": [23, 59, 78], "arbitrarili": 23, "7": [23, 32, 33, 43, 44, 63, 65, 68, 69, 70, 71, 80, 81, 82, 83, 87], "virtual": [23, 26, 37, 39, 45], "mirror": [23, 58], "maximum": [23, 28, 29], "whenev": [23, 38, 39, 44, 65], "sort": [23, 25, 26, 27, 50, 58, 59, 62, 64, 88, 93], "biggest": [23, 59], "smallest": [23, 51, 59], "add": [23, 29, 48, 50, 57, 58, 61, 62, 63, 64, 65, 68, 69, 70, 76, 93], "suitabl": [23, 28, 29, 46, 63, 68, 90], "prefer": [23, 25, 30, 31, 33], "develop": [23, 28, 33, 36, 39, 44, 45, 48, 51, 53, 56, 63, 67, 88, 90], "strongli": [23, 50], "menu": [23, 33, 61], "ask": [23, 28, 29, 57, 58, 59, 62, 63, 88], "hint": [23, 88], "better": [23, 28, 30, 37, 39, 40, 51, 56, 62, 63, 64, 65, 71, 88, 89], "idea": [23, 51, 57, 59, 61, 63, 65, 70, 71, 72, 73, 76, 78, 90, 91], "minimum": [23, 24, 28, 30, 31, 35, 51], "fail": [23, 25, 27, 29, 44, 53, 58, 60, 88], "stencil": 23, "larger": [23, 38, 51, 56, 58, 65, 67, 88], "gl_alpha_s": 23, "gl_depth_siz": 23, "gl_stencil_s": 23, "gl_accum_red_s": 23, "gl_accum_green_s": 23, "gl_accum_blue_s": 23, "gl_accum_alpha_s": 23, "gl_multisamplebuff": 23, "gl_multisamplesampl": 23, "gl_stereo": 23, "multisampl": 23, "amount": [23, 25, 28, 29, 32, 39, 54, 55, 56, 58, 63], "stereo": [23, 38, 49], "3d": [23, 26, 43, 52, 63, 65, 67], "gl_buffer_s": 23, "gl_accelerated_visu": 23, "gl_context_major_vers": 23, "gl_context_minor_vers": 23, "gl_context_flag": 23, "gl_context_profile_mask": 23, "gl_share_with_current_context": 23, "gl_context_release_behavior": 23, "gl_framebuffer_srgb_cap": 23, "profil": [23, 25, 88], "gl_context_profile_cor": 23, "gl_context_profile_compat": 23, "gl_context_profile_": 23, "forc": [23, 26, 38, 44, 63], "state": [23, 25, 26, 29, 31, 32, 33, 37, 38, 39, 46, 47, 48, 50, 51, 58, 64, 66, 67, 75, 88, 92, 93], "minim": [23, 25, 48, 64], "icon": [23, 48], "reason": [23, 27, 28, 29, 38, 39, 51, 56, 57, 61, 62, 64, 88, 91], "notabl": [23, 40, 91], "unrel": 23, "get_focus": [23, 33, 39], "Not": [23, 25, 41, 45, 51, 60, 63, 64, 65, 69, 70], "addition": [23, 24, 47, 62], "windowevent_minim": 23, "great": [23, 57, 63, 65, 88], "cocoa": 23, "osx": [23, 63], "issu": [23, 62, 63], "2380": 23, "tabl": [23, 43], "darken": 23, "brighten": 23, "explicit": [23, 39, 43], "256": [23, 37, 51], "0xffff": 23, "runtim": [23, 38, 54, 56, 63], "around": [15, 23, 24, 26, 32, 36, 39, 42, 45, 48, 54, 57, 58, 59, 62, 63, 65, 88, 89, 90, 93], "32x32": 23, "transpar": [23, 24, 26, 28, 29, 31, 35, 43, 48, 51, 52, 56, 58, 62, 63, 88, 90], "titl": [23, 48, 58, 63, 68], "icontitl": 23, "shorter": [23, 58, 65], "restor": [23, 25, 48], "triplet": [23, 24, 30, 58], "get_sdl_vers": [23, 44], "whilst": 23, "app": [23, 26, 44, 57], "caveat": 23, "disallow": 23, "influenc": 23, "sdl_hint_video_allow_screensav": 23, "subject": [23, 44], "absent": 23, "silent": [23, 60], "lack": 23, "feedback": [23, 28, 33, 36, 45, 51, 56], "polygon": [24, 30], "arc": [24, 30], "ellipt": [24, 30], "straight": [24, 30, 51, 62, 63, 65, 90], "segment": [24, 30], "aalin": 24, "antialias": [24, 28, 29, 30, 56, 58], "stroke": 24, "thick": [24, 28], "edg": [24, 28, 39, 45, 56, 93], "solid": [24, 28, 30, 50, 51, 52, 56, 65, 88], "clip": [24, 26, 45, 50, 51, 62], "constrain": [24, 39, 70], "box": [24, 29, 30, 33, 57, 64, 92], "enclos": [24, 50, 68], "quadruplet": [24, 30], "sequenti": 24, "sped": 24, "unlock": [24, 51], "border_radiu": 24, "border_top_left_radiu": 24, "border_top_right_radiu": 24, "border_bottom_left_radiu": 24, "border_bottom_right_radiu": 24, "confus": [24, 62, 68, 88], "correctli": [24, 36, 37, 38, 56, 57, 58, 62, 65], "rather": [24, 28, 29, 30, 33, 44, 50, 54, 56, 69, 89, 91], "had": [24, 51, 63, 64, 88], "half": [24, 26, 36, 50, 63], "spill": 24, "outsid": [24, 28, 30, 33, 35, 36, 39, 45, 51, 56, 58, 62, 63, 68], "corner": [24, 29, 30, 35, 39, 42, 44, 50, 51, 56, 57, 58, 62, 88, 93], "min": [24, 36, 57], "radii": [24, 30], "sum": [24, 74], "just": [24, 26, 28, 29, 30, 32, 35, 38, 40, 41, 50, 51, 52, 53, 56, 57, 58, 59, 60, 63, 64, 65, 67, 68, 69, 70, 71, 73, 88, 89, 91, 92, 93], "dev8": 24, "radiu": [24, 30, 50], "math": [24, 30, 35, 36, 90, 91, 93], "vector2": [15, 24, 30, 35, 36, 45], "vector": [24, 30, 35, 61, 93], "x1": [24, 30, 45], "y1": [24, 30, 45], "x2": [24, 30, 45], "y2": [24, 30, 45], "x3": [24, 30], "y3": [24, 30], "grow": [24, 45, 88], "boundari": [24, 29], "truncat": [24, 30, 38, 45, 65], "typeerror": [24, 28, 43, 45, 50, 51], "aapolygon": [24, 30], "center": [24, 26, 30, 32, 35, 44, 45, 48, 50, 51, 57, 66, 68, 69, 70, 71, 72, 73, 75, 80, 81, 82, 83, 84, 85, 89], "draw_top_right": 24, "draw_top_left": 24, "draw_bottom_left": 24, "draw_bottom_right": 24, "measur": [24, 37, 88, 91], "less": [24, 27, 28, 33, 35, 37, 38, 54, 55, 56, 67, 89], "inward": 24, "draw_circle_part": 24, "param": 24, "algorithm": [24, 35, 44, 56, 67, 70, 88], "improv": [24, 28, 40, 58, 73, 88], "quadrant": 24, "start_angl": [24, 30], "stop_angl": [24, 30], "angl": [24, 29, 30, 35, 36, 48, 56, 57, 91, 93], "radian": [24, 30, 36, 91, 93], "counterclockwis": [24, 29, 36, 56], "tau": 24, "pi": [24, 93], "start_po": 24, "end_po": 24, "endcap": [24, 30], "squar": [24, 32, 36, 72], "odd": [24, 65, 93], "As": [24, 29, 35, 38, 39, 44, 51, 52, 56, 57, 58, 64, 65, 67, 68, 88, 89, 90, 92, 93], "slope": 24, "ish": 24, "miter": 24, "joint": 24, "sharp": 24, "undesir": 24, "last": [15, 24, 29, 30, 32, 50, 51, 52, 54, 58, 62, 63, 64, 65, 68, 88], "adjac": [24, 30], "connect": [24, 26, 30, 32, 35, 47, 61, 62, 74, 90], "endpoint": [24, 30, 45], "nearest": [24, 38], "steep": 24, "along": [24, 25, 26, 29, 37, 45, 53, 62, 63, 64, 65, 66, 74, 91], "axi": [24, 25, 29, 36, 39, 42, 47, 48, 49, 52, 56, 89, 91], "calcul": [24, 29, 35, 36, 40, 42, 50, 68, 69, 72, 73, 91, 92], "past": [24, 36, 46, 58, 63, 88], "coverag": 24, "decim": 24, "70": 24, "6": [24, 26, 32, 33, 36, 38, 44, 50, 61, 62, 65, 68, 69, 70, 71, 73, 80, 81, 82, 83, 85, 87], "56": 24, "42": 24, "18": [24, 25, 36, 58, 63, 66, 68, 75, 80], "whose": [24, 55], "80": [24, 50, 58, 66, 75], "regard": [24, 68], "said": [24, 61, 68, 70, 74, 88, 89], "therefor": [24, 30, 35, 36, 50, 62, 64, 88, 91], "complet": [24, 33, 38, 40, 45, 50, 51, 52, 63, 64, 88, 93], "shade": 24, "overwritten": [24, 32, 47, 51], "300": [15, 24, 45], "loop": [15, 24, 25, 32, 38, 40, 54, 57, 61, 62, 63, 64, 66, 68, 76, 88, 90, 91, 92, 93], "button": [24, 25, 26, 27, 32, 33, 39, 47, 58, 61, 62, 69, 73, 84, 88, 89, 92], "done": [24, 28, 29, 32, 40, 58, 62, 63, 65, 68, 70, 71, 88, 91], "max": [24, 32, 35, 36, 57, 71], "leav": [24, 28, 29, 33, 36, 45, 51, 56, 65], "cpu": [24, 54, 67, 79, 88], "background": [24, 25, 26, 28, 29, 38, 44, 50, 57, 61, 64, 66, 75, 88, 89, 91, 93], "wide": [24, 28, 29, 35, 44, 62, 63], "medium": [24, 32], "sea": [24, 75, 76, 77], "179": 24, "113": 24, "becaus": [24, 27, 29, 33, 36, 37, 45, 51, 58, 61, 64, 65, 67, 68, 69, 70, 72, 73, 88, 89, 90, 91, 92, 93], "90": [24, 35, 36, 38, 56, 57, 58, 66, 75, 93], "200": [24, 45, 63], "220": [24, 67, 68, 69, 70, 79, 80, 81, 82], "outlin": [24, 29, 35, 57], "150": [24, 45, 89], "115": 24, "210": 24, "15": [24, 28, 32, 36, 45, 51, 58, 66, 68, 69, 75, 80, 81], "135": 24, "260": 24, "225": 24, "triangl": [24, 26, 30, 32], "command": [24, 25, 26, 32, 53, 65, 67, 68, 69, 70], "125": 24, "250": [24, 89], "ahead": [24, 32], "ve": [15, 24, 32, 58, 61, 62, 63, 64, 65, 88, 89, 91, 92, 93], "idl": [24, 25, 27, 32, 38, 40], "friendli": [24, 68], "pump": [25, 27, 32, 92, 93], "handler": [25, 27], "poll": [15, 25, 27, 37, 88], "peek": 25, "event_nam": 25, "set_block": [25, 88], "set_allow": 25, "get_block": 25, "set_grab": [25, 33, 39], "get_grab": 25, "post": [25, 27, 38, 47, 54], "custom_typ": 25, "messag": [25, 27, 37, 44, 53, 58, 88], "heavili": 25, "upper": [25, 29, 32, 51, 57], "quietli": 25, "drop": [25, 29, 38], "prevent": [25, 88, 93], "lost": [25, 40, 46, 62], "especi": [25, 29, 44, 64, 65, 75, 78, 90], "signal": [25, 40, 89], "decid": [25, 27, 35, 58, 61, 64, 68, 88], "speed": [25, 26, 29, 44, 54, 62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 88, 89, 91, 92, 93], "queu": [25, 38, 40], "forego": 25, "gamepad": [25, 47], "trackbal": [25, 47], "rememb": [25, 39, 50, 51, 59, 61, 63, 64, 65, 68, 73, 88, 90, 91], "commun": [25, 48, 88], "everyth": [25, 43, 44, 62, 63, 64, 65, 66, 67, 68, 73, 88, 89, 93], "send": [25, 37, 38, 40, 93], "varieti": [25, 63, 70, 88], "grab": [25, 33, 39, 48, 62, 64, 93], "stack": 25, "identifi": [25, 28, 32, 33, 44, 46, 57, 88], "__dict__": 25, "member": [25, 50, 59, 64, 68, 88], "noevent": [25, 27, 38, 40, 88], "numev": [25, 38], "userev": [25, 38], "recommend": [25, 27, 28, 31, 50, 51, 62, 88], "inequ": 25, "ident": [25, 42, 51, 72], "debug": [25, 56, 88, 92], "experi": [25, 63, 64, 70], "print": [25, 28, 32, 33, 36, 39, 44, 45, 46, 57, 58, 59, 62, 66, 68, 70, 71, 72, 73, 75, 78, 80, 88, 90, 93], "quick": [25, 26, 32, 51, 53, 60, 64, 65, 92], "mod": [25, 33, 34, 40, 67], "scancod": [25, 33], "keyup": [25, 33, 34, 70, 92, 93], "mousemot": [25, 39], "po": [25, 27, 35, 40, 50, 58, 62, 66, 72, 73, 75, 84, 85], "rel": [25, 32, 37, 39, 40, 41, 48, 50, 61, 90], "touch": [25, 32, 88], "mousebuttonup": [25, 39, 58, 66, 72, 73, 75, 84, 85, 88], "joyaxismot": [25, 32], "joi": 25, "instance_id": [25, 32], "joyballmot": [25, 32], "ball": [25, 32, 61, 63, 67, 68, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85, 89, 90, 92], "joyhatmot": [25, 32], "hat": [25, 32, 47], "joybuttonup": [25, 32], "joybuttondown": [25, 32], "legaci": [25, 27, 33, 67, 79], "pygame2": 25, "sdl2": [25, 38, 39, 44, 47, 51, 55], "audiodevicead": 25, "iscaptur": 25, "audiodeviceremov": 25, "fingermot": 25, "touch_id": 25, "finger_id": 25, "dx": [25, 35, 51, 91, 93], "dy": [25, 35, 51, 91, 93], "fingerdown": 25, "fingerup": 25, "mousewheel": [25, 39], "precise_x": 25, "precise_i": 25, "multigestur": 25, "pinch": 25, "rotat": [25, 26, 29, 36, 48, 50, 56, 58, 63, 66, 75], "num_fing": 25, "textedit": [25, 33], "text": [25, 26, 28, 29, 32, 33, 46, 66, 68, 69, 70, 71, 75, 88, 89, 91], "textinput": [25, 33], "fix": [25, 29, 51, 56, 63, 65, 68, 69, 71, 88, 93], "scroll": [25, 26, 39, 51, 62, 63, 64, 88], "real": [25, 28, 29, 37, 38, 51, 57, 59, 62, 64, 70, 78, 88], "ignor": [25, 29, 35, 37, 38, 40, 51, 53, 88], "dropfil": 25, "droptext": 25, "midiin": [25, 37], "midiout": [25, 37], "reserv": [25, 37, 38], "midi": [25, 26], "hot": 25, "plug": [25, 32], "dropbegin": 25, "dropcomplet": 25, "controllerdevicead": [25, 47], "device_index": [25, 32], "joydevicead": [25, 32], "controllerdeviceremov": [25, 47], "joydeviceremov": [25, 32], "controllerdeviceremap": [25, 47], "keymapchang": 25, "clipboardupd": 25, "render_targets_reset": 25, "render_device_reset": 25, "localechang": 25, "14": [25, 32, 47, 68, 80], "keymap": 25, "languag": [25, 26, 28, 33, 62, 63, 88], "kind": [25, 37, 43, 51, 61, 65, 67, 88], "trigger": [25, 32, 33, 39, 40, 47, 68, 70], "short": [25, 63, 65, 88], "windowshown": 25, "becam": 25, "windowhidden": 25, "windowexpos": 25, "got": [15, 25, 40, 57, 62, 64, 88], "windowmov": 25, "windowres": 25, "windowsizechang": 25, "windowminim": 25, "windowmaxim": 25, "maxim": [25, 48], "windowrestor": 25, "windowent": 25, "enter": [25, 28, 33, 39, 48, 58, 67], "windowleav": 25, "windowfocusgain": 25, "windowfocuslost": 25, "windowclos": 25, "windowtakefocu": 25, "windowhittest": 25, "hit": [25, 26, 58, 61, 88, 89, 91, 92], "windowiccprofchang": 25, "icc": 25, "windowdisplaychang": 25, "display_index": [25, 48], "android": [25, 33], "app_termin": 25, "app_lowmemori": 25, "low": [25, 32, 63, 67], "try": [25, 27, 29, 44, 51, 58, 61, 62, 63, 64, 65, 67, 88, 89, 90, 93], "app_willenterbackground": 25, "app_didenterbackground": 25, "app_willenterforeground": 25, "foreground": [25, 29], "app_didenterforeground": 25, "action": [25, 63, 65, 92], "dealt": [25, 27, 92], "repaint": [25, 27, 50], "respond": [25, 27, 62, 88], "too": [25, 27, 29, 36, 42, 45, 50, 51, 53, 58, 62, 65, 67, 68, 69, 73, 88, 89], "eventlist": [25, 26], "interest": [25, 46, 63, 67, 74, 88], "timeout": 25, "millisecond": [25, 33, 37, 38, 40, 50, 54, 63], "sleep": [25, 54], "dev13": 25, "capword": 25, "style": [25, 26, 29, 32, 42, 63, 76, 90], "typelist": 25, "boolean": [25, 28, 32, 33, 39, 56, 62, 64], "dev3": [25, 54], "delet": [25, 33, 62, 64, 88], "alia": [25, 31, 46, 50], "beforehand": 25, "latter": 25, "predefin": [25, 46], "synonym": 25, "mutabl": 25, "alien": [26, 64], "star": 26, "starfield": 26, "moveit": [26, 62], "fonti": 26, "freetype_misc": [26, 29], "vgrade": [26, 65], "gradient": [26, 35, 65], "sound_array_demo": 26, "liquid": [26, 62], "glcube": 26, "cube": 26, "scrap_clipboard": [26, 46], "bounc": [26, 36, 56, 63, 93], "collis": [26, 35, 36, 45, 50, 57, 67, 93], "testsprit": 26, "lot": [26, 32, 51, 54, 56, 58, 59, 61, 62, 63, 64, 65, 67, 73, 88, 89, 91, 93], "headless_no_windows_need": 26, "smoothscal": [26, 56], "blend_fil": 26, "blit_blend": 26, "scaletest": 26, "magnifi": 26, "playmu": 26, "audio": [26, 37, 38, 44, 46, 49, 63], "rundown": 26, "public": [26, 90, 93], "domain": 26, "feel": [26, 62, 64, 88], "stand": 26, "alon": [26, 88], "easiest": [26, 47, 62, 71, 89], "eg": [26, 29, 31], "someimag": 26, "resourc": [26, 38, 40, 44, 59, 61, 66, 76, 88, 91], "subdirectori": [26, 58], "__file__": [26, 58, 66, 75], "usr": [26, 28, 66, 89, 90, 91], "lib": 26, "python2": 26, "site": 26, "locat": [26, 34, 35, 39, 41, 58, 68, 69, 70, 71, 72, 73, 88], "python26": 26, "framework": [26, 63, 88], "lookout": 26, "probabl": [26, 36, 62, 64, 68, 78, 88, 89], "But": [26, 39, 43, 51, 58, 62, 64, 65, 68, 69, 71, 72, 74, 89, 91, 92], "came": [26, 31], "earlier": [26, 40, 43, 62], "evolv": 26, "resembl": [26, 43, 52], "fun": [26, 57, 62, 63, 65, 88], "p": [26, 31, 32, 33, 43, 62], "my": [26, 61, 62, 63, 65, 88, 90, 93], "score": [26, 50, 61, 70, 76, 93], "117": 26, "goodluck": 26, "perspect": [26, 63], "leftclick": 26, "deriv": [26, 44, 50, 58, 64, 88], "tutori": [26, 61, 63, 66, 73, 74, 76, 78, 88, 89, 93], "popular": [26, 32, 66], "web": [26, 66], "comment": [26, 61, 64, 66, 91, 93], "explan": [26, 36, 60, 64, 66, 68, 70, 88], "scant": 26, "easi": [15, 26, 48, 59, 60, 61, 62, 63, 64, 65, 70, 88, 92, 93], "fortun": [26, 62, 65], "needn": [26, 61, 93], "wrestl": 26, "pile": 26, "super": [26, 35, 48, 64], "showcas": [26, 88], "semi": [26, 88], "pixelcopi": [26, 42, 43, 52], "report": [26, 32, 44, 56, 88], "prepar": [26, 40, 66], "worri": [26, 48, 50, 64, 65, 74, 88], "sloppi": 26, "handi": [26, 61, 88, 90, 91, 92, 93], "tool": [26, 64, 67, 88, 91], "learn": [26, 51, 59, 62, 63, 65, 67, 68, 69, 70, 73, 74, 88], "At": [26, 31, 63, 64, 65], "qualiti": [26, 44, 58, 63], "ui": [26, 48], "statu": [26, 32, 37, 70], "crude": [26, 58, 62], "arraytyp": [26, 49, 52], "demo": [26, 58, 65], "file_path": [26, 28], "extrem": [26, 58, 62, 65], "shell": 26, "fade": [26, 38, 40, 65], "hardcod": 26, "echo": 26, "delai": [26, 33, 37, 54, 69, 88], "recreat": [26, 50, 53], "blitzbas": 26, "nonetheless": 26, "colormap": [26, 43, 52], "pyopengl": [26, 31, 63], "spin": [26, 58, 66, 75, 92, 93], "multicolor": 26, "arg": [26, 50, 53], "update_rect": 26, "use_stat": 26, "use_fastrendergroup": 26, "screen_dim": 26, "use_alpha": 26, "renderupd": [26, 50, 64, 88], "group": [26, 35, 50, 58, 63, 75, 88, 90], "fastrendergroup": 26, "fin": [26, 76], "fout": 26, "rescal": 26, "headless": 26, "server": [26, 39], "thumbnail": 26, "mmx": [26, 56], "sse": [26, 56], "inputimag": 26, "outputimag": 26, "new_width": 26, "new_height": 26, "outpng": 26, "blend_xxx": 26, "fake": [26, 28, 53], "clamp": [26, 36, 45], "press": [26, 32, 33, 39, 47, 57, 58, 62, 70, 71, 88], "somewhat": [26, 64, 88], "crossbar": 26, "imagefil": 26, "convert_alpha": [26, 31, 51, 90, 93], "run_speed_test": 26, "scaler": 26, "device_id": [26, 37], "logger": 26, "rudimentari": 26, "widget": 26, "machin": [26, 56, 64, 65], "With": [26, 31, 36, 37, 51, 62, 63, 65, 89, 91, 92], "cord": 26, "consol": [26, 44, 53, 67], "image_fil": 26, "scrollabl": 26, "zoom": 26, "factor": [26, 29, 56, 65], "eight": 26, "protect": [26, 58], "margin": [26, 36, 68, 71, 72, 73, 84, 85], "esc": 26, "player": [26, 50, 58, 61, 62, 64, 68, 70, 73, 74, 76, 88, 92, 93], "rewound": 26, "fastev": 27, "suit": [27, 51, 59], "serv": [27, 63, 88], "multithread": 27, "highli": [27, 51, 88], "discourag": 27, "favour": 27, "care": [9, 27, 38, 58, 65, 72, 89], "dead": 27, "append": [27, 57, 62, 64, 69, 73, 85, 88], "get_default_font": [28, 29], "get_sdl_ttf_vers": 28, "sdl_ttf": [28, 29, 44], "get_font": 28, "match_font": 28, "sysfont": [28, 29], "creation": [28, 29, 32, 47, 49, 50, 52, 62], "freesansbold": 28, "u0001": 28, "emoji": 28, "u00000001": 28, "u0010ffff": 28, "restrict": [28, 51], "ftfont": [28, 29], "problem": [28, 43, 44, 58, 61, 69, 88, 90], "solv": [28, 38, 61, 67, 88], "bundl": [28, 29], "archiv": [28, 29, 88], "link": [28, 29, 31, 38, 44], "underli": [28, 29, 32, 37, 44, 88], "ttf": [28, 29, 68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85], "lowercas": 28, "punctuat": 28, "global": [28, 53, 60, 68, 77, 90, 93], "bold": [28, 29], "ital": [28, 29], "famili": 28, "iter": [28, 29, 33, 42, 45, 50, 64, 88, 89, 92, 93], "comma": [28, 29, 33, 37, 65], "bitstreamverasan": 28, "bitstream": [28, 29], "vera": [28, 29], "fall": [28, 29, 50], "pathlib": [28, 29, 31, 38], "underlin": [28, 29, 40], "strikethrough": 28, "set_underlin": 28, "get_underlin": 28, "set_strikethrough": 28, "get_strikethrough": 28, "set_bold": 28, "get_bold": 28, "set_ital": 28, "metric": [28, 29], "get_ital": 28, "get_lines": 28, "get_height": [15, 28, 51], "get_asc": 28, "ascent": [28, 29], "get_desc": 28, "descent": [28, 29], "mainli": [28, 51, 62, 64, 65], "glyph": [28, 29], "mix": [28, 38, 51, 63, 65, 88], "skew": 28, "regardless": [28, 44], "antialia": 28, "newlin": 28, "codepoint": 28, "unicodeerror": 28, "latin1": [28, 29], "smooth": [28, 58], "blank": [28, 57, 62, 88, 89], "maintain": [28, 44, 50, 61, 62, 88], "n": [28, 33, 38, 65], "yourself": [28, 50, 58, 63, 65, 90, 91], "ucs4": [28, 29], "hasattr": 28, "word": [28, 29, 46, 54, 62, 64, 92], "kern": [28, 29], "ae": 28, "bear": [28, 29, 39], "plu": [28, 29, 33, 37, 44, 64], "minx": 28, "maxx": 28, "mini": 28, "maxi": 28, "unrecogn": [28, 31], "averag": [28, 29, 53, 54, 56, 57, 65, 88], "baselin": [28, 29], "get_error": [29, 44], "latest": [29, 70], "get_vers": 29, "was_init": 29, "get_cache_s": 29, "get_default_resolut": 29, "dot": [29, 36], "inch": 29, "set_default_resolut": 29, "yet": [29, 48, 65, 88, 92], "type1": 29, "cff": 29, "opentyp": 29, "sfnt": 29, "pcf": 29, "fnt": 29, "bdf": 29, "pfr": 29, "type42": 29, "undefin": [29, 65], "notdef": 29, "constructor": [29, 32, 50, 58, 64, 75], "render_to": 29, "strong": 29, "strength": [29, 32, 47], "underline_adjust": 29, "occur": [29, 33, 37, 38, 42, 62, 68], "freetype2": 29, "henc": 29, "cache_s": 29, "72": 29, "cach": 29, "exceedingli": 29, "tune": [29, 64], "unpredict": 29, "hasn": 29, "dpi": 29, "omit": [29, 37, 42, 53], "reset": [29, 32, 37, 38, 40, 50, 58, 93], "proper": [29, 33, 38, 39, 64, 65], "get_rect": [29, 35, 48, 50, 51, 56, 58, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 81, 82, 83, 84, 85, 89, 90, 91, 92, 93], "get_metr": 29, "unscal": 29, "unit": [29, 44, 51], "ascend": 29, "descend": 29, "get_sized_ascend": 29, "get_sized_descend": 29, "get_sized_height": 29, "get_sized_glyph_height": 29, "render_raw": 29, "render_raw_to": 29, "obliqu": 29, "fixed_width": 29, "fixed_s": 29, "scalabl": 29, "use_bitmap_strik": 29, "degre": [29, 30, 35, 36, 52, 56, 58, 91, 93], "fgcolor": 29, "bgcolor": 29, "pad": [29, 32, 56], "ppem": 29, "nomin": 29, "against": [29, 31, 44, 45, 56, 57, 64], "style_default": 29, "relev": [29, 88], "align": [29, 35, 36, 45], "piec": [29, 88], "min_x": 29, "max_x": 29, "min_i": 29, "max_i": 29, "horizontal_advance_x": 29, "horizontal_advance_i": 29, "grid": 29, "fraction": 29, "monochrom": 29, "dest": [29, 35, 48, 51, 56, 65], "item": [29, 30, 42, 43, 45, 50, 62, 64], "That": [15, 29, 56, 58, 62, 63, 64, 67, 68, 69, 70, 71, 73, 74, 88], "target": [29, 36, 42, 43, 45, 48, 50, 58, 64, 66, 75], "primarili": [29, 44, 48], "aid": 29, "def": [29, 32, 35, 39, 45, 50, 56, 57, 58, 62, 64, 66, 71, 72, 73, 75, 83, 84, 85, 89, 90, 91, 92, 93], "word_wrap": 29, "line_spac": 29, "recalcul": 29, "invert": [29, 35, 36, 42], "pattern": [29, 40], "wise": [29, 65], "style_norm": 29, "style_underlin": 29, "style_obliqu": 29, "style_strong": 29, "style_wid": 29, "modifi": [29, 30, 33, 34, 37, 39, 45, 48, 49, 50, 51, 64, 65, 89], "obtain": [29, 37, 51], "attributeerror": [29, 64], "inact": [29, 38], "__new__": [29, 45], "runtimeerror": [29, 44], "never": [29, 32, 36, 38, 39, 40, 51, 54, 57, 63, 65, 88], "produc": [29, 51, 88], "similar": [29, 31, 32, 42, 49, 50, 51, 54, 58, 62, 64, 65, 75, 89, 90, 92, 93], "enlarg": 29, "untransform": 29, "08333": 29, "02778": 29, "36": [29, 89], "turn": [29, 37, 56, 58, 62, 64, 66, 75, 88], "strike": 29, "overlin": 29, "tango": 29, "mimic": 29, "courier": 29, "san": 29, "mono": [29, 38, 49, 75], "andal": 29, "reduc": [29, 38, 51, 64, 92], "laid": [29, 61], "kanji": 29, "script": [28, 29, 60, 63, 66], "orient": [29, 35, 62], "ones": [29, 40, 51, 60, 64, 91, 92], "unspecifi": 29, "correspond": [29, 33, 35, 37, 42, 51, 53, 68, 88, 93], "clockwis": [29, 30, 36, 56, 91], "359": 29, "390": 29, "45": [29, 72, 73, 84, 85], "315": 29, "720": [15, 29, 88], "unset": [29, 35, 51, 93], "oppos": 29, "inflat": [29, 45, 58, 66, 75, 88, 93], "enough": [29, 50, 57, 58, 60, 62, 63, 64, 65, 67, 71, 88], "0x10000": 29, "0x10ffff": 29, "0xd800": 29, "0xdfff": 29, "malform": 29, "unicodeencodeerror": [29, 44], "hline": 30, "vline": 30, "aacircl": 30, "filled_circl": 30, "aaellips": 30, "filled_ellips": 30, "pie": 30, "trigon": 30, "aatrigon": 30, "filled_trigon": 30, "filled_polygon": 30, "textured_polygon": 30, "textur": [30, 48], "bezier": 30, "curv": 30, "strictli": [30, 89], "filled_": 30, "col": 30, "primit": 30, "sdl_gfx": 30, "nonetyp": [30, 35, 50], "unfil": [30, 35], "lie": [30, 45], "fact": [30, 64, 88], "rx": 30, "ry": 30, "indexerror": [30, 35, 37, 51], "tx": 30, "ty": 30, "b\u00e9zier": 30, "get_sdl_image_vers": 31, "sdl_imag": [31, 63], "get_extend": 31, "tostr": 31, "tobyt": 31, "fromstr": 31, "frombyt": 31, "frombuff": 31, "load_bas": 31, "bmp": [31, 46, 62, 63], "load_extend": 31, "save_extend": 31, "jpg": [31, 63], "pictur": [31, 63], "region": [31, 51, 56, 88, 90], "etc": [31, 32, 37, 42, 45, 61, 65, 67, 76, 88], "vast": 31, "scene": [31, 57], "uncompress": [31, 38], "gif": [31, 63, 71, 72, 73, 83, 84, 85, 88], "jpeg": [31, 88], "lbm": 31, "pbm": [31, 46], "pgm": 31, "ppm": [31, 46], "pcx": 31, "pnm": 31, "nano": 31, "tga": [31, 63], "tiff": [31, 46], "webp": 31, "xpm": 31, "tif": 31, "fileobj": [31, 40], "namehint": [31, 40], "quickli": [31, 58, 59, 62, 63, 64, 65], "abl": [31, 32, 42, 58, 63, 88, 93], "join": [31, 45, 58, 66, 75, 90, 93], "asurf": 31, "bla": 31, "recogniz": 31, "seem": [31, 46, 61, 62, 63, 64, 68, 72, 73, 88, 89, 91], "flush": [31, 37], "rgbx": 31, "unus": [31, 38, 50], "argb": 31, "bgra": 31, "rgba_premult": 31, "argb_premult": 31, "nice": [31, 58, 61, 62, 65, 88, 91], "pil": 31, "independ": [15, 31, 58, 90], "potenti": [31, 64, 88, 92], "faster": [31, 36, 44, 50, 51, 52, 56, 58, 64, 65, 67, 88], "bytearrai": 31, "memoryview": 31, "unabl": [31, 46, 64], "alloc": [9, 31, 38, 68], "bgr": [31, 51, 65], "ie": [31, 65], "matter": [31, 51, 62, 64, 88, 91], "notimplementederror": [31, 40], "initialis": [32, 44, 47, 61, 89, 92, 93], "hotplug": 32, "uniqu": [32, 33, 48, 50, 51, 62, 67, 72, 74], "get_instance_id": 32, "frequent": [32, 62, 64, 69, 88], "regularli": 32, "get_guid": 32, "get_power_level": 32, "approxim": [32, 35, 51, 57], "get_numax": 32, "get_axi": [32, 47], "get_numbal": 32, "get_bal": 32, "get_numbutton": 32, "get_button": [32, 47], "get_numhat": 32, "get_hat": 32, "rumbl": [32, 47], "stop_rumbl": [32, 47], "dealloc": 32, "reinitialis": 32, "0dev11": 32, "wire": 32, "rudder": 32, "throttl": 32, "analog": [32, 42, 47], "nois": [32, 35, 57], "rapid": 32, "motion": [32, 39, 48, 63, 91, 93], "axis_numb": 32, "account": [32, 33, 36, 38, 40, 42, 56, 68], "toler": [32, 36], "jitter": 32, "drift": 32, "stick": [32, 47, 62, 65, 88], "movement": [32, 39, 50, 58, 91, 92], "roll": [32, 39, 64], "ball_numb": 32, "pushabl": 32, "miniatur": 32, "hat_numb": 32, "low_frequ": [32, 47], "high_frequ": [32, 47], "durat": [32, 47], "successfulli": [32, 47], "textprint": 32, "__init__": [32, 45, 50, 57, 58, 62, 64, 66, 75, 90, 91, 92, 93], "25": [32, 56, 58, 66, 75], "tprint": 32, "text_bitmap": 32, "line_height": 32, "indent": [32, 61], "unind": 32, "500": [32, 45], "fast": [32, 35, 42, 51, 52, 56, 58, 62, 63, 64, 65, 69, 88], "text_print": 32, "connenct": 32, "disconnect": [32, 61], "eras": [32, 35, 50, 58, 62, 63, 64, 88], "joystick_count": 32, "jid": 32, "power_level": 32, "3f": 32, "__name__": [32, 45, 66, 71, 72, 73, 83, 84, 85, 89, 93], "__main__": [32, 66, 71, 72, 73, 83, 84, 85, 89, 93], "forget": [32, 64, 91], "hang": 32, "coupl": [32, 58, 62, 64, 65], "three": [32, 36, 38, 44, 51, 52, 64, 65, 68, 88, 89, 92], "11": [32, 68, 69, 80, 81], "wireless": 32, "d": [32, 33, 51, 62, 88, 89, 91], "sr": 32, "13": [32, 63, 65, 68, 80, 93], "zl": 32, "home": [32, 33], "zr": 32, "bumper": 32, "ps4": 32, "cross": [32, 36, 58, 63, 65, 90], "rt": 32, "lt": 32, "get_press": [15, 33, 39, 62, 88], "get_mod": 33, "held": [33, 62, 92], "set_repeat": 33, "get_repeat": 33, "key_cod": 33, "start_text_input": 33, "stop_text_input": 33, "set_text_input_rect": 33, "deal": [33, 44, 65, 68, 88, 92], "composit": 33, "weird": 33, "multimedia": [33, 63, 88], "portabl": [33, 37, 63], "k_a": [15, 33, 70, 82, 93], "97": 33, "k_backspac": 33, "backspac": 33, "k_tab": 33, "tab": 33, "k_clear": 33, "k_return": 33, "k_paus": 33, "k_space": 33, "k_exclaim": 33, "exclaim": 33, "k_quotedbl": 33, "quotedbl": 33, "k_hash": 33, "hash": 33, "k_dollar": 33, "dollar": 33, "k_ampersand": 33, "ampersand": 33, "k_quot": 33, "quot": 33, "k_leftparen": 33, "parenthesi": 33, "k_rightparen": 33, "k_asterisk": 33, "asterisk": 33, "k_plu": 33, "k_comma": 33, "k_minu": 33, "minu": 33, "k_period": 33, "period": [33, 40, 88], "k_slash": 33, "forward": 33, "k_0": 33, "k_1": 33, "k_2": 33, "k_3": 33, "k_4": 33, "k_5": 33, "k_6": 33, "k_7": 33, "k_8": [33, 70, 82], "k_9": 33, "k_colon": 33, "colon": 33, "k_semicolon": 33, "semicolon": 33, "k_less": 33, "k_equal": 33, "k_greater": 33, "k_question": 33, "question": [15, 33, 62, 88], "mark": [33, 42, 57, 63], "k_at": 33, "k_leftbracket": 33, "bracket": [33, 91], "k_backslash": 33, "backslash": 33, "k_rightbracket": 33, "k_caret": 33, "caret": 33, "k_underscor": 33, "underscor": [33, 58], "k_backquot": 33, "grave": 33, "k_b": 33, "k_c": 33, "k_d": [15, 33], "k_e": 33, "k_f": [33, 88], "k_g": 33, "k_h": 33, "k_i": 33, "k_j": 33, "j": [33, 35, 73, 85], "k_k": 33, "k": [33, 36], "k_l": [33, 70, 82], "k_m": 33, "k_n": 33, "k_o": 33, "k_p": 33, "k_q": 33, "q": 33, "k_r": 33, "k_": [15, 33, 34, 70], "k_t": [33, 88], "k_u": 33, "k_v": 33, "k_w": [15, 33], "k_x": 33, "k_y": 33, "k_z": [33, 93], "z": [33, 36, 91, 93], "k_delet": [33, 70, 82], "k_kp0": 33, "keypad": 33, "k_kp1": 33, "k_kp2": 33, "k_kp3": 33, "k_kp4": 33, "k_kp5": 33, "k_kp6": 33, "k_kp7": 33, "k_kp8": 33, "k_kp9": 33, "k_kp_period": 33, "k_kp_divid": 33, "divid": [33, 61], "k_kp_multipli": 33, "k_kp_minu": 33, "k_kp_plu": 33, "k_kp_enter": 33, "k_kp_equal": 33, "k_up": [33, 62, 70, 71, 72, 73, 82, 83, 84, 85, 92, 93], "k_down": [33, 62, 70, 71, 72, 73, 82, 83, 84, 85, 92, 93], "k_right": [33, 62, 70, 82], "k_left": [33, 62, 70, 82], "k_insert": 33, "insert": [33, 69, 73], "k_home": 33, "k_end": 33, "k_pageup": 33, "page": [33, 39, 46, 65], "k_pagedown": 33, "k_f1": 33, "f1": 33, "k_f2": 33, "f2": 33, "k_f3": 33, "f3": 33, "k_f4": [33, 70], "f4": 33, "k_f5": 33, "f5": 33, "k_f6": 33, "f6": 33, "k_f7": 33, "f7": 33, "k_f8": 33, "f8": 33, "k_f9": 33, "f9": 33, "k_f10": 33, "f10": 33, "k_f11": 33, "f11": 33, "k_f12": 33, "f12": 33, "k_f13": 33, "f13": 33, "k_f14": 33, "f14": 33, "k_f15": 33, "f15": 33, "k_numlock": 33, "numlock": 33, "k_capslock": 33, "capslock": 33, "k_scrollock": 33, "scrollock": 33, "k_rshift": 33, "k_lshift": 33, "k_rctrl": 33, "k_lctrl": [33, 70, 82], "k_ralt": 33, "alt": 33, "k_lalt": 33, "k_rmeta": 33, "meta": 33, "k_lmeta": 33, "k_lsuper": 33, "k_rsuper": 33, "k_mode": 33, "k_help": 33, "k_print": 33, "k_sysreq": 33, "sysrq": 33, "k_break": 33, "k_menu": 33, "k_power": 33, "k_euro": 33, "euro": 33, "k_ac_back": 33, "assembl": 33, "ORing": 33, "togeth": [33, 38, 56, 61, 63, 65, 90], "kmod_non": 33, "kmod_lshift": 33, "kmod_rshift": 33, "kmod_shift": 33, "kmod_lctrl": 33, "kmod_rctrl": 33, "kmod_ctrl": 33, "kmod_lalt": 33, "kmod_ralt": 33, "kmod_alt": 33, "kmod_lmeta": 33, "kmod_rmeta": 33, "kmod_meta": 33, "kmod_cap": 33, "cap": 33, "kmod_num": 33, "num": [33, 72, 73, 84, 85], "kmod_mod": 33, "altgr": 33, "compar": [33, 35, 36, 42, 44, 50, 56, 63, 68, 88], "push": [33, 71, 92], "rapidli": [33, 62], "unnot": 33, "impos": [33, 38], "interv": 33, "use_compat": 33, "paramat": 33, "prettier": 33, "stabil": 33, "keycod": 33, "known": [33, 88], "im": 33, "editor": [33, 88], "symbol": 33, "edit": [33, 47], "commit": [33, 63], "hide": [33, 39, 44, 48, 58], "gameplai": [33, 64, 93], "Its": 34, "namespac": [34, 58, 60, 77], "throughout": 34, "mod_": 34, "timer_resolut": [34, 54], "from_surfac": [35, 48, 50], "from_threshold": [35, 57], "threshold": [35, 42, 50, 56], "perfect": 35, "collid": [35, 45, 50, 58, 64, 66, 75, 91, 93], "127": [35, 37, 71, 72, 73, 83, 84, 85], "collide_mask": [35, 50], "othersurfac": 35, "palette_color": [35, 56], "nonzero": [35, 45], "get_at": [35, 51, 56, 58, 65, 66, 75, 88], "set_at": [35, 51, 65, 88], "overlap": [35, 45, 50, 62, 64, 88, 91, 93], "intersect": [35, 45, 50, 64, 67], "overlap_area": 35, "overlap_mask": 35, "centroid": [35, 57], "convolv": 35, "convolut": [35, 65], "connected_compon": [35, 57], "get_bounding_rect": [35, 51], "to_surfac": [35, 48], "x_offset": 35, "y_offset": 35, "othermask": 35, "calling_mask": 35, "shallow": 35, "__copy__": 35, "submask": 35, "new_mask": 35, "kwarg": [35, 48, 50, 51], "alter": [35, 39, 56], "a_mask": 35, "encount": 35, "sizeof": 35, "char_bit": 35, "column": [35, 42, 65, 73, 85], "clariti": 35, "row": [35, 42, 51, 65], "continu": [35, 38, 44, 50, 51, 63, 89], "numbit": 35, "finit": 35, "mass": 35, "theta": [35, 36], "10th": 35, "orthogon": 35, "diagon": [35, 56], "sauf": 35, "largest": [35, 57, 59, 63, 65], "equat": [35, 69], "setsurfac": 35, "unsetsurfac": 35, "setcolor": 35, "unsetcolor": 35, "srcalpha": [35, 43, 51, 56], "preced": [35, 68], "topleft": [35, 42, 45, 50, 56, 58, 62, 66, 75, 93], "note1": 35, "note2": 35, "vector3": 36, "numer": [36, 38], "vec": 36, "elementwis": 36, "scalar": [36, 45, 56, 58], "product": [36, 61], "subscript": [36, 42], "slice": [36, 42, 43, 65, 88], "swizzl": 36, "xy": [36, 93], "2pre": 36, "construct": [36, 45, 62], "glsl": 36, "conveni": [36, 44, 50, 53, 62, 63, 88], "magnitud": 36, "euclidean": [36, 42], "magnitude_squar": 36, "length_squar": 36, "normalize_ip": 36, "is_norm": 36, "scale_to_length": 36, "reflect": 36, "reflect_ip": 36, "distance_to": 36, "distanc": [36, 42, 56], "distance_squared_to": 36, "move_toward": 36, "move_towards_ip": 36, "slerp": 36, "spheric": 36, "rotate_rad": 36, "rotate_ip": 36, "rotate_ip_rad": 36, "rotate_rad_ip": 36, "angle_to": 36, "as_polar": 36, "radial": [36, 65], "azimuth": 36, "from_polar": 36, "polar": 36, "clamp_magnitud": 36, "max_length": 36, "min_length": 36, "clamp_magnitude_ip": 36, "epsilon": 36, "inherit": [36, 50, 51, 64, 90, 91], "superclass": 36, "theorem": 36, "sqrt": [36, 69], "root": [36, 53, 88], "pythagorean": [36, 69], "thu": [36, 42, 91], "character": 36, "overshoot": 36, "delta": [15, 36], "awai": [15, 23, 36, 64, 71, 93], "parametr": 36, "complement": 36, "shortest": 36, "vectorelementwiseproxi": 36, "phi": 36, "wall": [36, 57, 93], "wikipedia": 36, "1e": 36, "act": [36, 58, 63, 70], "lead": 36, "asymmetr": 36, "behavior": [29, 31, 36, 39, 50], "symmetri": 36, "nearli": [36, 64, 67], "rare": [36, 44, 51, 88], "rotate_x": 36, "rotate_x_rad": 36, "rotate_x_ip": 36, "rotate_x_ip_rad": 36, "rotate_x_rad_ip": 36, "rotate_i": 36, "rotate_y_rad": 36, "rotate_y_ip": 36, "rotate_y_ip_rad": 36, "rotate_y_rad_ip": 36, "rotate_z": 36, "rotate_z_rad": 36, "rotate_z_ip": 36, "rotate_z_ip_rad": 36, "rotate_z_rad_ip": 36, "as_spher": 36, "inclin": 36, "from_spher": 36, "get_default_input_id": 37, "get_default_output_id": 37, "get_device_info": 37, "midis2ev": 37, "portmidi": 37, "timer": [37, 54], "frequency_to_midi": 37, "frequenc": [37, 38], "midi_to_frequ": 37, "midi_to_ansi_not": 37, "ansi": 37, "midiexcept": 37, "ever": [37, 40, 59], "pyportmidi": 37, "bind": [37, 59], "buffer_s": 37, "pend": 37, "num_ev": 37, "particularli": 37, "difficult": [37, 61, 63], "midi_event_list": 37, "data1": 37, "data2": 37, "data3": 37, "timestamp": 37, "latenc": [37, 38, 88], "abort": 37, "outgo": 37, "note_off": 37, "note_on": 37, "set_instru": 37, "instrument": 37, "pitch_bend": 37, "pitch": [37, 51, 62], "write_short": 37, "write_sys_ex": 37, "exclus": [37, 51], "mere": [37, 88], "buffers": [37, 38], "deliv": 37, "synchron": 37, "time_proc": 37, "caller": [9, 37], "transmiss": 37, "veloc": [37, 69], "instrument_id": 37, "8192": 37, "8191": 37, "4096": [37, 38], "semiton": 37, "tone": 37, "bend": 37, "synthes": 37, "seri": [37, 63, 70], "1024": [37, 38], "20000": 37, "500m": 37, "65": [37, 56], "0xc0": 37, "0x90": 37, "20500": 37, "msg": 37, "midi_output": 37, "xf0": 37, "x7d": 37, "x10": 37, "x12": 37, "x13": 37, "xf7": 37, "0xf0": 37, "0x7d": 37, "0x10": 37, "0x11": 37, "0x12": 37, "0x13": 37, "0xf7": 37, "num_devic": 37, "default_id": 37, "pm_recommended_input_devic": 37, "pm_recommended_output_devic": 37, "testin": 37, "testout": 37, "registri": 37, "usb": 37, "identif": 37, "hkey_local_machin": 37, "recommended_input_devic": 37, "recommended_output_devic": 37, "substr": 37, "exactli": [37, 42, 45, 51, 58, 62, 63, 64, 65, 68, 88], "midisport": 37, "1x1": 37, "interf": 37, "mmsystem": 37, "win32": 37, "alsa": 37, "coremidi": 37, "oss": 37, "lowest": 37, "pmdeviceid": 37, "an_id": 37, "midi_ev": 37, "midi_not": 37, "27": 37, "21": [37, 63], "ansi_not": 37, "a0": 37, "errno": 37, "pre_init": 38, "fadeout": [38, 40], "set_num_channel": 38, "total": [38, 43, 44, 53, 62, 68, 88, 90], "get_num_channel": 38, "set_reserv": 38, "find_channel": 38, "get_sdl_mixer_vers": 38, "sdl_mixer": [38, 40], "simultan": [38, 67], "complex": [38, 58, 63, 64, 67, 69, 88, 90, 91, 92], "unlik": [15, 38, 43, 51, 65, 92], "rate": [38, 40, 50, 69, 88], "resampl": 38, "laggi": 38, "chanc": [38, 65, 88], "scratchi": 38, "44100": 38, "512": 38, "devicenam": 38, "allowedchang": 38, "audio_allow_frequency_chang": 38, "audio_allow_channels_chang": 38, "dropout": 38, "toplevel": 38, "16bit": 38, "8bit": 38, "audio_allow_format_chang": 38, "apart": 38, "ORed": 38, "audio_allow_any_chang": 38, "3072": 38, "22050": 38, "reiniti": 38, "mute": 38, "decreas": [38, 45, 72], "longest": [38, 88], "pathlib_path": 38, "set_volum": [38, 40], "get_volum": [38, 40], "get_length": 38, "bytestr": 38, "pathnam": [38, 58, 90], "ambigu": 38, "guess": [38, 88], "wrong": [38, 65, 88], "ogg": [38, 40], "wav": [38, 40, 46, 58, 66, 75], "make_sound": [38, 49], "maxtim": 38, "fade_m": [38, 40], "speaker": 38, "forcibli": 38, "cut": [38, 46, 88], "five": [38, 39, 40], "six": [38, 40, 61, 63], "indefinit": [38, 40], "loud": 38, "get_sound": 38, "get_queu": 38, "set_endev": [38, 40], "get_endev": [38, 40], "fine": [38, 51, 59, 64, 88], "endev": [38, 40], "get_po": [39, 40, 58, 66, 75, 88], "get_rel": 39, "set_po": [39, 40], "set_vis": [39, 58, 66, 75], "get_vis": 39, "get_cursor": 39, "wheel": 39, "broken": [39, 44], "accur": [39, 40, 54], "clean": [39, 42, 58, 60, 62, 63, 64, 75, 88], "primari": 39, "http": [39, 56, 70, 82, 90, 93], "wiki": 39, "libsdl": 39, "org": [39, 58, 59, 60, 62, 63, 64, 65, 70, 75, 77, 78, 82, 90, 93], "migrationguid": 39, "listen": 39, "mind": [39, 54, 60, 65, 88], "emit": 39, "dev7": 39, "husano896": 39, "pr": 39, "elif": [39, 58, 66, 69, 70, 71, 72, 73, 75, 81, 82, 83, 84, 85, 92, 93], "notat": 39, "ex": [39, 70], "execut": [15, 39, 53, 66, 67, 68, 69, 70, 71, 73, 88], "num_button": 39, "button1": 39, "button2": 39, "button3": 39, "button4": 39, "button5": 39, "middl": [39, 47, 57, 62, 65], "mice": 39, "jump": [39, 62, 63, 65], "terminologi": [39, 88], "contrast": [39, 70, 91], "school": 39, "unload": 40, "rewind": 40, "restart": [40, 90], "ti": [40, 75], "mp3": 40, "compress": [40, 51], "denot": [40, 45, 54], "id3": 40, "tag": [40, 53], "throw": [40, 62, 64], "previoulsi": [], "won": [40, 50, 58, 61, 62, 64, 65, 88, 90, 91, 92], "sdlerror": 40, "mix_setmusicposit": 40, "soon": [40, 44, 64, 92], "natur": [40, 65, 74, 88, 90], "bach": 40, "mozart": 40, "set_loc": 41, "get_hardwar": 41, "technic": 41, "yv12_overlai": 41, "iyuv_overlai": 41, "yuy2_overlai": 41, "uyvy_overlai": 41, "yvyu_overlai": 41, "plane": [41, 51], "improperli": 41, "crash": [41, 64], "redraw": [41, 62], "items": 42, "ndim": 42, "make_surfac": [42, 43, 52], "extract": [42, 56, 58], "transpos": 42, "exchang": 42, "subarrai": 42, "pxarrai": 42, "0xff00ff": 42, "0xaacce": 42, "170": [42, 57, 58, 66, 75], "204": 42, "238": [42, 58, 66, 75], "otherarrai": 42, "broadcast": [42, 65], "1d": [42, 73], "subview": 42, "newarrai": 42, "scope": [42, 65], "pixel_arrai": 42, "pypi": 42, "remap": [42, 47], "breakag": 42, "suggest": [42, 58, 88], "cleanup": [42, 75], "get_bytes": [42, 51], "sf": 42, "repcolor": 42, "weight": [20, 36, 42, 56, 65], "299": 42, "587": 42, "114": 42, "formula": [20, 36, 42, 44, 51, 56, 91], "surface_to_arrai": 43, "array_to_surfac": 43, "map_arrai": [43, 52], "intend": [43, 50, 51], "progress": 43, "stabl": 43, "predomin": 43, "introspect": 43, "insensit": [43, 51], "unmap": 43, "set_colorkei": [43, 51, 58, 66, 75, 88], "blanket": [43, 51], "set_alpha": [43, 51], "array_colorkei": [43, 52, 65], "incorrect": 43, "blit_arrai": [43, 52, 65], "accord": [20, 43, 56, 69], "set_error": 44, "get_sdl_byteord": 44, "register_quit": 44, "encode_str": 44, "encode_file_path": 44, "submodul": [44, 53], "meant": [44, 48, 64], "placehold": 44, "numpass": 44, "numfail": 44, "catch": [44, 64, 93], "anticip": [44, 69], "errorstr": 44, "error_msg": 44, "1234": 44, "4321": 44, "etyp": 44, "unalt": [44, 88], "syntaxerror": 44, "present": [44, 48, 50, 60, 62, 63, 64, 77, 88], "unicode_escap": 44, "unencod": 44, "backslashreplac": 44, "codec": 44, "ver": [44, 75], "vernum": 44, "rev": 44, "repositori": [44, 88], "revis": [44, 61, 63], "build": [44, 64, 65, 89, 93], "micro": 44, "warn": [44, 48, 58, 66, 75], "disable_advanced_featur": 44, "repr": 44, "pygamevers": 44, "a6f89747b551": 44, "mercuri": 44, "node": 44, "checkout": 44, "uncommit": 44, "github": [44, 46, 56], "v1": 44, "sdlversion": 44, "aspect": [44, 45], "name_of_environment_vari": 44, "value_to_set": 44, "abil": [44, 58, 63], "env_var": 44, "my_appl": 44, "settabl": 44, "pygame_displai": 44, "pygame_force_scal": 44, "photo": 44, "slowest": [44, 51, 89], "highest": 44, "anisotrop": 44, "blitter": [44, 51, 62], "pygame_hide_support_prompt": 44, "prompt": [44, 63, 65], "welcom": [15, 44], "pop": 44, "pure": [44, 51], "bypass": 44, "why": [44, 63, 70, 74, 88, 91], "pygame_camera": 44, "vidcaptur": 44, "programmat": 44, "highgui": 44, "sdl_video_cent": 44, "centr": 44, "sdl_video_window_po": 44, "placement": 44, "drivernam": 44, "sdl_audiodriv": 44, "sdl_video_allow_screensav": 44, "sdl_video_x11_net_wm_bypass_compositor": 44, "compositor": 44, "tri": [44, 62, 63, 88, 90], "kde": 44, "move_ip": [45, 58, 66, 75], "shrink": [45, 88, 93], "inflate_ip": 45, "clamp_ip": 45, "crop": [45, 56], "cliplin": 45, "union": [45, 64, 88], "union_ip": 45, "unional": 45, "unionall_ip": 45, "ratio": [45, 50], "collidepoint": [45, 72, 73, 84, 85, 88, 93], "colliderect": [45, 50, 58, 66, 75, 93], "collidelist": 45, "collidelistal": 45, "collideobject": 45, "collideobjectsal": 45, "collidedict": 45, "collidedictal": 45, "easier": [45, 50, 51, 59, 60, 62, 91], "fly": [45, 88, 89, 92], "ip": 45, "suffix": 45, "bottomleft": [45, 93], "topright": [45, 93], "bottomright": [45, 93], "midtop": 45, "midleft": [45, 92, 93], "midbottom": 45, "midright": [45, 92, 93], "centerx": [45, 58, 66, 75, 89], "centeri": 45, "rect1": 45, "rect2": 45, "illeg": 45, "meet": [45, 88], "cx1": 45, "cy1": 45, "cx2": 45, "cy2": 45, "clipped_lin": 45, "rect_sequ": 45, "list_of_rect": 45, "indices0": 45, "list_of_list": 45, "indices1": 45, "list_of_tupl": 45, "indices2": 45, "list_of_double_tupl": 45, "indices3": 45, "objectwithrectattribut": 45, "list_of_object_with_rect_attribut": 45, "indices4": 45, "objectwithcallablerectattribut": 45, "_rect": 45, "list_of_object_with_callable_rect": 45, "indices5": 45, "rect_list": [45, 50], "obj_list": 45, "func": [45, 78], "lambda": 45, "objectwithsomrectattribut": 45, "collision_box": 45, "draw_rect": [45, 48], "__repr__": 45, "__class__": 45, "screen_rect": [45, 50], "use_valu": 45, "hashabl": 45, "key_rect": 45, "get_typ": 46, "ownership": 46, "mime": 46, "scrap_text": 46, "plain": 46, "scrap_bmp": 46, "scrap_pbm": 46, "scrap_ppm": 46, "resolv": [46, 68, 91], "definit": [46, 60, 64, 65, 70], "charset": 46, "utf8_str": 46, "compound_text": 46, "compound": 46, "my_data_typ": 46, "byte_data": 46, "moment": [46, 49, 88, 91], "further": 46, "rb": 46, "fp": [15, 46, 50, 69, 81, 88], "own_data_typ": 46, "stuff": [46, 57, 61, 62, 65], "scrap_select": 46, "set_eventst": 47, "get_eventst": 47, "is_control": 47, "name_forindex": 47, "dualshock": 47, "xbox": 47, "shoulder": 47, "dpad": 47, "convent": 47, "controller_button_x": 47, "leftmost": 47, "controlleraxismot": 47, "controllerbuttondown": 47, "controllerbuttonup": 47, "controllertouchpaddown": 47, "controllertouchpadmot": 47, "controllertouchpadup": 47, "versatil": [47, 56], "from_joystick": 47, "as_joystick": 47, "get_map": 47, "set_map": 47, "static": [47, 48, 50, 69], "controller_axis_leftx": 47, "controller_axis_lefti": 47, "controller_axis_rightx": 47, "controller_axis_righti": 47, "controller_axis_triggerleft": 47, "controller_axis_triggerright": 47, "32768": 47, "32767": 47, "controller_button_a": 47, "controller_button_b": 47, "controller_button_i": 47, "controller_button_dpad_up": 47, "controller_button_dpad_down": 47, "controller_button_dpad_left": 47, "controller_button_dpad_right": 47, "controller_button_leftshould": 47, "controller_button_rightshould": 47, "controller_button_leftstick": 47, "controller_button_rightstick": 47, "controller_button_back": 47, "controller_button_guid": 47, "controller_button_start": 47, "rebind": 47, "bx": 47, "hx": 47, "b3": 47, "b0": 47, "renam": 47, "add_map": 47, "prime": 48, "adopt": [48, 61, 76], "_sdl2": 48, "fullscreen_desktop": 48, "from_display_modul": 48, "confin": [48, 62], "relative_mous": 48, "set_window": 48, "set_fullscreen": 48, "input_onli": 48, "borderless": 48, "opac": [48, 88], "set_modal_for": 48, "modal": 48, "classmethod": 48, "windowpos_cent": 48, "windowpos_undefin": 48, "blend_mod": 48, "sparingli": 48, "flip_x": [48, 56], "flip_i": [48, 56], "textureorimag": 48, "target_textur": 48, "from_window": 48, "draw_blend_mod": 48, "draw_color": 48, "get_viewport": 48, "set_viewport": 48, "logical_s": 48, "logic": [48, 58, 61, 63, 65, 68, 69, 70, 71, 88, 90], "draw_lin": 48, "draw_point": 48, "fill_rect": 48, "x_scale": 48, "y_scale": 48, "special_flag": [48, 50, 51], "p1": 48, "p2": 48, "use_arraytyp": [49, 52], "get_arraytyp": [49, 52], "missingmodul": [49, 52], "thousand": 49, "amplitud": 49, "wave": 49, "22": 49, "khz": 49, "22000": 49, "playabl": 49, "deprecationwarn": [49, 52], "dirtysprit": 50, "renderplain": [50, 58, 64, 66, 75, 93], "renderclear": [50, 64], "sub": [50, 88], "dirti": [50, 64, 88], "orderedupd": 50, "layeredupd": 50, "layereddirti": 50, "groupsingl": [50, 64], "spritecollid": [50, 64, 91], "collide_rect": 50, "collide_rect_ratio": 50, "collide_circl": 50, "collide_circle_ratio": 50, "groupcollid": [50, 64, 91], "spritecollideani": 50, "fairli": [50, 60, 63, 88, 90, 91], "lightweight": [50, 88], "cheap": [50, 64], "relationship": 50, "membership": [50, 64], "repeatedli": [50, 51, 54, 56, 58, 88], "abstractgroup": 50, "kill": [50, 53, 64], "belong": [50, 58, 64, 89], "disk": [50, 88], "fetch": 50, "hook": 50, "whatev": [50, 57, 58, 61, 64, 88], "group_list": 50, "blendmod": 50, "source_rect": 50, "readonli": 50, "duplic": [50, 51], "sprite_list": 50, "arbitrari": [50, 56, 62], "surface_dest": 50, "clear_callback": 50, "slower": [50, 51, 54, 62, 88], "get_sprites_at": 50, "get_sprit": 50, "idx": 50, "remove_sprites_of_lay": 50, "change_lay": 50, "get_layer_of_sprit": 50, "get_top_lay": 50, "get_bottom_lay": 50, "move_to_front": 50, "bring": [50, 63, 88], "front": 50, "move_to_back": 50, "get_top_sprit": 50, "topmost": 50, "get_sprites_from_lay": 50, "switch_lay": 50, "layer1": 50, "layer2": 50, "default_lay": 50, "_layer": 50, "neither": [50, 69, 70], "nor": [50, 70], "colliding_sprit": 50, "indexoutofbound": 50, "layer_nr": 50, "new_lay": 50, "layer1_nr": 50, "layer2_nr": 50, "repaint_rect": 50, "set_clip": [50, 51], "get_clip": [50, 51], "set_timing_treshold": 50, "set_timing_threshold": 50, "techniqu": [50, 88], "_use_upd": 50, "_default_lay": 50, "_time_threshold": 50, "1000": [15, 50, 54], "bgd": 50, "time_m": 50, "paint": [50, 89], "dokil": [50, 64], "block_list": 50, "blocks_hit_list": 50, "collided_cal": 50, "twice": [50, 51, 56, 65], "sprite1": 50, "sprite2": 50, "group1": [50, 64], "group2": [50, 64], "dokill1": [50, 64], "dokill2": [50, 64], "sprite_dict": 50, "quicker": [50, 51, 56, 64], "get_colorkei": 51, "get_alpha": [51, 90, 93], "mustlock": 51, "get_lock": 51, "get_palett": 51, "get_palette_at": 51, "set_palette_at": 51, "get_par": 51, "get_abs_par": 51, "get_offset": 51, "child": 51, "get_abs_offset": 51, "get_width": [15, 51, 58, 66, 75], "get_bits": 51, "get_flag": 51, "get_pitch": 51, "get_mask": 51, "set_mask": 51, "get_shift": 51, "set_shift": 51, "get_loss": 51, "signific": 51, "_pixels_address": 51, "consider": 51, "plan": [51, 63], "mathemat": [51, 61, 65], "ed": [51, 64], "themselv": [51, 61, 64, 89], "assist": [51, 88], "overhead": [51, 64], "sai": [51, 61, 62, 64, 68, 88], "blend_add": 51, "blend_sub": 51, "blend_mult": 51, "blend_min": 51, "blend_max": 51, "blend_rgba_add": 51, "blend_rgba_sub": 51, "blend_rgba_mult": 51, "blend_rgba_min": 51, "blend_rgba_max": 51, "blend_rgb_add": 51, "blend_rgb_sub": 51, "blend_rgb_mult": 51, "blend_rgb_min": 51, "blend_rgb_max": 51, "blend_alpha_sdl2": 51, "model": 51, "rle": 51, "blit_sequ": 51, "doreturn": 51, "strip": 51, "exce": 51, "rleaccel": [51, 58, 66, 75], "int_valu": 51, "volatil": 51, "nonlinear": 51, "penalti": [51, 59, 64], "nest": 51, "quickest": 51, "realtim": [51, 63, 65], "mapped_int": 51, "shrunk": 51, "subsubsurfac": 51, "mysurf": 51, "srccolorkei": 51, "sdl_video": 51, "swsurfac": 51, "0x00000000": 51, "0x00000001": 51, "asyncblit": 51, "0x00000004": 51, "asynchron": 51, "hwaccel": 51, "0x00000100": 51, "0x00001000": 51, "rleaccelok": 51, "0x00002000": 51, "privat": [51, 58], "0x00004000": 51, "0x00010000": 51, "prealloc": 51, "0x01000000": 51, "linearli": [36, 51], "isol": [51, 57], "accordingli": 51, "min_alpha": 51, "unstructur": 51, "array2d": [52, 65], "pixels2d": [52, 65], "array3d": [52, 65], "pixels3d": [52, 65], "array_alpha": [52, 65], "pixels_alpha": [52, 65], "array_r": 52, "pixels_r": 52, "array_green": 52, "pixels_green": 52, "array_blu": 52, "pixels_blu": 52, "referenc": [52, 58, 64, 65], "xxxx_test": 53, "cdrom_test": 53, "run_test": 53, "_tag": 53, "__tags__": 53, "cdrom_tag": 53, "subprocess_ignor": 53, "runner": 53, "respons": [9, 53], "kwd": 53, "trail": [53, 63], "_test": 53, "incomplet": 53, "nosubprocess": 53, "subprocess": 53, "dump": 53, "eval": 53, "show_output": 53, "silenc": 53, "stderr": 53, "stdout": 53, "random": [53, 61, 73, 74, 85, 90, 93], "seed": [53, 65], "multi_thread": 53, "time_out": 53, "run_tests__test": 53, "subpackag": 53, "unfortun": [53, 88], "frozen": [53, 88], "allot": 53, "expir": 53, "session": 53, "reentrant": 53, "get_tick": 54, "set_tim": 54, "processor": [54, 56], "milli": 54, "worth": [51, 54], "mention": [54, 58, 62, 64, 68, 70, 88], "discard": 54, "tick_busy_loop": 54, "get_tim": 54, "get_rawtim": 54, "get_fp": 54, "sdl_delai": 54, "chew": 54, "ten": 54, "get_num_devic": 55, "get_devic": 55, "get_num_fing": 55, "finger": [55, 70, 90], "get_fing": 55, "touchid": 55, "pressur": 55, "scale_bi": [45, 56], "rotozoom": 56, "scale2x": 56, "doubler": 56, "smoothli": [56, 62], "smoothscale_bi": 56, "get_smoothscale_backend": 56, "set_smoothscale_backend": 56, "chop": 56, "interior": 56, "laplacian": 56, "average_surfac": [56, 57], "average_color": [56, 57], "search_color": 56, "search_surf": 56, "destruct": [56, 58], "suppos": [56, 88], "spring": 56, "expand": [56, 61], "dest_surfac": 56, "tripl": 56, "unfilt": 56, "advancemam": 56, "jaggi": 56, "photograph": 56, "shrinkag": 56, "expans": 56, "bilinear": 56, "x86": 56, "i686": 56, "architectur": 56, "thrown": [56, 93], "instruct": 56, "temporari": [56, 65], "surround": [56, 89], "brought": 56, "greyscal": 56, "consider_alpha": 56, "artifact": 56, "set_color": 56, "set_behavior": 56, "inverse_set": 56, "num_threshold_pixel": 56, "dest_surf": 56, "com": 56, "blob": [56, 57], "master": [65, 67], "transform_test": 56, "test_threshold_dest_surf_not_chang": 56, "original_color": 56, "original_dest_color": 56, "55": 56, "threshold_color": 56, "third_surfac": 56, "threshold_behavior_from_search_color": 56, "pixels_within_threshold": 56, "assertequ": 56, "dest_rect": 56, "dest_siz": 56, "change_color": 56, "pt": 56, "test_util": 56, "rect_area_pt": 56, "assertnotequ": 56, "nirav": 57, "patel": 57, "contact": [57, 58, 59, 60, 62, 63, 64, 65, 78], "nrp": 57, "eclecti": 57, "cc": 57, "simplest": [57, 71], "cam": 57, "wonder": [57, 88], "camlist": 57, "saw": [57, 58, 62], "clist": 57, "sorri": [57, 59], "snapshot": 57, "get_and_flip": 57, "tie": [57, 72], "tree": 57, "Of": [57, 69, 70, 71], "cours": [57, 69, 70, 71, 89, 90, 91, 93], "world": [57, 68, 69, 70, 74, 80, 81, 82, 88], "calibr": 57, "stage": 57, "crect": 57, "145": 57, "105": 57, "ccolor": 57, "bunch": [57, 64, 88], "bg": 57, "rid": 57, "coord": 57, "life": [57, 59], "finer": 57, "pete": [58, 59, 60, 62, 63, 64, 65, 75, 77, 78, 88], "shinner": [58, 59, 60, 62, 63, 64, 65, 75, 77, 78, 88], "simul": [58, 67], "punchabl": 58, "monkei": [58, 63, 66, 75], "promis": [58, 62], "rich": 58, "reward": [58, 63], "thin": 58, "explain": [58, 62, 64, 68, 71, 73, 90, 91, 93], "excel": [58, 62, 63], "screenshot": 58, "main_dir": [58, 66, 75], "abspath": [58, 66, 75], "data_dir": [58, 66, 75], "our": [58, 62, 63, 65, 66, 74, 89], "aren": [58, 62, 88], "evalu": 58, "although": [58, 68, 90], "uncommon": 58, "folder": 58, "load_imag": [58, 66, 75], "fullnam": [58, 66, 75, 90, 93], "load_sound": [58, 66, 75, 90], "nonesound": [58, 66, 75], "dummi": [58, 64, 92], "goe": [58, 62, 64, 68, 88, 93], "clench": [58, 66, 75], "fist_offset": [58, 66, 75], "235": [58, 66, 75], "punch": [58, 63, 66, 75], "hitbox": [58, 66, 75], "unpunch": [58, 66, 75], "critter": [58, 66, 75], "dizzi": [58, 66, 75], "walk": [58, 66, 75], "_spin": [58, 66, 75], "_walk": [58, 66, 75], "newpo": [58, 66, 75, 91, 92, 93], "forth": 58, "he": [58, 76, 88, 89], "excit": [58, 62, 63, 65], "prefix": 58, "idiom": [58, 88], "slight": [58, 64], "wors": 58, "1280": [15, 58, 66, 75, 88], "fever": [58, 66, 75], "bother": [58, 61, 90], "bid": [58, 75], "187": [58, 66, 75], "pummel": [58, 66, 75], "textpo": [58, 66, 75, 89], "dark": [58, 63], "explanatori": 58, "whiff_sound": [58, 66, 75], "whiff": [58, 66, 75], "punch_sound": [58, 66, 75], "allsprit": [58, 66, 75], "infinit": [58, 63, 68], "miss": [58, 66, 75, 88], "him": [58, 62], "hi": [58, 62], "farther": [58, 62], "recent": [58, 63, 64, 65], "ineffici": 58, "task": [59, 90], "advantag": [59, 63, 64, 67, 88, 91], "realiti": [59, 88], "disadvantag": [59, 88], "manner": [59, 91], "gather": 59, "golden": 59, "rule": [59, 70, 73, 74, 93], "pretti": [59, 62, 64, 65, 88, 89, 92, 93], "bet": 59, "16711680": [59, 78], "65280": [59, 78], "me": [59, 63, 65, 88], "800": [59, 78], "clearer": 60, "cleanli": [60, 62, 63, 64, 93], "fundament": [61, 88], "ta": 61, "da": [61, 75], "kick": 61, "divers": 61, "bat": 61, "aim": 61, "ridicul": 61, "pong": [61, 76, 90, 93], "tompong": [61, 76, 93], "firmer": [61, 63], "grasp": [61, 93], "recap": 61, "organis": 61, "network": [61, 90], "scoreboard": 61, "harder": [61, 65, 88], "plot": 61, "possibli": 61, "approach": 61, "stai": [61, 65, 70], "whitespac": 61, "obscur": [61, 88], "obviou": 61, "plenti": [61, 88], "player1": [61, 76, 93], "scoreup": [61, 76], "worst": 61, "poorli": [61, 88], "seemingli": 61, "poor": 61, "hard": [62, 63, 65, 68], "figur": [62, 88], "person": [62, 63, 92], "stuck": 62, "teach": 62, "articl": [62, 63], "perhap": [62, 64, 88, 90], "achiev": [62, 90], "illus": 62, "simpler": [62, 63, 64], "hopefulli": [62, 65, 91], "straighten": 62, "foreign": 62, "imagin": [62, 89, 93], "fantast": 62, "surpris": [62, 63], "beauti": 62, "landscap": [62, 88], "mighti": 62, "gotten": 62, "drew": 62, "offici": [62, 88], "playerpo": 62, "whoop": 62, "term": [62, 64, 89], "unfamiliar": [62, 88], "formal": 62, "bitblt": 62, "blt": 62, "talk": 62, "scanlin": 62, "straightforward": [62, 63], "pretend": 62, "terrain1": 62, "terrain2": 62, "create_graphics_screen": 62, "playerimag": 62, "hmm": 62, "familiar": [62, 63, 64, 88, 89, 92], "importantli": 62, "sens": [62, 88, 91, 92, 93], "illustr": [62, 65, 91], "certainli": [62, 65], "awkward": [62, 88], "cleaner": [62, 63], "smoother": 62, "ground": 62, "tile": 62, "subsect": 62, "create_screen": 62, "load_player_imag": 62, "load_background_imag": 62, "benefit": [62, 64], "cutout": 62, "bonu": 62, "sell": 62, "momma": 62, "proud": 62, "leak": 62, "smart": [62, 64], "desper": 62, "move_and_draw_all_game_object": 62, "forev": [62, 88], "gameobject": [62, 88], "gone": [62, 93], "movabl": [62, 92, 93], "entiti": 62, "accommod": 62, "revamp": 62, "sprite_height": 62, "sprite_width": 62, "magic": [62, 88, 91], "assert": 62, "choppi": 62, "unpleas": 62, "rins": 62, "alien1": 62, "road": 62, "mayb": [62, 64, 70, 88, 90], "mail": [62, 88], "chatroom": 62, "folk": 62, "programm": [63, 64, 88, 90, 91], "zine": [], "helper": 63, "summer": 63, "Being": [63, 88], "year": [63, 74, 88], "discov": [63, 88], "directmedia": 63, "sam": 63, "lantinga": 63, "hundr": 63, "impress": 63, "wasn": 63, "realiz": [63, 88], "propos": 63, "pysdl": [63, 88], "baker": 63, "swig": 63, "felt": 63, "sudden": 63, "death": 63, "took": 63, "goal": 63, "octob": 63, "month": 63, "dai": [63, 64, 88], "friendlier": 63, "breakdown": 63, "320": [63, 68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85], "240": [63, 68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85], "intro_bal": 63, "ballrect": [63, 67, 68, 69, 70, 71, 72, 73, 79, 80, 81, 82, 83, 84, 85], "noteworthi": 63, "compens": 63, "util": [63, 74, 88], "gui": [63, 67, 71, 72, 73, 79, 83], "17": [63, 68, 80], "thru": 63, "newtonian": 63, "23": 63, "job": [63, 64], "fool": [63, 65], "human": [63, 74, 90], "ey": 63, "conclud": 63, "websit": 63, "ufo": 63, "shoot": 63, "answer": [63, 88], "reach": [63, 88], "ceil": 63, "trend": 63, "engin": [63, 67, 88], "ago": 63, "assembli": 63, "nowadai": [63, 88], "quake3": 63, "unreal": [63, 67, 79], "bytecod": 63, "rebel": 63, "studio": 63, "blade": 63, "bloodi": 63, "3rd": 63, "fighter": 63, "mediev": 63, "warrior": 63, "intric": 63, "decapit": 63, "attack": [36, 63], "explor": 63, "dungeon": 63, "castl": 63, "download": [63, 93], "ons": 63, "freedom": [15, 63], "humung": 63, "backyard": 63, "sport": 63, "spent": [63, 74, 88], "solarwolf": 63, "arcad": [63, 88], "compani": 63, "loki": 63, "retail": 63, "visit": 63, "caught": 63, "attent": [63, 70], "advic": 63, "stress": [63, 88], "challeng": [63, 88], "necessarili": 63, "week": 63, "cdrom": 63, "occasion": 64, "holdov": 64, "overlai": 64, "dedic": 64, "discuss": [64, 88], "somewher": [64, 68], "tricki": [64, 65, 88], "shortcut": 64, "truth": 64, "mygroup": 64, "categor": 64, "pacman": 64, "ghost": 64, "pac": 64, "pellet": 64, "eat": 64, "close_to_play": 64, "enemi": [36, 64], "close_to_player2": 64, "close_to_player3": 64, "hardest": 64, "anyon": 64, "chase": 64, "chaser": 64, "notifi": 64, "iceberg": 64, "frill": 64, "cadillac": 64, "hope": 64, "groupmulti": 64, "circular": 64, "obvious": [64, 89], "stationari": 64, "merg": 64, "messi": 64, "monster": 64, "summari": 64, "bomb": 64, "boom_sound": 64, "explos": 64, "boom": 64, "funni": 64, "shot": 64, "bullet": [64, 88], "tweak": 64, "cryptic": 64, "mysprit": 64, "_sprite__g": 64, "concern": [64, 74], "renderupdatesdraw": 64, "lostsprit": 64, "spritedict": 64, "newrect": 64, "scratch": [64, 88], "add_intern": 64, "remove_intern": 64, "_spritegroup": 64, "ordinari": 64, "todo": [64, 76, 77, 78], "contribut": 64, "beginn": 65, "intimid": 65, "scipi": 65, "predecessor": [65, 88], "plant": 65, "wisdom": 65, "multidimension": 65, "syntax": [65, 88], "studi": [65, 91], "traceback": [65, 90], "stdin": 65, "operand": 65, "aaa": 65, "row1": 65, "row2": 65, "2x2": 65, "ok": [65, 88, 89, 91], "start_index": 65, "end_index": 65, "arang": 65, "4th": 65, "importerror": [65, 90, 93], "trickier": 65, "essenti": 65, "chart": 65, "arrayxd": 65, "pixel2d": 65, "ye": [65, 67, 89], "pixel3d": 65, "equip": 65, "surfdemo_show": 65, "allblack": 65, "128": 65, "stripe": 65, "imgsurfac": 65, "rgbarrai": 65, "arrang": [65, 68], "scaledown": 65, "scaleup": 65, "underneath": 65, "redimg": 65, "int32": 65, "soften": 65, "33": 65, "3x3": 65, "gaussian": 65, "int8": 65, "src": 65, "diff": 65, "xfade": 65, "astyp": 65, "uint": 65, "bluish": 65, "crossfad": 65, "pci": 65, "agp": 65, "bu": 65, "overal": 65, "expens": 65, "brightmap": 65, "anywai": [65, 70, 89], "ufunc": 65, "datatyp": 65, "overflow": 65, "coercion": 65, "ruin": 65, "primer": [65, 75], "afraid": 65, "flame": 65, "fire": [65, 88], "luck": 65, "bin": [66, 89, 90, 91], "env": [66, 90], "subgroup": 67, "scanf": [67, 79], "unnorm": 67, "getch": [67, 79], "procedur": [67, 68], "printf": [67, 79], "blink": 67, "art": [67, 74], "bore": [67, 90], "outdat": 67, "cui": [67, 68, 73, 85], "uniti": [67, 79], "barrier": 67, "overcom": 67, "quaternion": 67, "mechanim": 67, "dilemma": 67, "140": [67, 68, 69, 70, 79, 80, 81, 82], "puyopuyo": [67, 79], "tp": [67, 79], "geometri": [67, 71], "battleship": [67, 79], "maker": [67, 74], "dream": 67, "man": 67, "asid": 67, "furthermor": [68, 70, 71], "bye": 68, "hello": [68, 69, 70, 80, 81, 82, 89], "ouput": [68, 80], "sourcecod": [68, 69, 70, 80, 81, 82], "bagic": [68, 69, 70, 80, 81, 82], "wow": 68, "complic": [68, 88], "dive": 68, "statement": [68, 69, 70, 71, 72, 88, 93], "19": [68, 80], "needless": [68, 71, 73, 88], "oldest": 68, "newest": 68, "remind": 68, "trait": [68, 74], "hoonwhitecatr": [68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85], "mytextfont": [68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85], "mytext": [68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85], "mytextarea": [68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85], "canva": [68, 71], "turtl": 68, "myscreen": [68, 69, 70, 71, 72, 73, 80, 81, 82, 83, 84, 85], "resultscreen": [69, 70, 81, 82], "arkanoid": 69, "phase": [69, 70], "displac": 69, "okai": [69, 72], "dynam": [9, 69, 88], "fpsclock": [69, 70, 71, 72, 73, 81, 82, 83, 84, 85], "moveright": [69, 70, 81, 82], "moveup": [69, 81, 92, 93], "bodi": 70, "pai": 70, "intuit": [70, 88], "www": [70, 82], "ref": [70, 82], "hp": [70, 71, 72, 73, 82, 83, 84, 85], "mostli": 70, "enjoy": 70, "motiv": 70, "attract": 70, "firstli": 70, "visual": [70, 71, 72, 73, 88], "flourish": 70, "movedown": [70, 82, 92, 93], "bar": [71, 83], "vari": 71, "advancedoutputprocess1": [71, 83], "advancedoutputprocess2": [71, 83], "advancedoutputprocess3": [71, 83], "yeah": 71, "gun": 71, "discret": 71, "advancedoutputprocess4": [71, 83], "advancedoutputprocess5": [71, 83], "advancedoutputprocess6": [71, 83], "understood": 71, "drawhp": [71, 72, 73, 83, 84, 85], "maxhp": [71, 72, 73, 83, 84, 85], "advancedinputoutput1": [72, 84], "advancedinputoutput2": [72, 84], "inner": 72, "outer": 72, "advancedinputoutput3": [72, 84], "advancedinputoutput4": [72, 84], "advancedinputoutput5": [72, 84], "adequ": 72, "270": [72, 73, 84, 85], "425": [72, 73, 84, 85], "325": [72, 73, 84, 85], "r_margin": [72, 73, 84, 85], "drawbutton": [72, 73, 84, 85], "decept": 72, "5x5": [73, 85], "quiz": 73, "0d": 73, "advancedoutputalpha1": [73, 85], "advancedoutputalpha2": [73, 85], "advancedoutputalpha3": [73, 85], "generateboard": [73, 85], "randomli": 73, "board": [73, 85], "printboard": [73, 85], "prolog": 73, "chose": 73, "minhp": 73, "flood": [73, 85], "b_red": [73, 85], "b_black": [73, 85], "drawboard": [73, 85], "randint": [73, 85, 93], "b_width": [73, 85], "b_height": [73, 85], "l_margin": [73, 85], "u_margin": [73, 85], "creativ": 74, "immanuel": 74, "kant": 74, "geniu": 74, "innat": 74, "mental": 74, "aptitud": 74, "incredibli": [74, 88], "conclus": 74, "knowledg": [74, 88], "radom": 74, "avalanch": 74, "novel": 74, "movi": 74, "tetri": 74, "effort": 74, "alexei": 74, "leonidovich": 74, "pajitnov": 74, "35": 74, "ultim": 74, "trial": [74, 88], "autor": [75, 77], "traducci\u00f3n": [75, 76, 77, 78], "al": [75, 76, 77, 78], "espa\u00f1ol": [75, 76, 77, 78], "estefania": 75, "pivar": [75, 76, 77, 78], "serrano": [75, 76, 77, 78], "contacto": [75, 77], "entr": 75, "hai": [75, 77, 78], "llamado": [75, 76, 77, 78], "simula": 75, "golpeabl": 75, "que": [75, 76, 77, 78], "se": [75, 76, 77, 78], "muev": 75, "alrededor": 75, "pantalla": [75, 76, 78], "promesa": 75, "riqueza": 75, "recomepensa": 75, "s\u00ed": [75, 77, 78], "mui": [75, 77], "acarrea": 75, "poco": [75, 78], "comprobaci\u00f3n": 75, "como": [75, 76, 77, 78], "modelo": 75, "demuestra": 75, "mucha": [75, 78], "bondad": 75, "una": [75, 77, 78], "ventana": [75, 78], "cargar": 75, "im\u00e1gen": [75, 76], "sonido": [75, 76], "representar": 75, "manejo": [75, 76], "b\u00e1sico": [75, 76], "imagen": [75, 78], "pueden": [75, 76, 78], "encontrar": [75, 78], "dentro": 75, "fuent": [75, 77], "est\u00e1ndar": [75, 76, 78], "distribuci\u00f3n": 75, "pued": [75, 76, 77, 78], "ejecutar": 75, "correr": 75, "atravesar\u00e1": 75, "bloqu": 75, "explicando": 75, "c\u00f3mo": [75, 76], "funciona": [75, 76], "mismo": [75, 76, 77, 78], "adem\u00e1": 75, "har\u00e1": 75, "menci\u00f3n": 75, "mejorar": 75, "qu\u00e9": 75, "podr\u00edan": 75, "ser": [75, 76, 77, 78], "ayuda": 75, "excelent": 75, "aquella": 75, "persona": [75, 76], "est\u00e1n": [75, 77, 78], "buscando": 75, "primera": [75, 77], "aproximaci\u00f3n": 75, "vez": [75, 77], "est\u00e9": 75, "completament": 75, "instalado": 75, "podr\u00e1": [75, 76], "demostraci\u00f3n": 75, "directorio": 75, "anuncio": 75, "captura": 75, "importa": [75, 77], "necesario": [75, 76, 77, 78], "tambi\u00e9n": [75, 76, 77, 78], "comprueba": 75, "disponibilidad": 75, "alguno": [75, 76, 77, 78], "opcional": [75, 77], "primero": [75, 76, 77, 78], "sistema": [75, 78], "operativo": 75, "esto": [75, 76, 77, 78], "hacer": [75, 76, 77, 78], "cosa": [75, 76, 77], "ruta": 75, "archivo": [75, 76], "independient": 75, "platforma": 75, "sigueint": 75, "paquet": [75, 77], "nuestro": 75, "caso": [75, 78], "importamo": 75, "toda": [75, 76, 78], "funcion": [75, 76, 77], "puedan": 75, "referenciada": 75, "desd": [75, 77], "espacio": [75, 76, 77], "nombr": [75, 76, 77, 78], "son": [75, 76, 77, 78], "si": [75, 76, 77, 78], "fueran": 75, "encontrado": 75, "evaluaci\u00f3n": 75, "ser\u00e1": [75, 77], "eso": [75, 76], "decidimo": 75, "agrad": 75, "mensaj": 75, "advertencia": 75, "dispon": [75, 77, 78], "aunqu": 75, "solo": [75, 76, 77, 78], "estar": 75, "situacion": 75, "comun": 75, "finalment": [75, 76], "preparan": 75, "ser\u00e1n": 75, "usada": [75, 78], "resto": 75, "ella": 75, "usa": 75, "asignada": 75, "localizar": 75, "extraer": 75, "carpeta": 75, "esa": 75, "luego": [75, 76, 78], "\u00e9sta": 75, "prepara": 75, "indicarl": 75, "exactament": [75, 78], "d\u00f3nde": 75, "buscar": 75, "continuaci\u00f3n": 75, "presentan": 75, "usar": [75, 76, 78], "esta": [75, 76, 77, 78], "secci\u00f3n": 75, "examinaremo": 75, "funci\u00f3n": [75, 76, 77, 78], "individualment": 75, "toma": [75, 78], "opcionalment": 75, "argumento": [75, 78], "definir": 75, "clave": 75, "determinar": [75, 78], "escala": 75, "gr\u00e1fica": [75, 78], "transparent": 75, "hace": [75, 76, 77, 78], "instancia": [75, 76], "crearl": 75, "completo": 75, "subdirectorio": 75, "crear\u00e1": 75, "cualquier": [75, 76, 77, 78], "plataforma": [75, 78], "ejecut": 75, "paso": 75, "siguient": [75, 76, 77], "usando": [75, 78], "cargu": 75, "llamamo": 75, "crea": [75, 78], "nueva": [75, 76], "copia": 75, "conviert": 75, "su": [75, 76, 78], "formato": [75, 78], "profundidad": [75, 78], "tal": 75, "forma": [75, 76, 77, 78], "coincida": [75, 78], "mostrado": 75, "significa": [75, 78], "dibujo": 75, "suceder\u00e1": 75, "m\u00e1": [75, 76, 77, 78], "r\u00e1pido": 75, "posibl": [75, 77], "definir\u00e1": 75, "tama\u00f1o": [75, 76, 78], "cual": [75, 76, 78], "deber\u00eda": [75, 76], "adecuar": 75, "darl": 75, "n\u00famero": 75, "escalar": 75, "tomar": 75, "medida": 75, "definimo": 75, "usuario": [75, 76, 77, 78], "suministr\u00f3": 75, "valor": [75, 78], "parametro": 75, "usamo": 75, "es": [75, 76, 78], "usualment": 75, "\u00e9ste": [75, 77], "ser\u00eda": 75, "rojo": 75, "verd": 75, "azul": 75, "blanco": [75, 76], "pasar": 75, "buscar\u00e1": 75, "p\u00edxel": [75, 78], "arriba": 75, "izquierda": 75, "usar\u00e1": [75, 78], "anterior": 75, "verificar": 75, "import\u00f3": 75, "correctament": 75, "as\u00ed": [75, 76], "va": [75, 76, 78], "devolv": [75, 78], "reproducci\u00f3n": 75, "obrar\u00e1": 75, "sin": [75, 76, 78, 91, 93], "ning\u00fan": [75, 78], "pero": [75, 76, 77, 78], "maneja": [75, 78], "diferent": [75, 77, 78], "problema": [75, 76], "creamo": 75, "cargamo": 75, "simplement": [75, 77, 78], "devolvemo": 75, "cargado": 75, "representan": 75, "casi": [75, 76], "logica": 75, "organiza": 75, "revisaremo": 75, "representa": 75, "jugador": [75, 76], "deriva": 75, "incluida": 75, "llamada": [75, 77], "cuando": [75, 76, 77, 78], "crean": 75, "le": [75, 76, 78], "usado": 75, "uno": [75, 76, 77], "grupo": 75, "tienen": [75, 77], "atributo": 75, "cambiar": [75, 78], "compilador": 75, "dibujar\u00e1": 75, "posici\u00f3n": 75, "m\u00e9todo": [75, 76, 78], "tipicament": 75, "cuadro": 75, "dond": 75, "colocar": 75, "mueva": 75, "actualic": 75, "movimiento": 75, "lugar": 75, "encuentr": 75, "puntero": 75, "as\u00edmismo": 75, "compensa": 75, "sutilment": 75, "sobr": [75, 77, 78], "condici\u00f3n": 75, "golpear": 75, "cambian": 75, "golpeado": 75, "devuelv": [75, 78], "verdadero": [75, 77], "chocando": 75, "objetivo": 75, "intial": 75, "bien": [75, 78], "haciendo": 75, "trabajo": [75, 78], "resulta": 75, "mucho": [75, 76, 77, 78], "complejo": 75, "mover\u00e1": 75, "hacia": [75, 76], "adelant": [75, 77], "atr\u00e1": 75, "\u00e9l": 75, "girar\u00e1": 75, "efecto": 75, "emoci\u00f3n": 75, "derivada": 75, "iniciada": 75, "igual": 75, "manera": [75, 77], "inicia": 75, "establec": [75, 78], "visualizaci\u00f3n": 75, "fija": 75, "estado": 75, "mareado": 75, "verdadera": 75, "girando": 75, "causa": 75, "golp": 75, "llama": 75, "prefijada": 75, "gui\u00f3n": 75, "bajo": 75, "idioma": 75, "sugier": 75, "deber\u00edan": [75, 78], "podr\u00edamo": 75, "incluso": 75, "hasta": 75, "escribirla": 75, "dobl": 75, "indicar\u00eda": 75, "realment": [75, 78], "intent": 75, "hacerla": 75, "privado": 75, "necesitamo": 75, "protecci\u00f3n": 75, "mover": 75, "centro": 75, "cruza": 75, "afuera": 75, "\u00e1rea": 75, "marcha": 75, "imita": 75, "crudo": 75, "vea": 75, "estuviera": 75, "cambiando": 75, "direcci\u00f3n": 75, "actualment": 75, "guardar": 75, "monto": 75, "rotaci\u00f3n": 75, "rotado": 75, "ej": 75, "grado": 75, "resetea": 75, "versi\u00f3n": [75, 76, 77], "rotada": 75, "ant": [75, 76, 77, 78], "llamar": [75, 77, 78], "ver\u00e1": [75, 76], "referencia": [75, 78], "llamanda": 75, "ncesidad": 75, "aqu\u00ed": [75, 77], "fue": [75, 78], "realizada": 75, "manten": [75, 76, 78], "corta": 75, "notes": 75, "siempr": [75, 78], "rotando": 75, "rotamo": 75, "peque\u00f1a": 75, "p\u00e9rdida": 75, "calidad": 75, "rotar": 75, "repetidament": 75, "misma": 75, "genera": 75, "deterior": 75, "debe": [75, 78], "esquina": 75, "van": [75, 78], "haber": [75, 78], "sido": [75, 77], "causando": 75, "haga": [75, 76, 78], "grand": [75, 76], "Nos": 75, "aseguramo": 75, "vieja": 75, "rote": 75, "movers": [75, 76], "\u00faltimo": [75, 78], "indica": 75, "mareo": 75, "causar\u00e1": 75, "empic": 75, "girar": 75, "poder": [75, 76, 78], "algo": [75, 76, 78], "asegurarno": 75, "est\u00e9n": [75, 77, 78], "inicializado": [75, 77, 78], "vamo": 75, "abrir": 75, "gr\u00e1fico": [75, 78], "ahora": [75, 76], "estamo": 75, "ejecuta": 75, "realiza": 75, "nosotro": 75, "verifica": 75, "trav\u00e9": 75, "importado": 75, "intenta": 75, "ello": 75, "volver": [75, 78], "fallaron": 75, "iniciar": [75, 78], "molestarno": 75, "ac\u00e1": [75, 78], "especifico": 75, "tipo": [75, 76, 78], "generalment": [75, 78], "deseado": [75, 78], "configura": 75, "modo": 75, "nots": 75, "controlar": [75, 78], "configuracion": 75, "1280x480": 75, "se\u00f1al": 75, "aumenta": 75, "proporcionalment": 75, "establecemo": 75, "t\u00edtulo": 75, "apagamo": 75, "nuestra": 75, "acci\u00f3n": 75, "b\u00e1sica": 75, "tenemo": 75, "negra": 75, "lista": [75, 78], "instruccion": 75, "oferta": 75, "mantien": 75, "asi": 75, "necesidad": [75, 77, 78], "meno": [75, 76], "querramo": 75, "esconderlo": 75, "tener": [75, 76, 77, 78], "bueno": 75, "\u00fanico": [75, 76, 78], "repetida": 75, "vece": [75, 76], "nuevo": [75, 78], "nos": 75, "brindar": 75, "resultado": 75, "hicimo": 75, "rellenar": 75, "verduzco": 75, "suel": [75, 76], "tre": 75, "soporta": [75, 78], "veas\u00e9": 75, "haremo": 75, "vemo": 75, "saltear": 75, "par": 75, "realizar": 75, "debemo": [75, 77], "renderizarlo": 75, "representarlo": 75, "buscamo": 75, "pegamo": 75, "creada": 75, "poner": [75, 76], "entonc": [75, 76, 78], "predeterminada": 75, "necesita": 75, "informaci\u00f3n": [75, 78], "quier": 75, "represetar": 75, "renderizar": 75, "apropiado": [75, 78], "pidiendo": 75, "cree": 75, "suavizado": 75, "lindo": 75, "suavidad": 75, "apariencia": 75, "gri": 75, "oscuro": [75, 76], "central": 75, "asignarlo": 75, "f\u00e1cilment": [75, 77], "blitteamo": 75, "copiamo": 75, "todav\u00eda": 75, "mostremo": 75, "esperamo": 75, "carguen": [75, 78], "otro": [75, 76, 77], "blittear": 75, "pegar": 75, "copiar": 75, "explica": 75, "rutina": [75, 78], "cambio": [75, 76], "hacen": 75, "inmediatament": 75, "normalment": 75, "actualizacada": 75, "pueda": [75, 76, 77], "realizado": 75, "perfecta": 75, "porqu": 75, "encarga": 75, "crearemo": 75, "necesitar": [75, 78], "encuentra": 75, "definida": 75, "conten": 75, "realidad": [75, 78], "contien": [75, 78], "avanzado": 75, "pertenec": 75, "exis": 75, "posibilidad": 75, "quisieramo": 75, "agregar": [75, 76], "sacar": 75, "ayudar": [75, 78], "frequencia": 75, "usarlo": 75, "demasiado": 75, "infinito": 75, "ejecutan": 75, "orden": 75, "computadora": 75, "dibujarlo": 75, "asegurar\u00e1": 75, "pasando": 75, "segundo": 75, "extremandament": 75, "trabajar": [75, 76, 78], "cola": 75, "obtenemo": 75, "recorremo": 75, "prueba": 75, "dej\u00f3": 75, "presion\u00f3": 75, "tecla": [75, 76], "configuramo": 75, "permitiendono": 75, "salir": 75, "verificamo": 75, "solt\u00f3": 75, "bot\u00f3n": 75, "haya": [75, 78], "presionado": 75, "preguntamo": 75, "choc\u00f3": 75, "decimo": 75, "empiec": 75, "actualizaci\u00f3n": 75, "dependiendo": 75, "cu\u00e1l": 75, "lado": 75, "lejo": 75, "recientement": 75, "indicado": 75, "momento": [75, 78], "borra": 75, "vimo": 75, "ligerament": 75, "ineficient": 75, "suficientemnt": 75, "contenedor": 75, "ya": [75, 76, 77, 78], "drawplain": 75, "sabe": 75, "voltear": 75, "contenido": [75, 78], "plano": 75, "dibujamo": 75, "visibilic": 75, "salido": 75, "hora": 75, "limpiar": 75, "limpieza": 75, "ejecuci\u00f3n": 75, "autom\u00e1ticament": [75, 77], "destruida": [75, 77], "realmnet": 75, "nada": [75, 76, 78], "\u00fanicament": [75, 77], "explicitament": [75, 77], "interna": 75, "\uac8c\uc784\ub3c4": [79, 86], "\ud504\ub85c\uadf8\ub7a8\uc758": [79, 80, 82], "\uc77c\ubd80\uc774\uae30": 79, "\ub54c\ubb38\uc5d0": [79, 80, 81, 82, 85], "\uac8c\uc784\uc740": [79, 82, 85], "\uc785\ub825": [79, 80, 81, 84], "\ucc98\ub9ac": [79, 80, 82], "\uadf8\ub9ac\uace0": [79, 80, 81], "\ucd9c\ub825\uc73c\ub85c": 79, "\uad6c\uc131\ub41c\ub2e4": 79, "\ucf58\uc194": 79, "\ud658\uacbd\uc5d0\uc11c": 79, "\uac8c\uc784\uc744": [79, 82, 86], "\ub9cc\ub4e0\ub2e4\uace0": 79, "\uac00\uc815\ud574": 79, "\ubcf4\uc790": [79, 86], "c\ub85c": 79, "\uc18c\uc2a4\ucf54\ub4dc\ub97c": [79, 80], "\uc791\uc131\ud55c": 79, "\ud6c4": [79, 82], "\ucf58\uc194\uc5d0\uc11c": 79, "\uc2e4\ud589\ud558\ub294": 79, "\ubc29\uc2dd": 79, "\uadf8\ub7ec\uba74": [79, 81, 85], "\uc785\ub825\uc740": [79, 84], "\uc218\ub9ce\uc740": 79, "\ub610\ub294": [79, 83, 86], "\uc5d4\ud130": 79, "\ud544\uc694": [79, 80], "\uc5c6\ub294": [79, 80, 86], "\ube44\ud45c\uc900": 79, "\ud568\uc218\ub85c": 79, "\ucc98\ub9ac\ub294": 79, "\ud56d\uc0c1": [79, 80, 82, 84], "\uc808\ucc28\uc801\uc73c\ub85c": 79, "\uc2e4\ud589\ub418\ub294": [79, 81], "\ubcf5\uc7a1\ud55c": 79, "\uc54c\uace0\ub9ac\uc998\uc73c\ub85c": 79, "\ucd9c\ub825\uc740": [79, 82], "\uc544\uc2a4\ud0a4\uc544\ud2b8\ub97c": 79, "\uc774\uc6a9\ud55c": 79, "\ud654\uba74\uc744": [79, 81], "\uc9c0\uc6b0\ub294": 79, "\uae5c\ube61\uac70\ub9ac\ub294": 79, "\uad6c\uc131\ud560": 79, "\uc218": [79, 80, 81, 82, 83, 84, 85, 86], "\uc788\ub2e4": [79, 80, 81, 82, 83, 84, 85, 86], "\ud558\uc9c0\ub9cc": [79, 80, 81, 83, 84, 86], "\uc774\ub807\uac8c": 79, "\ub9cc\ub4e0": 79, "\uad6c\uc2dd\uc774\uace0": 79, "\uadf8\ub798\ud53d": 79, "cui\uace0": 79, "\ub049\uaca8": 79, "\ubcf4\uc778\ub2e4\ub294": [79, 81], "\ub2e8\uc810\uc774": 79, "\uc774\ub7f0": [79, 82], "\uc2dd\uc758": 79, "\ub9cc\ub4dc\ub294": [79, 84, 86], "\uac83\uc774": [79, 80, 83, 84], "\uc9c8\ub9b0\ub2e4\uba74": 79, "\ubcf4\ud1b5": 79, "\uac8c\uc784\uc5d4\uc9c4\uc774\ub098": 79, "\uac8c\uc784\uc5d4\uc9c4": 79, "\ub4f1": [79, 82], "\uac8c\uc784": [79, 80, 81, 82, 85, 86], "\uc5d4\uc9c4\uc5d0\ub3c4": 79, "\uc190\uc744": 79, "\ub300\ubcf4\uac8c": 79, "\ub41c\ub2e4": [79, 80, 81, 82, 83, 84, 85, 86], "\uc5d4\uc9c4\uc740": 79, "\uc785\ubb38\uc7a5\ubcbd\uc774": 79, "\ub192\ub2e4\ub294": 79, "\ubcf5\uc18c\uc218\uc88c\ud45c\ub97c": 79, "\ud65c\uc6a9\ud55c": 79, "\uacf5\uac04\uc0c1\uc5d0\uc11c\uc758": 79, "\ucda9\ub3cc": 79, "mechanin": 79, "\uc560\ub2c8\uba54\uc774\uc158": [79, 81], "\ud638\ud658\uc131": 79, "\ub354": [79, 82, 83, 86], "\uc88b\uc740": [79, 84], "\uadf8\ub798\ud53d\uc744": 79, "\uc704\ud55c": [79, 80, 84, 85], "\ud070": [79, 82, 83, 84], "\uba54\ubaa8\ub9ac": 79, "\ube60\ub978": 79, "\uc544\ubb34\ub798\ub3c4": 79, "\ud658\uacbd\uacfc": 79, "\uc5d4\uc9c4": 79, "\uc0ac\uc774\uc5d0\ub294": 79, "\ub51c\ub808\ub9c8\uac00": 79, "\uc788\ub294": [79, 80, 84, 85, 86], "\uac83": [79, 80, 82], "\uac19\ub2e4": [79, 80, 86], "\uc774": [79, 80, 81, 82, 83, 84, 85, 86], "\ub51c\ub808\ub9c8\ub97c": 79, "\ud574\uacb0\ud560": 79, "\uc788\uc744\uae4c": [79, 80], "\ud658\uacbd": 79, "\uac8c\uc784\uc758": [79, 82], "\uc608\uc2dc": 79, "\ubfcc\uc694\ubfcc\uc694": 79, "\uc720\ub2c8\ud2f0": 79, "\ub2e4\ud589\ud788": 79, "\ud30c\uc774\uac8c\uc784\uc740": [79, 80], "\uadf8": [79, 80, 81, 83, 84, 85], "\uc774\ub780": 79, "\ud504\ub85c\uadf8\ub798\uba38\uac00": 79, "\ub9cc\ub4e4": [79, 83, 86], "\uc788\uac8c": [79, 80], "\ud574": 79, "\uc8fc\ub294": 79, "\ud30c\uc774\uc36c\uc758": [79, 80], "\uc678\ubd80": 79, "\ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4": 79, "\ud658\uacbd\uc5d0\uc11c\uc758": 79, "\uc7a5\uc810\uc744": 79, "\uac00\uc9c0\uace0": [79, 82, 85], "\uccab\uc9f8": [79, 84], "\uc7a5\uc810\uc740": 79, "\ud558\ub098\uc758": [79, 80, 81, 83, 86], "\ud504\ub85c\uc81d\ud2b8\uc740": 79, "\uc18c\uc2a4\ucf54\ub4dc\uc640": 79, "\uac70\uc758": [79, 80], "\ub3d9\uce58\uad00\uacc4\ub77c\ub294": 79, "\uac83\uc774\ub2e4": [79, 80, 81, 82, 83, 84, 85, 86], "\uc18c\ub9ac": [79, 82], "\ud30c\uc77c\uc774\ub098": 79, "\uc0ac\uc9c4": 79, "\ud30c\uc77c\uc744": [79, 80], "\uc81c\uc678\ud654\uba74": 79, "\uadf8\ub798\uc11c": [79, 80, 81], "\ud504\ub85c\uadf8\ub798\uba38\ub294": 79, "\uc18c\uc2a4": [79, 80, 81, 82], "\ucf54\ub4dc\ub97c": 79, "\uc791\uc131\ud558\ub294": 79, "\uac83\uc5d0\ub9cc": 79, "\uc9d1\uc911\ud558\uba74": 79, "\ub458\uc9f8": [79, 84], "\ud234\uc774": 79, "\uc544\ub2cc": [79, 80, 81, 83, 84, 85], "\ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\uae30": 79, "\uc18c\uc2a4\ud30c\uc77c\uc5d0": 79, "\ub9cc": 79, "\uc788\uc73c\uba74": 79, "\uc18c\uc2a4\ud30c\uc77c\uc740": 79, "\ud30c\uc774\uac8c\uc784\uc758": [79, 80, 81, 86], "\ubaa8\ub4e0": [79, 80, 82, 85, 86], "\uac83\uc5d0": [79, 81, 82], "\uc811\uadfc\ud560": 79, "\uc811\uadfc\uc131\uc774": 79, "\uc88b\ub2e4\ub294": 79, "\uc5d4\uc9c4\uc758": 79, "\uc7a5\uc810\ub3c4": 79, "\ud30c\uc774\uac8c\uc784\uc774": [79, 80], "\ud0a4\ubcf4\ub4dc": [79, 82, 83], "\ub9c8\uc6b0\uc2a4": [79, 82, 84], "\ud30c\uc77c": 79, "\ub4f1\uc758": 79, "\uc0c1\ud0dc\ub97c": 79, "\ud655\uc778\ud558\ub294": [79, 83], "\uad00\ub828": 79, "\ud568\uc218\ub4e4\uacfc": 79, "\ub3c4\ud615": 79, "\uadf8\ub9ac\uae30": 79, "\uc0c9": [79, 80, 83], "\uce60\ud558\uae30": 79, "\ub514\uc2a4\ud50c\ub808\uc774": 79, "\uc124\uc815": 79, "\ucd9c\ub825": [79, 82, 83, 85, 87], "\ud568\uc218\ub4e4\uc744": [79, 80], "\uc81c\uacf5\ud558\uae30": 79, "cui\uac00": 79, "\uc2e4\ud589\ub41c\ub2e4\ub294": 79, "\ud30c\uc774\uc36c\uc5d0": 79, "\uae30\ubc18\ud558\uc600\uae30": 79, "\ud568\uc218\ub4e4\uc740": [79, 80], "\uc808\ucc28\uc801\uc774": 79, "\uc774\ubca4\ud2b8\uc801": 79, "\uc5ec\ub7ec": 79, "\ud568\uc218\ub4e4\uc774": 79, "\uc120\ud0dd\uc801\uc73c\ub85c": 79, "\uc2e4\ud589\ub418\uac70\ub098": 79, "\ub3d9\uc2dc\uc5d0": 79, "\uc2e4\ud589\ub428": 79, "\uc73c\ub85c": [79, 80], "\ubc30\ud2c0\uc2ed": 79, "\uc694\uc57d\ud558\uc790\uba74": 79, "\uc800\uae09": 79, "\uc218\uc900": 79, "\ud658\uacbd\uc740": 79, "\uc911": [79, 81], "\ud558\ub098": 79, "\uc758": 79, "\uc81c\uc791": 79, "\ud504\ub85c\uadf8\ub7a8\uacfc": 79, "\uace0\uae09": 79, "\ubaa8\ub450": [79, 80], "\uac00\uc9c4\ub2e4\ub294": 79, "\ub458": 79, "\uc0ac\uc774\uc758": 79, "\uc5f0\uacb0\uc810\uc774": 79, "\uc774\uac83\uc774": [79, 80, 86], "\ud30c\uc774\uac8c\uc784\uc744": 79, "\uc4f8": 79, "\uc774\uc720\uc774\ub2e4": [79, 82, 86], "\uc5d4\uc9c4\uc744": 79, "\ucd5c\ub300\ud55c": 79, "\ud65c\uc6a9\ud574": 79, "1\uc778": 79, "\uac1c\ubc1c\uc790\uac00": 79, "\ubaa9\ud45c\uac00": 79, "\uc774\uc0c1": [79, 81], "\ube68\ub9ac": 79, "\ubc30\uc6b0\ub294": [79, 80], "\ub0ab\ub2e4": 79, "\ud658\uacbd\uc6a9": 79, "\uac8c\uc784\uc774": [79, 81, 82, 84, 85, 86], "\ubc1c\uc804\ub41c": 79, "\ud55c\ubc88\ucbe4\uc740": 79, "\ucf54\ub529\ud574": 79, "\ubcf4\uace0": 79, "\uc2f6\ub2e4\uba74": 79, "\ubb3c\ub860": [79, 80, 81, 82, 83], "\ud479": 79, "\ube60\uc9c0\uba74": 79, "\uacc4\uc18d": [79, 80, 82], "\ucf54\ub529\ud558\uac8c": 79, "\ub420": [79, 81, 83, 84], "\uc2dc\ub3c4\ud574": 79, "\ubcfc\ub9cc": 79, "\ud558\ub2e4": 79, "\uc55e\uc11c": 80, "\ub9d0\ud588\ub4ef": 80, "gui\ub97c": 80, "\uae30\ubc18\uc73c\ub85c": 80, "\ud55c\ub2e4": [80, 81, 82, 83, 84, 85], "\uc815\ud655\ud788\ub294": 80, "2d\uc6a9": 80, "\ud568\uc218\ub97c": [80, 83], "\uc0ac\uc6a9\ud558\uc5ec": 80, "\uc5b4\ucc0c\ub410\ub4e0": 80, "cui\ud658\uacbd\uc5d0\uc11c\ub9cc": 80, "\uba39\ud788\ub294": 80, "print\ud568\uc218\ub098": 80, "input\ud568\uc218\uc640\ub294": 80, "\uc774\ubcc4\uc744": 80, "\ud574\uc57c": [80, 83], "\uadf8\ub807\ub2e4\uba74": [80, 81], "\uc5b4\ub5a4": [80, 86], "\ud568\uc218\uac00": [80, 81], "input\ud568\uc218\ub97c": 80, "\ub300\uccb4\ud558\ub294\uac00": 80, "\uc6b0\uc120": [80, 81, 82, 83, 85], "\ud504\ub85c\uadf8\ub798\ubc0d": 80, "\uc5b8\uc5b4\uc758": 80, "\ucd9c\ub825\uc744": [80, 81, 84], "\uce5c\uc219\ud55c": 80, "\uc608\uc81c\uc778": 80, "\ud504\ub85c\uc81d\ud2b8\ub85c": 80, "\ub418\ub3cc\uc544\uac00\uc57c": 80, "\ud504\ub85c\uc81d\ud2b8\ub294": [80, 81, 82], "\uac19\uc740": [80, 81, 86], "\ub514\ub809\ud1a0\ub9ac\uc5d0": 80, "ttf\ud655\uc7a5\uc790\ub97c": 80, "\uac00\uc9c0\ub294": 80, "\ud3f0\ud2b8": 80, "\ud544\uc694\ub85c": 80, "\ud504\ub85c\uc81d\ud2b8\uc758": [80, 81, 82], "\ucf54\ub4dc\uc640": 80, "\uc2e4\ud589": [80, 81, 82, 85], "\uacb0\uacfc": [80, 81, 82], "1\uc904\uc9dc\ub9ac": 80, "\uc5d0": 80, "\ube44\ud558\uba74": 80, "\ucf54\ub4dc\uac00": 80, "\uaf64": 80, "\ubcf5\uc7a1\ud558\ub2e4": 80, "\uc774\uac83\uc740": [80, 81, 85], "gui\ud658\uacbd\uc5d0\uc11c": 80, "\ud14d\uc2a4\ud2b8\ub294": 80, "\ucd5c\uc18c": 80, "5\uac1c\uc758": 80, "\uad6c\uc131": 80, "\uc131\ubd84": 80, "\ud14d\uc2a4\ud2b8": [80, 87], "\ub0b4\uc6a9": 80, "\ud06c\uae30": 80, "\uc0c9\uc0c1": [80, 83], "\uc88c\ud45c": 80, "\ub97c": [80, 81, 82, 84], "\uac00\uc9c0\uae30": 80, "\ub54c\ubb38\uc774\ub2e4": [80, 81, 82, 84, 85], "1\uac1c\uc758": 80, "\ub9cc\uc744": [80, 83], "\uac00\uc9c0\ubbc0\ub85c": [80, 83], "4\uac1c\uc758": [80, 83], "\uc131\ubd84\uc774": 80, "\ucd94\uac00\ub41c": 80, "\uc148\uc774\ub2e4": 80, "\uc608\uc678\uc801\uc73c\ub85c": 80, "7\uc758": 80, "\ud568\uc218\ub294": [80, 81, 84, 85], "\ud568\uc218\uc640": [80, 81], "\ub3d9\uc77c\ud55c": [80, 83, 84], "\uae30\ub2a5\uc744": [80, 81], "\ud568\uc218": [80, 81], "\uc18d": 80, "\ubb38\uc790\uc5f4\uc740": 80, "\uc708\ub3c4\uc6b0": 80, "\ucea1\uc158\uc5d0": 80, "\uace0\uc815\ub41c": 80, "\ubb38\uc790\uc5f4\uc774\ub2e4": 80, "\ubb34\uc5b8\uac00\ub97c": [80, 82], "\ucd9c\ub825\ud558\uae30": 80, "\uc704\ud574\uc120": 80, "\uc18c\uc2a4\ucf54\ub4dc\uac00": 80, "\uc5b4\ub5bb\uac8c": [80, 81, 83, 84, 85], "\uc791\uc131\ub418\uc5b4\uc57c": 80, "\ud558\ub294\uc9c0": 80, "\ud615\uc2dd\uc744": 80, "\uc0b4\ud3b4\ubcf4\uc790": 80, "\uc18c\uc2a4\ucf54\ub4dc\ub294": 80, "\ubd80\ubd84\uc73c\ub85c": 80, "\ub098\ub220\uc9c8": 80, "initial\ubb38": 80, "always\ubb38": [80, 81], "event\ubb38": [80, 82], "\uac00": [80, 81, 85], "\uadf8\uac83\uc774\ub2e4": 80, "header\uc5d0\uc120": 80, "\ubaa8\ub4c8\ub4e4\uc744": 80, "import\ud558\ub294": 80, "\uc791\uc5c5\uc774": 80, "\uc2e4\ud589\ub41c\ub2e4": 80, "\uc5ec\uae30\uc5d0": 80, "sys\ub294": 80, "\ud544\uc694\ud558\ub2e4": [80, 82], "\ud504\ub85c\uc81d\ud2b8\uac00": [80, 82], "\ud30c\uc774\uac8c\uc784": [80, 85], "\ud504\ub85c\uc81d\ud2b8\uc774\uba70": 80, "\uc0ac\uc6a9\uc790\uac00": [80, 84], "\ud504\ub85c\uadf8\ub7a8\uc744": [80, 81, 83, 86], "\uc885\ub8cc\ud558\uace0": 80, "\uc2f6\uc744": 80, "\ub54c": [80, 81, 83, 85, 86], "\uc885\ub8cc\ub418\uc5b4\uc57c": 80, "\ud558\uae30": [80, 82], "\uc2e4\uc81c\ub85c": 80, "19\uc5d0\uc11c": 80, "\ucd94\uac00\uc801\uc778": [80, 81, 82, 83], "\uc124\uba85\uc774": 80, "\ub2f9\uc5f0\ud55c": 80, "\ubb38\uad6c\uc774\ub2e4": 80, "\ub294": 80, "17\uc5d0\uc11c\uc758": 80, "quit\uac19\uc740": 80, "\uc720\uc6a9\ud55c": 80, "\uc0c1\uc218\ub4e4\uc744": 80, "\uc120\uc5b8": 80, "\uc5c6\uc774": [80, 82], "\uc0ac\uc6a9\ud558\uae30": 80, "\uc704\ud574": [80, 82, 86], "\ubc18\ud544\uc218\uc801\uc73c\ub85c": 80, "\ubb34\ud55c": 80, "\ubc18\ubcf5\ubb38": 80, "\uc774\uc804\uc758": [80, 82, 84], "\ubb38\uc7a5\ub4e4": 80, "\uc5d0\uc120": 80, "\uc804\uc5ed": 80, "\ubcc0\uc218\uac00": [80, 81, 83, 84], "\ud55c\ubc88\ub9cc": 80, "\ucd08\uae30\ud654\ub418\uac70\ub098": 80, "\uba87\uba87": [80, 82], "\ud638\ucd9c\ub41c\ub2e4": 80, "\uc8fc\ub85c": 80, "\uc0c9\uc0c1\uacfc": 80, "\ubcc0\uc218\ub4e4\uc774": 80, "\uac00\ub3c5\uc131\uc744": 80, "\ub192\uc774\uae30": 80, "\ucd08\uae30\ud654\ub41c\ub2e4": 80, "\uc5ec\ub7ec\uac00\uc9c0": 80, "\uc0c9\uc0c1\uc744": [80, 85], "\uc0ac\uc6a9\ud558\ub294": 80, "\ud654\ub824\ud55c": 80, "gui\uc784\uc744": 80, "\uae4c\uba39\uc5b4\uc120": 80, "\uc548\ub41c\ub2e4": 80, "\uac8c\uc784\uc774\ubbc0\ub85c": 80, "\uc0c9\uc0c1\uc740": [80, 85], "r\uac12": 80, "g\uac12": 80, "b\uac12": 80, "3\uac1c\uc758": [80, 83], "\uc694\uc18c\ub97c": 80, "\uac00\uc9c4\ub2e4": [80, 84], "\ubcc0\uc218\ub294": [80, 83], "\uc640": [80, 81, 82, 84, 86], "\uac19\uc774": [80, 83], "\uc120\uc5b8\ub418\uc5b4\uc57c": 80, "\uacfc": [80, 84], "\ub098\uc911\uc5d0": [80, 81, 82], "\uc0ac\uc6a9\ud560": 80, "\uac00\uc7a5": [80, 83, 86], "\uc55e\uc11c\uc11c": 80, "\ud638\ucd9c\ub418\uc5b4\uc57c": 80, "\uc678\uc758": 80, "\uc5b8\uae09\ud558\uaca0\ub2e4": 80, "\uc5c5\ub370\uc774\ud2b8\ub418\uac70\ub098": 80, "\uc870\uac74\ubb38\uc774": 80, "\uacbd\uc6b0": [80, 82, 83, 84], "\uc870\uac74\uc774": 80, "\ub9de\uc744": 80, "\ub54c\ub9cc": 80, "\ub77c\ub294": [80, 86], "\uc77c\ubc18\uc801\uc73c\ub85c": 80, "\ub2e4\ub978": [80, 82, 86], "\ubcc0\uc218": [80, 83, 84], "\ud568\uc218\uc758": 80, "\ucc98\ub9ac\uac00": [80, 81], "\ub05d\ub09c": 80, "\uc774\ud6c4\uc5d0": 80, "\ud638\ucd9c\ub418\ub294\ub370": 80, "\ucc98\ub9ac\uc758": 80, "\uacb0\uacfc\ubb3c\ub4e4\uc744": 80, "\uc2a4\ud06c\ub9b0": 80, "\ubaa8\ub2c8\ud130": 80, "\ucd9c\ub825\ud558\ub294": [80, 82, 83, 85], "\ud568\uc218\uc774\uae30": 80, "\ub9c8\uc9c0\ub9c9\uc5d0": 80, "\uc2e4\ud589\ub418\uc9c0": 80, "\uc54a\uc73c\uba74": 80, "\ucd9c\ub825\ub418\ub294": 80, "\ud654\uba74\uacfc": 80, "\ub0b4\ubd80": [80, 82], "\ub370\uc774\ud130\uac00": 80, "\uc11c\ub85c": 80, "\uc77c\uce58\ud558\uc9c0": 80, "\uc54a\ub294": [80, 81], "\ubb38\uc81c\uac00": [80, 81], "\uc0dd\uae38": 80, "\uc774\ubca4\ud2b8\ub97c": [80, 82, 84], "\uccb4\ud06c\ud558\ub294": 80, "\ud2b9\uc815": [80, 81, 84], "\uc774\ubca4\ud2b8\uac00": [80, 82], "\ubc1c\uc0dd\ud558\uba74": 80, "\uc774\uc5d0": 80, "\ub300\ud55c": 80, "\uc774\ub8e8\uc5b4\uc9c4\ub2e4": [80, 83], "always\ubb38\uc5d0\uc11c": 80, "\ubc1c\uc0dd\ud55c": 80, "\uc774\ubca4\ud2b8\ub4e4\uc758": 80, "\ubc30\uc5f4\uc744": [80, 85], "\ubc18\ud658\ud55c\ub2e4": [80, 85], "\uc774\ubca4\ud2b8\ub4e4\uc740": 80, "\uc790\ub3d9\uc801\uc73c\ub85c": [80, 81], "\ubc1c\uc0dd": 80, "\uc2dc\uac04\uc21c\uc73c\ub85c": 80, "\uc815\ub82c\ub41c\ub2e4": 80, "\uadf8\ub7ec\ubbc0\ub85c": [80, 81, 84, 86], "in\ubb38\uc744": 80, "\uc4f0\uba74": 80, "\uc774\ubca4\ud2b8\ub4e4\uc744": 80, "\uc21c\ucc28\uc801\uc73c\ub85c": 80, "\ucc98\ub9ac\ud560": 80, "\uae30\ubc18": 80, "\uc608\ub97c": [80, 83], "\ub4e4\uc5b4\uc11c": 80, "19\ub294": 80, "quit\ub77c\ub294": 80, "\ucc98\ub9ac\ud558\uace0": 80, "\ud2b8\ub9ac\uac70\ub418\uba74": 80, "\uc885\ub8cc\ub41c": 80, "\uc774\ud6c4": 80, "\uc2dc\uc2a4\ud15c\uc774": 80, "\uc885\ub8cc\ub418\uac8c": 80, "\ud615\uc2dd\uc774": 80, "\uace0\uc815\ub418\uc5b4": [80, 83], "\uc788\ub2e4\uace0": 80, "\uac00\uc815\ud558\uba74": 80, "\ud615\uc2dd\uc5d0": 80, "\uc77c\ubd80": [80, 81, 82], "\uc801\uc808\ud788": 80, "\uc0bd\uc785\ud558\uba74": 80, "\ucd9c\ub825\ub418\uac8c": 80, "\ud560": [80, 81, 83, 86], "\uccab\uc9f8\ub85c": 80, "\ud14d\uc2a4\ud2b8\uc758": [80, 81], "\ud3f0\ud2b8\uc640": 80, "\ud06c\uae30\uac00": 80, "\uc815\ud574\uc838\uc57c": 80, "9\uc758": 80, "\uc8fc\uc5b4\uc9c4": 80, "\uc774\ub984\uc758": 80, "ttf\ud30c\uc77c\ub85c": 80, "\ud3f0\ud2b8\ub97c": 80, "\uc815\ud558\uace0": 80, "\ub3c4": [80, 82], "\uc815\ud55c\ub2e4": 80, "\ubc18\ud658": 80, "\uac12\uc740": [80, 83], "mytextfont\ub77c\ub294": 80, "\uac1d\uccb4\uc5d0": 80, "\uc800\uc7a5\ud574": 80, "\ub450\uc5c8\ub2e4": 80, "mytextfont\uac1d\uccb4\uc758": 80, "10\uc758": 80, "\uac12\uc744": [80, 83, 84], "mytext\ub77c\ub294": 80, "\ub0b4\uc6a9\uacfc": 80, "\uc815\ud560": [80, 81], "\ube68\uac04": [80, 83, 85], "\ud14d\uc2a4\ud2b8\uac00": [80, 83], "\uad6c\uc5ed\uc758": 80, "\ucd08\ub85d": 80, "\uc0c9\uc774": 80, "mytext\uac1d\uccb4\uc758": 80, "11\uc758": 80, "mytextarea\ub77c\ub294": 80, "\ub450\ub294\ub370": 80, "mytextarea\ub294": 80, "\ud14d\uc2a4\ud2b8\ub97c": [80, 81, 83], "\ud560\ub2f9\ub41c": 80, "\uad6c\uc5ed\uc744": 80, "\uc758\ubbf8\ud55c\ub2e4": [80, 81, 82], "\ud06c\uae30\uc640": 80, "\uae38\uc774\ub97c": 80, "\uace0\ub824\ud558\uc5ec": 80, "\uc801\uc808\ud55c": [80, 81, 82, 84], "\uc9c1\uc0ac\uac01\ud615": 80, "\uacf5\uac04\uc744": [80, 84], "\ub9cc\uc57d": [80, 83, 84, 86], "\uac1d\uccb4\uc758": 80, "center\ub77c\ub294": 80, "\uba64\ubc84": 80, "\ubcc0\uc218\ub97c": [80, 81, 83, 84], "\ud654\uba74": [80, 83], "\uc815\uc911\uc559\uc5d0": 80, "\uc624\uac8c\ub054": 80, "\uc218\uc815\ud55c\ub2e4\uba74": 80, "\uc704\uce58\ub97c": 80, "\uc815\uc911\uc559\uc73c\ub85c": 80, "\uc624\uac8c": 80, "\uc54c": [80, 84, 85], "\uc815\uc911\uc559\uc744": 80, "\uc54c\uc544\ub0bc": [80, 81], "\ud654\uba74\uc758": 80, "\uc804\uccb4": [80, 85], "\ud06c\uae30\ub97c": [80, 85], "\uc815\ud574\uc57c": 80, "8\uc758": 80, "\uce94\ubc84\uc2a4": [80, 83], "\uc704\uce58": [80, 83], "\uc815\ubcf4\ub97c": 80, "update\ud568\uc218\uac00": 80, "\ud638\ucd9c\ub418\uba74": 80, "\uadf8\ub824\uc9c0\ub294": 80, "\uacf5\uac04": 80, "\uc0dd\uc131\ud558\uace0": 80, "480\uc73c\ub85c": 80, "\uace0\uc815\uc2dc\ud0a8\ub2e4": 80, "\uc815\uc911\uc559\uc740": 80, "\uc774\ub2e4": 80, "\ud655\uc815\ub41c\ub2e4\uba74": 80, "\uc57d\uac04\uc758": 80, "\uacc4\uc0b0\ub9cc": 80, "\ud558\uba74": [80, 81, 83], "\uc885\ub958\uc758": 80, "\uacb0\uc815\ud560": 80, "gui\uc774\ubbc0\ub85c": 80, "\uac83\uc740": [80, 81, 82, 83, 84, 86], "y\uc131\ubd84\uc744": 80, "\uc624\ub978\ucabd\uc774": 80, "x\uc88c\ud45c\uac00": 80, "\ud06c\uace0": 80, "\uc544\ub798\ucabd\uc774": 80, "y\uc88c\ud45c\uac00": 80, "\ud07c\uc744": 80, "\ud5f7\uac08\ub9ac\uba74": 80, "\ub9d0\ud55c": 80, "initial\ubb38\uc5d0": 80, "\uc2e4\ud589\ub418\uc5b4\uc57c": 80, "\ud558\ub294": [80, 81, 84], "\uac83\ub4e4\uc774\ub2e4": 80, "\uc65c\ub098\ud558\uba74": 80, "\uc815\ubcf4\ub4e4\uc740": 80, "\ud504\ub85c\uadf8\ub7a8": [80, 81], "\ub3c4\uc911": 80, "\uc5c5\ub370\uc774\ud2b8\uac00": 80, "\uc5c6\uae30": [80, 81, 82], "fill\ud568\uc218\ub098": 80, "blit\ud568\uc218\ub294": 80, "\ud2b9\uc131": [80, 85], "always\ubb38\uc5d0": [80, 81], "14\uc758": 80, "\uce94\ubc84\uc2a4\ub97c": 80, "\ub2e8\uc0c9": 80, "\ud558\uc580\uc0c9": 80, "\ucc44\uc6b0\ub294": 80, "\uc218\ud589\ud55c\ub2e4": 80, "15\uc758": 80, "\uac1d\uccb4": [80, 82], "\uadf8\ub9ac\ub294": [80, 83], "blit\uc774": 80, "\uc218\ud589\ub418\uc5b4\uc57c": 80, "\uce94\ubc84\uc2a4\uc5d0": 80, "\uadf8\ub824\uc9c0\uace0": 80, "\ub098\uba74": 80, "\uce94\ubc84\uc2a4\uc758": 80, "\uacb0\uacfc\ubb3c\uc740": 80, "\uc2e4\ud589\ub418\uba74": 80, "20\uc904\uc9dc\ub9ac": 80, "\uc124\uba85\uc774\uc5c8\ub2e4": 80, "\uc18c\uc2a4\ucf54\ub4dc": 80, "\uce58\uace4": 80, "\uc791\ub3d9": 80, "\uc6d0\ub9ac\ub97c": 80, "\uc774\ud574\ud558\ub294": 80, "\ub370": 80, "\uc2dc\uac04\uc774": [80, 86], "\uc624\ub798": 80, "\uac78\ub9ac\ub294": 80, "\uc18c\uc2a4\ucf54\ub4dc\uc5d0": 80, "\ucd94\uac00\ud558\uac70\ub098": 80, "\uc218\uc815\ud558\ub294": 80, "\uadf8\ub2e4\uc9c0": 80, "\uc5b4\ub835\uc9c0": 80, "\uc54a\uc744": [80, 81], "\uc18c\uc2a4\ucf54\ub4dc\uc758": 80, "\ub2e8\uacc4\ub97c": 80, "\uc774\ud574\ud588\ub2e4\uba74": 80, "\ub9d0\uc774\ub2e4": 80, "\ub85c\uc9c1\uc744": [80, 82], "\ucd94\uac00\ud558\ub294": [80, 82], "\uc5b4\ub5a8\uae4c": [80, 84], "\ub2e4\uc74c": [80, 83, 84, 85], "\ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c": 80, "\uc9c4\ud589\ub420": 80, "\ucc38\uace0": [80, 81, 82, 83, 84, 85], "\ucf54\ub4dc": [80, 81, 82, 83, 84, 85], "\uc774\uc804": [81, 82], "\uc544\ub2c8\ub77c": 81, "\uc774\ubbf8\uc9c0": [81, 82, 85], "\ud55c": [81, 84, 86], "\uc7a5": 81, "\uac19\uc544": [81, 85], "\ubcf4\uc778\ub2e4": 81, "\ubc14\uafb8\ub294": 81, "\uc785\ub825\uc774\ub098": 81, "\uc708\ub3c4\uc6b0\uc758": 81, "\uc885\ub8cc": 81, "\ubc84\ud2bc\uc744": [81, 84, 85], "\ub204\ub974\ub294": 81, "\uace0\ub824\ub418\uc9c0": 81, "\uc54a\ub294\ub2e4": [81, 82, 83, 85], "\uc885\ub8cc\ud558\ub294": 81, "\ubd88\uacfc\ud558\ubbc0\ub85c": 81, "\uc6b0\ub9ac\ub294": [81, 82, 85, 86], "\uc6c0\uc9c1\uc774\uac8c": 81, "\uc774\uc81c": [81, 82, 84, 85, 86], "\uc7a5\uc774": 81, "\ubcf4\uc77c": 81, "\uc6c0\uc9c1\uc77c\uae4c": 81, "\uc704\uce58\uac00": 81, "statement\uc5d0\uc11c": 81, "\ucd08\uae30\ud654\ub428\uc744": 81, "\uc54c\uace0": [81, 82], "\uc5c5\ub370\uc774\ud2b8\ub418\uac8c": 81, "\ud544\uc694\ud560": 81, "world\uac00": [81, 82], "\uc54c\uce74\ub178\uc774\ub4dc\uc758": 81, "\uacf5\uc774\ub098": 81, "\ud654\uba74\ubcf4\ud638\uae30\ucc98\ub7fc": 81, "\uc6c0\uc9c1\uc778\ub2e4": [81, 82], "5\uac00": 81, "initial\ubb38\uc758": 81, "\ub4b7\ubd80\ubd84\uc5d0": 81, "\ucd94\uac00\ub418\uc5c8\ub2e4": [81, 84], "\ub610\ud55c": [81, 85], "\ub2e4\uc911": 81, "else\ubb38\uc740": 81, "always\ubb38\uc758": 81, "\uc55e\ubd80\ubd84\uc5d0": 81, "\ucd94\uac00\ub418\uc5c8\uace0": 81, "11\uc774": 81, "10\uc774": 81, "\ubb34\uc5c7\uc744": 81, "\ucc98\ub9ac\ud558\ub294\uc9c0\ub294": 81, "\uc27d\ub2e4": [81, 82, 84], "always\ubb38\uc774": 81, "\uc2dc\uc791\ub420": 81, "world\uc758": 81, "\uc88c\ud45c\uc5d0": 81, "\ud574\ub2f9\ub418\ub294": 81, "\ubc14\uafb8\uace0": 81, "world\ub294": 81, "\uc5bc\ub9c8\ub098": 81, "\ube60\ub97c\uae4c": 81, "\ubcc0\uc704\ub294": 81, "\ub8e8\ud2b82": 81, "\uc784\uc740": 81, "\ud655\uc2e4\ud558\ub2e4": 81, "\ud53c\ud0c0\uace0\ub77c\uc2a4": 81, "\uc815\ub9ac\ub97c": 81, "\uc774\uc6a9\ud558\uba74": 81, "\uc790\uc8fc": 81, "\ubcc0\uc704\uac00": 81, "\ubc14\ub00c\ub294\uac00": 81, "\uc2dc\uac04": [81, 82, 85], "\ubcf5\uc7a1\ub3c4\ub97c": 81, "\ubd84\uc11d\ud558\uc9c0": 81, "\uc5c6\ub2e4": [81, 82, 85], "\uc2dc\uc791\ud558\ub294": 81, "\ube48\ub3c4\uc5d0": 81, "\ub530\ub77c": [81, 85], "\ub2ec\ub77c\uc9c0\ubbc0\ub85c": 81, "\ubcf5\uc7a1\ub3c4\ub294": 81, "\ucef4\ud4e8\ud130\ub9c8\ub2e4": 81, "\ub2e4\ub974\ub2e4": 81, "\uc2dc\uac04\uc740": 81, "\uace0\uc815\ub420": 81, "\ud504\ub85c\uc81d\ud2b8\uc5d0": 81, "\uace0\uc815": 81, "\uc18d\ub3c4\ub77c\ub294": 81, "\uac1c\ub150\uc744": 81, "\ucd94\uac00\ud574\uc57c": 81, "1\uacfc": 81, "11\uc744": 81, "\ubcf4\uba74": [81, 84], "statement\uc5d0": 81, "\uc788\uc74c\uc744": [81, 82, 84], "\ud655\uc778\ud560": [81, 82, 83], "60\uc774\ub77c\ub294": 81, "\uc218\ub294": [81, 86], "\uc5ec\uae30\uc11c": 81, "fps\uac00": 81, "1\ucd08\uc5d0": 81, "\ubc14\ub00c\ub294\uc9c0\ub97c": 81, "\uc5c5\ub370\uc774\ud2b8\ud558\ub294": [81, 82, 84], "\ubb34\uc5c7\uc778\uac00": [81, 83, 86], "\ubc14\ub85c": [81, 86], "\ud568\uc218\uc774\ub2e4": 81, "fps\ub294": 81, "\ud69f\uc218\ub97c": 81, "\uc758\ubbf8\ud558\uac8c": [81, 84], "\uc774\ub294": [81, 82], "\uc18d\uc5d0\ub294": 81, "\ub2e8": 81, "\uc874\uc7ac\ud558\uae30": 81, "\uc77c\uc885\uc758": 81, "\uc120\ud0dd\uc801\uc778": 81, "\ub51c\ub808\uc774": 81, "\uae30\ub2a5": 81, "\uc18d\ub3c4\uc5d0": 81, "\uc744": [81, 82, 85], "\uac00\uc18d": 81, "\uc544\ub2c8\ubbc0\ub85c": 81, "fps\uac12\uc774": 81, "\ub108\ubb34": 81, "\ud06c\uba74": 81, "fps\ub300\ub85c": 81, "\uc791\ub3d9\ud558\uc9c0": 81, "\uc6b0\ub9ac\uac00": 81, "\ud504\ub85c\uc81d\ud2b8": 81, "\ub0b4\uc5d0\uc11c": [81, 85, 86], "\uace0\uc815\uc2dc\ucf1c": 81, "\ub450\uba74": 81, "\uc624\ube0c\uc81d\ud2b8\uc758": 81, "\ubcc0\uc704\ub9cc": 81, "\ucc3e\uc544\ub0b4\uba74": 81, "\uc18d\ub3c4\ub97c": 81, "\uc740": 81, "\uc2dc\uc791\ub418\uae30": 81, "\uace0\uc815\uc2dc\ud0a4\ub294": 81, "tick\ud568\uc218\ub294": 81, "\ubcf4\ub2e4": 81, "\uc640\uc57c": 81, "\uc65c\ub0d0\ud558\uba74": [81, 82], "\uba87": 81, "\ubc88": 81, "\uc5c5\ub370\uc774\ud2b8\ub418\uc5c8\ub294\uc9c0\ub97c": 81, "\uacc4\uc0b0\ud558\uae30": 81, "\ud568\uc218\ubcf4\ub2e4": 81, "\uc2e4\ud589\ub418\uc57c": 81, "\uc548\ub418\ub294": 81, "\ud558\ub098\uc774\ub2e4": 81, "\uc5c5\ub370\uc774\ud2b8": 81, "\uc2dc\uac04\uc744": [81, 86], "\uace0\uc815\ud558\ub294": 81, "\ubc29\ubc95\uc744": [81, 82], "\uc54c\uc558\ub2e4": 81, "\uc815\uc9c0\ub41c": 81, "\ud654\uba74\ubcf4\ub2e4\ub294": 81, "\uc815\uc2e0\uc5c6\uc774": 81, "\uc6c0\uc9c1\uc774\ub294": 81, "\uac8c\uc784\uc5d0\uc120": 81, "\ub9ce\uc73c\ubbc0\ub85c": 81, "\uc774\ub97c": 81, "\ubc18\ub4dc\uc2dc": [81, 82], "\uc788\uc5b4\uc57c": 81, "\uadf8\ub7ec\ub098": [81, 82, 86], "\uacb0\uacfc\uac00": 81, "\uc27d\uac8c": [81, 83], "\uc608\uce21\ub418\uae30": 81, "\uac83\ucc98\ub7fc": [81, 84], "\ub2e8\uc810\uc740": 81, "\uc544\uc9c1\ub3c4": [81, 84], "\uacb0\uacfc\ub97c": 81, "\ubc14\uafc0": 81, "\uc785\ub825\uc774": [81, 82], "\uc5c6\uc73c\ubbc0\ub85c": [81, 84], "\uc774\uc820": 81, "\ub85c\uc9c1\uc774": 81, "\ucd94\uac00": 81, "\ub418\uc5b4\uc57c\ub9cc": 81, "\uc0dd\uac01\ud574\ubcf4\uba74": 82, "\uba3c\uc800": [82, 83], "\ubc30\uc6b0\uace0": [82, 86], "\uc0dd\uac01\ud574\ubd10\ub77c": 82, "\uc785\ub825\ud558\ub294": 82, "\ubc29\ubc95\uc740": [82, 83], "\ubc30\uc6b4\ub2e4": 82, "\uc65c": 82, "\uadf8\ub7f0\uac00": 82, "\uc65c\ub0d0\uba74": 82, "\ud504\ub85c\uadf8\ub7a8\uc5d0\uc120": 82, "\ud544\uc218\uc870\uac74\uc774": 82, "\uc544\ub2c8\uc9c0\ub9cc": 82, "\ud544\uc218\uc870\uac74\uc774\uae30": 82, "\uc815\uc758": 82, "0\uac1c": [82, 83], "\uc774\uc0c1\uc758": 82, "1\uac1c": 82, "\uadf8\uac83\uc774": [82, 86], "\ub098\ub294": 82, "play\ud55c\ub2e4": 82, "\ub77c\uace0": [82, 86], "\ub9d0\ud558\ub294": 82, "play\ub77c\ub294": 82, "\ub2e8\uc5b4\ub294": 82, "\ubab8\uc758": 82, "\uc77c\ubd80\ubd84": 82, "\uc544\ub9c8\ub3c4": 82, "\uc190\uac00\ub77d": 82, "\uc6c0\uc9c1\uc778\ub2e4\ub294": 82, "\ub73b\uc774\ub2e4": 82, "\uc5b4\uca0c\ub4e0": 82, "\uc9c4\uc9dc": 82, "\ub418\uae30": 82, "\ucd94\uac00\ud574\ubcf4\uc790": 82, "\ubc29\ud5a5\ud0a4\ub97c": 82, "\ub204\ub974\uba74": 82, "\ud574\ub2f9": 82, "\ubc29\ud5a5\uc73c\ub85c": 82, "\ud504\ub85c\uc81d\ud2b8\uc640": 82, "\ube44\uad50\ud558\uc5ec": 82, "2\uac1c\uc758": 82, "\ucc28\uc774\uc810\uc774": 82, "\uc0dd\uacbc\ub2e4": 82, "\uccab\uc9f8\ub294": 82, "5\uc5d0": 82, "kewdown": [], "\ud2b8\ub9ac\uac70": 82, "\ub418\uc5c8\ub294\uc9c0": 82, "\uc544\ub2cc\uc9c0\ub97c": 82, "\ud310\ub2e8\ud558\ub294": 82, "\uc904\ub4e4\uc740": 82, "\uc54c\uace0\ub9ac\uc998\uc758": 82, "\uc57d\uac04": 82, "\ub2e4\ub974\uac8c": 82, "\ub3d9\uc791\ud558\ub3c4\ub85d": 82, "\ubc14\uafbc": 82, "\ubd88\uacfc\ud558\ub2e4": 82, "\ub611\uac19\uc740": 82, "\uba85\ub839\uc5b4\uac00": 82, "\uc55e\uc5d0": 82, "\uc788\ub290\ub0d0": 82, "\ub4a4\uc5d0": 82, "\uacb0\uacfc\ub294": [82, 85], "\uc644\uc804\ud788": 82, "\ub2ec\ub77c\uc9c8": 82, "\uc88c\ud45c\ub97c": [82, 83], "event\ubb38\uc774": 82, "\uc885\ub8cc\ub418\uace0": 82, "\uc774\ub8e8\uc5b4\uc9d0\uc5d0": 82, "\uc8fc\ubaa9\ud574\ub77c": 82, "\uc138\ud305": 82, "\ub41c": [82, 84], "\uc5c5\ub370\uc774\ud2b8\ub41c\ub2e4": 82, "\ub450\ubc88\uc9f8": [82, 83], "\ucc28\uc774\uc810\uc774\ub2e4": 82, "key\ub294": 82, "\ud0a4\ubcf4\ub4dc\uc5d0": 82, "\ub9c8\uc9c0\ub9c9\uc73c\ub85c": [82, 83], "\ub20c\ub9b0": 82, "\ud0a4\ub97c": 82, "\uad6c\uccb4\uc801\uc778": [82, 84], "\ud0a4\uc758": 82, "\uc774\ub984\uc744": 82, "\ubcf4\uc544\ub77c": [82, 83, 86], "\ub9e4\uc6b0": [82, 86], "\uc9c1\uad00\uc801\uc778": 82, "k_\uc2dc\ub9ac\uc988\uc774\ub2e4": 82, "header\uc758": 82, "locals\ub85c\ubd80\ud130": 82, "\uc774\uc6a9\ud560": 82, "\uc774\ub984\uc73c\ub85c\ub294": 82, "l_f4\ub4f1\uc774": 82, "\ud0a4\ub4e4\ub3c4": 82, "\ub3c4\uc6c0": 82, "\uc9c1\uad00\uc801\uc73c\ub85c": 82, "\uc774\ud574\ud560": [82, 83], "\ud0a4": 82, "\uc774\ub984": 82, "\ubaa9\ub85d\uc740": 82, "name\uc5d0\uc11c": [], "kewdown\uc740": [], "\ud0a4\ub294": 82, "\uc774\uc804\uc5d0\ub294": 82, "\ub20c\ub9ac\uc9c0": 82, "\uc54a\uc558\uc9c0\ub9cc": 82, "\uc9c0\uae08\uc740": 82, "\ub20c\ub838\ub2e4": 82, "\uc758\ubbf8\ud558\uace0": 82, "\uc774\uc804\ubd80\ud130": 82, "\uc9c0\uae08\uae4c\uc9c0": 82, "\ucc44\ub85c": 82, "\uc758\ubbf8\ud558\uc9c0\ub294": 82, "\ub20c\ub824\uc788\ub294": 82, "\uacbd\uc6b0\ub97c": 82, "\ub2e4\ub8e8\uae30": 82, "\uc704\ud574\uc11c\ub294": 82, "keyup\uc774\ub77c\ub294": 82, "\ucd94\uac00\uc801\uc73c\ub85c": 82, "\ud655\uc778\ud574\uc57c": 82, "\ubcc0\uc218\uc640": 82, "\uc54c\uace0\ub9ac\uc998\uc774": 82, "\ucd94\uac00\ub41c\ub2e4": 82, "\uc2ec\ud654": 82, "\ubd80\ubd84\uc5d0\uc11c": 82, "\ub2e4\ub8e8\uaca0\ub2e4": 82, "\uc785\ub825\uc744": [82, 84], "\ub2e8\uc21c\ud788": [82, 85], "\uc778\uc790\ub97c": 82, "\uac83\uc774\uae30": 82, "\uc644\uc131\ub418\uc5c8\ub2e4": 82, "\uc788\uae30": 82, "\ub9de\ub294\uac00": 82, "\uc544\ub2c8\ub2e4": 82, "\uc624\ube0c\uc81d\ud2b8\uac04": 82, "\uc0c1\ud638\uc791\uc6a9\uc774": 82, "\uc804\ud600": 82, "\uc5c6\uace0": [82, 84], "\ud50c\ub808\uc774": [82, 86], "\uaddc\uce59": [82, 86], "\uc81c\uc57d\uc870\uac74": 82, "\uc810\uc218\ub3c4": 82, "\uc990\uae38": 82, "\ub3d9\uae30\ubd80\uc5ec": 82, "\uc694\uc18c": [82, 85], "\ucd9c\ub825\uc758": 82, "\ub2e4\uc591\uc131": 82, "\ucee8\ud150\uce20": 82, "\uac8c\uc784\uc774\ub77c\uace0": 82, "\ubd88\ub9b4": 82, "\uc778\ud130\ud398\uc774\uc2a4": 82, "\uc2dc\uc2a4\ud15c\uc744": 82, "\ud48d\uc131\ud558\uac8c": 82, "\uc2ec\ud654\ub41c": 82, "\uc0c1\ud0dc": 82, "\ubc18\uc601": 82, "\ud568\uc218\ud654": 82, "\ubc0f": 82, "\ub370\uc774\ud130": [82, 85], "\uc2dc\uac01\ud654": [82, 83], "\ubc29\ubc95": 82, "\uc54c\uc544\uc57c": 82, "\ub2e8\uacc4\uc5d0\uc11c\uc758": 82, "\uacbd\ud5d8\uc774": 82, "\ub3c4\uc6c0\uc774": 82, "\ub2e8\uacc4\ub85c": 82, "\uac00\ubcf4\uc790": 82, "\ub3c4\ud615\uc744": 83, "\ud558\uaca0\ub2e4": 83, "\ubc14\ub294": 83, "\uc5b4\ub5a4\uac00": 83, "hp\uc758": 83, "\ucd5c\ub300\uac12\uc774": 83, "\uc788\uace0": 83, "\uc624\uc9c1": [83, 84], "\ud604\uc7ac": 83, "\uac12\ub9cc\uc774": 83, "\ubcc0\ud55c\ub2e4\uba74": 83, "\ub450": [83, 84, 85, 86], "\ub370\uc774\ud130\ub97c": 83, "\uc26c\uc6b4": 83, "\ubcc0\uc218\uc758": 83, "\uac12\uc774": 83, "\ubcc0\ud560": 83, "\ub54c\ub9c8\ub2e4": 83, "\ub2e4\uc2dc": 83, "\ub80c\ub354\ub9c1": 83, "\ud558\uae30\ub9cc": 83, "\ubc14\uafb8\ub294\uac00": 83, "\uadf8\uac83\uc740": 83, "event\ubb38\uc5d0\uc11c": 83, "\uc704": 83, "\uc544\ub798\ub97c": 83, "\ub20c\ub7ec": 83, "hp\ub97c": [83, 84], "\uc870\uc808\ud558\uac8c": 83, "\ud558\uc600\ub2e4": 83, "\uc774\uc804\uacfc": 83, "\ubc29\ubc95\uc774\ub2e4": 83, "\uc774\uac83\ub4e4\uc740": 83, "\uc5ec\uc804\ud788": 83, "\ud14d\uc2a4\ud2b8\uc774\ub2e4": 83, "\uc544\uc9c1": [83, 84], "\ucda9\ubd84\ud788": 83, "\ub418\uc9c0": 83, "\ub370\uc774\ud130\ub4e4\uc744": 83, "\uc0c1\uc138\ud558\uac8c": 83, "\ud560\uae4c": 83, "\ucd1d": 83, "\ud0c4\ucc3d\uc5d0\uc11c": 83, "\uc544\uc774\ub514\uc5b4\ub97c": 83, "\ub530\uc62c": 83, "hp\ub294": [83, 85], "\uc815\uc218": [83, 85], "\uac12\uc774\uace0": 83, "\ubd88\uc5f0\uc18d\uc801": 83, "\uc544\ub798\uc640": 83, "\ucd9c\ub825\ub420": 83, "\ud6e8\uc52c": 83, "\ub098\uc544\uc84c\ub2e4": 83, "\ub85c\uc9c1\uc740": 83, "6\uc744": 83, "\ud655\uc778\ud558\uba74": [83, 84], "\ub2e8\uc21c\ud558\ub2e4": [83, 84], "\uac80\uc740": [83, 85], "\uc9c1\uc0ac\uac01\ud615\uc744": 83, "\uadf8\ub9b0\ub2e4": [83, 84], "hp\uc744": 83, "\ub530\uc838\uc11c": 83, "\uc791\uc740": [83, 84], "\uc9c1\uc0ac\uac01\ud615\ub4e4\uc744": 83, "\ucd5c\ub300": 83, "\uac1c\uc218\ub9cc\ud07c": 83, "\uc9c1\uc0ac\uac01\ud615\ub4e4\uc5d0": 83, "\ud558\uc580": 83, "\ud14c\ub450\ub9ac\ub97c": [83, 85], "\ud568\uc218\uc5d0\uc120": 83, "\ubcc0\uc218\ub85c": [83, 84], "\ub9e4\uac1c": 83, "\uc0ac\uc6a9\ub41c": 83, "\uac83\uc744": 83, "\uc788\ub294\ub370": 83, "\uccab\ubc88\uc9f8": 83, "\ubcc0\uc218\uc774\uace0": 83, "\ub124\ubc88\uc9f8": 83, "\ub450\uaed8": 83, "\ubcc0\uc218\uc774\ub2e4": 83, "\uc6a9\ub3c4\uac00": 83, "\ubb34\uc5c7\uc778\uc9c0\ub294": 83, "\uc9c1\uc811": 83, "\uc124\uba85\ud558\ub294": 83, "\uac83\ubcf4\ub2e4": 83, "\ubcc0\uacbd\ud558\uba74\uc11c": 83, "20\uc77c": 83, "\uac12": 83, "10\ub610\ub294": 83, "30\uc73c\ub85c": 83, "\ubc14\uafd4": 83, "\uc774\uc81c\ub294": 83, "\ubcf8\uaca9\uc801\uc73c\ub85c": 83, "\ud568\uc218\ud654\ub97c": 83, "always\ubb38\uacfc": 83, "event\ubb38\uc744": 83, "main\ud568\uc218\uc5d0": 83, "\ub2f4\uc558\ub294\ub370": 83, "main\ud568\uc218\ub97c": 83, "\ud504\ub85c\uadf8\ub7a8\uc774": 83, "\ucc3e\uc744": 83, "\uc788\ub3c4\ub85d": 83, "7\uc5d0\uc11c": 83, "\ucc98\ub9ac\ub97c": 83, "drawhp\ub77c\ub294": 83, "\uc0c8\ub85c\uc6b4": [83, 85, 86], "\ub9cc\ub4e4\uc5c8\ub2e4": 83, "\uac8c\uc784\uc5d0\uc11c\uc758": 83, "\uc544\uc774\ub514\uc5b4\ub294": 83, "\ub54c\uc758": 83, "\uc544\uc774\ub514\uc5b4\uc640": 83, "\ud06c\uac8c": [83, 85], "\ub2e4\ub974\uc9c0": 83, "\uc54a\ub2e4": 83, "\ub4e4\uba74": 83, "\uac01\uac01": 83, "\ub9cc\ub4e4\uc5b4": [83, 85], "\ub450\ub294": [83, 84], "\uc88b\uc744": 83, "\uac01\uac01\uc758": 83, "\uc815\ud558\ub294": 83, "\uc804\uccb4\ub97c": 83, "\ub514\uc790\uc778\ud560": 83, "\uc120\ud589\ub418\uc5b4\uc57c": 83, "keydown\uc774": 84, "\uc0ac\uc6a9\ub418\uc5c8\uc9c0\ub9cc": 84, "\uc644\uc804\ud55c": 84, "gui\uac00": 84, "\ubcf4\uc774\ub294": 84, "\uc774\uc720\ub294": 84, "\ud504\ub9b0\ud2b8": 84, "\ub370\uc5d0\ub9cc": 84, "\uc0ac\uc6a9\ub418\uc5c8\uae30": 84, "gui\uc5d0\uc11c\uc758": 84, "\uc785\ub825\uc774\ub780": 84, "\ud2b9\uc815\ud55c": 84, "\uc704\uce58\uc5d0\uc11c\uc758": 84, "\ucc98\ub9ac\ud558\ub294": 84, "\uc99d\uac00\uc2dc\ud0a4\uac70\ub098": 84, "\uac10\uc18c\uc2dc\ud0a4\ub294": 84, "2\uac1c\ub97c": 84, "\ubb54\uac00": 84, "\ud2b9\uc774\ud55c": 84, "\ud6a8\uacfc\uac00": [84, 86], "\uc801\uc6a9\ub418\uc5b4": 84, "\uac83\uc778\uac00": 84, "\uc544\uc774\ub514\uc5b4\ucc98\ub7fc": 84, "\uc815\uc0ac\uac01\ud615\uc744": 84, "\ub0b4\uc6a9\uc740": 84, "\ub450\uaed8\ub9cc": 84, "\ubc84\ud2bc\ub4e4\uc740": 84, "\ucd9c\ub825\uc6a9\uc774\ub2e4": 84, "\ubc84\ud2bc\ub4e4\uc744": 84, "\ud074\ub9ad": 84, "\uac00\ub2a5": 84, "\ub9cc\ub4e4\uc5b4\uc57c": 84, "event\ubb38\uc5d0": 84, "mousebuttonup\uc774": 84, "\ub9c8\uc6b0\uc2a4\uac00": 84, "\ud0a4\ubcf4\ub4dc\uac00": 84, "down\ub41c": 84, "\uac83\uacfc": [84, 86], "\uc758\ubbf8\ub97c": 84, "\ud65c\uc131\ud654\ub418\uba74": 84, "pos\ub294": 84, "x\uac12\uacfc": 84, "y\uac12\uc744": 84, "\uae30\ub85d\ud574\uc57c": 84, "\ud558\ub294\ub370": 84, "\uc9c0\uc810\uc744": 84, "\ub098\ud0c0\ub0b8\ub2e4": 84, "\ud074\ub9ad\uc774": 84, "\uc815\uc0ac\uac01\ud615": 84, "\ub0b4\ubd80\uc5d0\uc11c": 84, "\uc77c\uc5b4\ub0ac\ub294\uc9c0": 84, "\uc9c0\ub294": 84, "collidepoint\ub97c": 84, "\ub0b4\ubd80\uc600\ub2e4\uba74": 84, "\uc601\uc5ed": 84, "\ub0b4\ubd80\ub97c": 84, "\ud074\ub9ad\ud588\ub2e4": 84, "\ucc98\ub9ac\ub9cc\uc774": 84, "\ud544\uc694\ud558\uac8c": 84, "\uc874\uc7ac\ud558\uace0": 84, "\uc788\uc74c": 84, "\ubcc0\uc218\ub3c4": 84, "\uc874\uc7ac\ud568\uc744": 84, "\ud655\uc778\ud558\ub77c": 84, "drawbuttons\uc5d0": 84, "\ubc84\ud2bc\uc758": 84, "\uc601\uc5ed\uacfc": 84, "\uc601\uc5ed\uc774": 84, "\ub3d9\uc77c\ud574\uc57c": 84, "\uadf8\ub807\uc9c0": 84, "\uc54a\ub2e4\uba74": 84, "\ud310\uc815": 84, "\ubc94\uc704\ub294": 84, "\uc624\ud574\uc758": 84, "\uc18c\uc9c0\uac00": 84, "\uc6a9": 84, "\ub4e4\uc744": 84, "\uacc4\uc0b0\uc744": 84, "\ud1b5\ud574": 84, "\uc0c1\uc218": 84, "\uc54c\uc544\ub0b4\uae30": 84, "\uc2eb\ub2e4\uba74": 84, "\ubcc0\uc218\ub4e4\uc744": 84, "\uc0dd\uac01\uc77c": 84, "\uc601\uc5ed\uc744": 84, "\ud558\ub098\ub85c": 84, "\ubb36\uc744": 84, "\uc810\uc740": 84, "\uc2e0\uacbd": 84, "\uc368\uc57c": 84, "\uc0ac\uc2e4": 85, "\uac83\ub4e4\uc774": 85, "\ubcf4\uc774\uc9c4": 85, "\ud504\ub85c\uadf8\ub7a8\uc5d0": 85, "\uaddc\uce59\uc744": [85, 86], "\ucd94\uac00\ud558\ub824": 85, "\ud504\ub85c\uadf8\ub7a8\uc740": [85, 86], "\uaddc\uce59\uc740": 85, "\uac04\ub2e8\ud558\ub2e4": 85, "2\ucc28\uc6d0": 85, "\ubc30\uc5f4\uc5d0\uc11c": 85, "\ube14\ub85d": 85, "\ube14\ub85d\uc758": 85, "\uc218\ub97c": 85, "\uc138\uace0": 85, "\ub9ce\uc740": 85, "\uc0c9\uc0c1\uc758": 85, "\ube14\ub85d\uc744": 85, "\uace0\ub974\ub294": 85, "\uc815\ub2f5\uc774\ub77c\uba74": 85, "\uc99d\uac00\ud558\uace0": 85, "\uc624\ub2f5\uc774\ub77c\uba74": 85, "\uac10\uc18c\ud55c\ub2e4": 85, "\ubb38\uc81c\ub97c": 85, "\ubc30\uc5f4\uc774": 85, "\uadf8\ub824\uc9c4\ub2e4": 85, "\ub300\ub2e8\ud788": [85, 86], "\ub2e8\uc21c\ud558\uc9c0\ub9cc": 85, "\uc9c8": 85, "\uac8c\uc784\uc774\ub2e4": 85, "\ub9cc\ub4e4\uace0": 85, "\ucd9c\ub825\ud574\uc57c": 85, "0\ucc28\uc6d0": 85, "\ubc30\uc5f4\uacfc": 85, "\uac19\uc74c": 85, "\ub098": 85, "\ubc84\ud2bc": 85, "1\ucc28\uc6d0": 85, "\ubc95\uc744": 85, "\uace0": 85, "\ubc30\uc5f4\uc740": 85, "\ud558\ub098\ub9cc": 85, "\ucd94\uac00\ub418\uba74": 85, "\ubb34\uc791\uc704\ub85c": 85, "\ub9cc\ub4e4\uc5b4\uc9c4": 85, "\uac1c\uc218\ub97c": 85, "\uc124\uba85\ud560": 85, "\ud544\uc694\ub3c4": 85, "\ubc30\uc5f4\ucc98\ub7fc": 85, "\ucd9c\ub825\ud55c\ub2e4": 85, "1\uc778\uc9c0": 85, "\uc9c0\uc5d0": 85, "\ub2ec\ub77c\uc9c4\ub2e4": 85, "\uac8c\uc784\ud310\uc740": 85, "\uc6a9\uc774\ub2e4": 85, "\ucc98\ub9ac\ud558\ub824\uba74": 85, "\ubd80\ubd84\uc758": 85, "\uacc4\uc0b0\ud574\uc57c": 85, "\ud574\uc11c": 85, "\uc9dc\uc99d\ub0a0": 85, "\ud504\ub864\ub85c\uadf8\uc5d0\uc11c": 85, "\uc5b8\uae09\ud55c": 85, "\ub300\ub85c": 85, "\uac16\ub294": [85, 86], "gui\uc774\uc9c0\ub9cc": 85, "\uc791\uc131\uc740": 85, "\uad6c\ud604\ud55c": [85, 86], "\uac1c\uc120\uc758": 85, "\uc5ec\uc9c0\uac00": 85, "\ub9ce\ub2e4": 85, "\ud30c\uc77c\ub85c": 85, "\ubc14\uafb8\uba74": 85, "\uc815\ub2f5\uc774\uac70\ub098": 85, "\uc624\ub2f5\uc77c": 85, "\ud6a8\uacfc\uc74c\uc744": 85, "\ub123\uc73c\uba74": 85, "\uc81c\ud55c\uc744": 85, "\uc2dc\uac01\uc801": 85, "\ud6a8\uacfc\ub97c": 85, "\uac8c\uc784\ud310\uc744": 85, "\ud558\uace0": 85, "\ub2e4\uc591\ud788": 85, "\ub123\ub294\ub2e4\uba74": 85, "\uc778\ud130\ud398\uc774\uc2a4\ub97c": 85, "it\uc744": 85, "\uad6c\ud604\ud55c\ub2e4\uba74": 85, "\ub2e8\uc21c\ud558\uae30": 85, "\uc120\ud0dd\uc9c0\ub294": 85, "\ud29c\ud1a0\ub9ac\uc5bc\uc740": 86, "\uc5ec\uae30\uc5d0\uc11c": 86, "\ub05d\uc774": 86, "\ub09c\ub2e4": 86, "\uadf9\uc18c\uc218\ub9cc\uc744": 86, "\ub2e4\ub918\ub2e4": 86, "\uac71\uc815\ud558\uc9c0": 86, "\ub9c8\ub77c": 86, "\uc0ac\ub78c\uc774": 86, "\ucc3d\uc758\uc801\uc778": 86, "\ud65c\ub3d9\uc774\ub2e4": 86, "\uc784\ub9c8\ub204\uc5d8": 86, "\uce78\ud2b8\ub294": 86, "\ucc9c\uc7ac\uc131\uc774\ub780": 86, "\ub300\uc0c1\uc5d0": 86, "\ubd80\uc5ec\ud560": 86, "\ub2a5\ub825\uc774\ub2e4": 86, "\ub9d0\ud588\ub2e4": 86, "\ud504\ub85c\uadf8\ub798\ubc0d\uc740": 86, "\ub9cc\ub4e4\uc5b4\uc11c": 86, "\ucef4\ud4e8\ud130\uc5d0\uac8c": 86, "\uc785\ub825\uc2dc\ud0a4\ub294": 86, "\uaddc\uce59\uc774": 86, "\ub9cc\ub4e4\uc5b4\uc9c4\ub2e4\uba74": 86, "\ucef4\ud4e8\ud130\ub294": 86, "\ubb34\uc5c7\uc774\ub4e0\uc9c0": 86, "\uacbd\uc6b0\uc758": 86, "\uc218\uac00": 86, "\ucee4\uc9c0\uac8c": 86, "\uacb0\ub860\uc774": 86, "\ucd9c\ub825\uc774": 86, "\uc785\ub825\ubcf4\ub2e4": 86, "\ud06c\ub2e4\ub294": 86, "\uc6b0\ub9ac\uc758": 86, "\uc9c0\uc2dd\ub9cc\uc73c\ub85c": 86, "\uc9c0\uc2dd\ubcf4\ub2e4": 86, "\ud3ed\ub113\uc740": 86, "\uad6c\ud604\ud560": 86, "\uc9c0\uc2dd\uc744": 86, "\uae30\uc874\uc758": 86, "\uc9c0\uc2dd\uc5d0": 86, "\uc5f0\uacb0\uc2dc\ud0a4\uba74\uc11c": 86, "\uc2b5\ub4dd\ud560": 86, "\uc218\ub3c4": 86, "\ud504\ub85c\uadf8\ub798\ubc0d\uc758": 86, "\ud2b9\uc131\uc774\ub2e4": 86, "\ub9c8\ucc2c\uac00\uc9c0\uc774\ub2e4": 86, "\ub09c\uc218": 86, "\uac1c\ub150\uc740": 86, "\uc774\ubbf8": 86, "\ud3ec\ud568": 86, "\uc5d0\uc11c": [82, 86], "\uc911\uc694\ud55c": 86, "\uac1c\ub150\uc774\ub2e4": 86, "\ub09c\uc218\uae4c\uc9c0": 86, "\uace0\ub824\ub418\uc5c8\uc744": 86, "\ub09c\uc218\uac00": 86, "\uc601\ud5a5\uc744": 86, "\ubbf8\uce58\uac8c": 86, "\ub41c\ub2e4\uba74": 86, "\ub208\uc0ac\ud0dc": 86, "\ub098\uac8c": 86, "\ud765\ubbf8\ub85c\uc6b4": 86, "\uc18c\uc124": 86, "\uc74c\uc545": 86, "\uc601\ud654": 86, "\ub4f1\uc740": 86, "\uac00\uc9c8": 86, "\uac8c\uc784\ub9cc\uc758": 86, "\ud14c\ud2b8\ub9ac\uc2a4\ub97c": 86, "\uc0dd\uac01\ud574": 86, "\uc54c\ub809\uc138\uc774": 86, "\ud30c\uc9c0\ud2b8\ub178\ud504\uac00": 86, "\uc5bc\ub9cc\ud07c\uc758": 86, "\ud22c\uc790\ud588\uc744\uae4c": 86, "35\ub144": 86, "\ub118\uac8c": 86, "\uc804\uc138\uacc4": 86, "\uc0ac\ub78c\ub4e4\uc774": 86, "\uc2dc\uac04\ubcf4\ub2e4": 86, "\ud074\uae4c": 86, "\ud504\ub85c\uadf8\ub798\ubc0d\uacfc": 86, "\ud2b9\uc131\uc774": 86, "\uc644\ubcbd\ud788": 86, "\ubc1c\ud718\ub41c": 86, "\uc608\uc2dc\uc774\ub2e4": 86, "\ub208\uc0ac\ud0dc\ub97c": 86, "\uc77c\uc73c\ud0a4\ub294": 86, "\uc544\ubb34": 86, "\uac8c\uc784\uc774\ub098": 86, "\uc2dc\uac04\uc774\ub2e4": 86, "\ud65c\uc6a9\ud558\uace0": 86, "\uc2dc\ud589": 86, "\ucc29\uc624\ub97c": 86, "\uacaa\uc5b4": 86, "\ubd80": 87, "\ud504\ub864\ub85c\uadf8": 87, "\uc18c\uac1c": 87, "\uc774\ub3d9": 87, "\uc870\uc885": 87, "hp\ubc14": 87, "\ubc84\ud2bc\ub4e4": 87, "\uac8c\uc784\ud310": 87, "\uc5d0\ud544\ub85c\uadf8": 87, "love": 88, "newcom": 88, "wrote": 88, "distil": 88, "practic": [88, 90], "rank": 88, "confid": 88, "chore": 88, "sizabl": 88, "pars": [88, 91], "journal": 88, "spread": 88, "asset": 88, "resist": 88, "temptat": 88, "onlin": 88, "troubl": 88, "hour": 88, "habit": [88, 91], "googl": 88, "dull": 88, "spend": 88, "jumbl": 88, "haven": 88, "paper": 88, "critic": 88, "didn": [88, 89], "foo": 88, "6x": 88, "broader": 88, "date": 88, "grain": 88, "salt": 88, "trick": [88, 93], "emphasi": 88, "sake": [88, 89], "entail": 88, "supposedli": 88, "paradigm": 88, "2022": 88, "modest": 88, "refresh": 88, "beyond": 88, "fear": 88, "squeez": 88, "asteroid": 88, "invad": 88, "rough": 88, "the_dirty_rectangl": 88, "dirty_rect": 88, "modern": 88, "accident": 88, "tank": 88, "neat": 88, "bad": 88, "misunderstand": 88, "arm": 88, "internet": 88, "believ": 88, "anymor": 88, "nuanc": 88, "misunderstood": 88, "core": 88, "secondari": 88, "prevar": 88, "wast": [88, 91], "debat": 88, "insight": 88, "solut": [88, 89], "cool": 88, "admit": 88, "favorit": 88, "lowli": 88, "rectstyl": 88, "sprites_click": 88, "all_my_sprites_list": 88, "thought": 88, "bump": 88, "tempt": 88, "ANDing": 88, "imprecis": 88, "chord": 88, "yup": 88, "keypress": 88, "arriv": 88, "hadn": 88, "sit": 88, "lesson": 88, "crucial": 88, "editbox": 88, "late": 88, "suspend": 88, "flavor": 88, "transluc": 88, "192": 88, "spot": 88, "messier": 88, "manifest": 88, "rewrit": 88, "fresh": 88, "frustrat": 88, "skill": 88, "nebul": 88, "organiz": 88, "templat": 88, "variat": 88, "systemexit": [88, 90, 93], "proce": 88, "skeleton": 88, "prolif": 88, "decis": 88, "categori": 88, "concurr": 88, "book": 88, "concret": 88, "emploi": 88, "instantli": 88, "coder": 88, "plateau": 88, "tackl": 88, "li": 88, "luckili": 88, "unwieldi": 88, "deeper": 88, "truli": 88, "stump": 88, "cprofil": 88, "snakeviz": 88, "bottleneck": 88, "prematur": 88, "optimis": 88, "evil": 88, "tortur": 88, "david": 88, "clark": 88, "avid": 88, "submit": 88, "twitch": 88, "substanti": 88, "briefli": 89, "decor": 89, "drastic": 89, "ran": 89, "invis": 89, "occupi": 89, "she": 89, "speak": [89, 90], "consequ": 90, "customis": 90, "wish": 90, "nasti": 90, "tom": [90, 93], "realist": [90, 93], "ai": [90, 93], "tomchanc": [90, 93], "uklinux": [], "net": [], "shtml": [], "gnu": [90, 93], "getopt": [90, 93], "socket": [90, 93], "err": [90, 93], "couldn": [90, 93], "classless": [90, 91], "satisfactori": 90, "sophist": [90, 91], "reusabl": 90, "load_png": [90, 91, 92, 93], "filenotfounderror": [90, 93], "secur": 90, "painless": 90, "chief": 90, "overboard": 90, "pseudo": 91, "calcnewpo": [91, 93], "co": [91, 93], "invalu": 91, "angular": 91, "trigonometri": 91, "diagram": [91, 92], "elementari": 91, "visualis": 91, "mario": 92, "thank": 92, "principl": [92, 93], "tenni": [92, 93], "reinit": [92, 93], "movepo": [92, 93], "shouldn": 92, "neater": 92, "encapsul": 92, "learnt": 93, "tl": 93, "tr": 93, "bl": 93, "br": 93, "offcourt": 93, "claus": 93, "circumst": 93, "handili": 93, "recompil": 93, "merrili": 93, "grace": 93, "glitch": 93, "deflat": 93, "player2": 93, "carri": 93, "travel": 93, "abnorm": 93, "unrealist": 93, "feed": 93, "subtract": 93, "thorough": 93, "ofcod": 93, "glue": 93, "rand": 93, "47": 93, "playersprit": 93, "ballsprit": 93, "upon": 93, "oh": 93, "extptr": 9, "popul": 9, "pip": 15, "pip3": 15, "mess": 15, "wipe": 15, "flesh": 15, "dt": 15, "player_po": 15, "fan": 15, "grayscal": [20, 56], "luminos": [20, 56], "wavelength": [20, 56], "sdl3": 23, "set_script": 28, "harfbuzz": 28, "hindi": 28, "devanagari": 28, "deva": 28, "iso": 28, "15924": 28, "sdl_joystick_allow_background_ev": [32, 44], "correpsond": 33, "ndigit": 36, "blend_premultipl": 51, "reconstruct": 51, "simd": 51, "superior": 51, "pyzin": 63, "keydown\uc740": 82, "uk": [90, 93], "bgsurf": 50, "estefan\u00eda": [76, 77, 78], "revisi\u00f3n": [], "fundamento": [], "objeto": [76, 78], "evento": [], "b\u00facle": 76, "ra": [], "dandol": [], "inicio": [], "carga": 76, "m\u00f3dulo": [76, 77, 78], "recurso": [76, 77, 78], "clase": 76, "pelota": 76, "sencilla": 76, "desv\u00edo": [], "f\u00edsica": 76, "vectori": [], "bate": 76, "ensamblando": [], "elemento": [], "deja": [], "golp\u00e9": [], "producto": [], "asumo": 76, "han": 76, "le\u00eddo": 76, "presenta": [76, 78], "denl": 76, "leida": 76, "leer": 76, "voi": 76, "repetir": 76, "dice": 76, "tanto": 76, "detal": 76, "apunta": 76, "aquello": 76, "entienden": 76, "ridiculament": 76, "quien": 76, "gustar\u00eda": 76, "relativament": 76, "concepto": 76, "dise\u00f1o": 76, "alguna": [76, 78], "nocion": 76, "matem\u00e1tica": 76, "para": [76, 77, 78], "f\u00e1cil": [76, 77, 78], "expandir": 76, "sirv": 76, "implementar": 76, "yo": 76, "escrito": [76, 77], "firm": 76, "sino": [76, 78], "entend": [76, 78], "tu": [76, 78], "propia": [76, 78], "breve": [76, 77], "resumen": 76, "com\u00fan": [76, 77], "organizar": 76, "dividirlo": 76, "sei": 76, "seccion": 76, "requerido": [76, 78], "excepto": 76, "recordar": [76, 78], "importar": 76, "propio": 76, "estar\u00e1": 76, "cargando": 76, "conectandos": 76, "desconectandos": 76, "rede": 76, "partida": 76, "guardada": 76, "ser\u00edan": 76, "inicializar": 76, "varia": 76, "m\u00faltipl": 76, "buen": 76, "men\u00fa": 76, "buena": 76, "otra": 76, "necesaria": [76, 77, 78], "marcador": 76, "podr\u00eda": 76, "l\u00f3gica": 76, "princip": 76, "dificultar\u00eda": 76, "comprensi\u00f3n": 76, "dicha": 76, "deber\u00e1": 76, "trazar": 76, "incluyendo": 76, "fondo": 76, "inicializando": 76, "peque\u00f1o": 76, "fragmento": 76, "dese": 76, "entrada": 76, "decir": 76, "pendient": 76, "presionando": 76, "boton": 76, "actualizar": 76, "tendr\u00e1": 76, "posiblement": 76, "prop\u00f3sito": 76, "escribir": 76, "planteado": 76, "escribo": 76, "transferirs": 76, "asumir": 76, "desea": 76, "creando": 76, "razonablement": 76, "incluir": 76, "cierta": 76, "ayudart": 76, "separada": 76, "ten\u00e9": 76, "\u00fatil": 76, "pod\u00e9": 76, "cuenta": [76, 77, 78], "abordamo": 76, "proyecto": 76, "programaci\u00f3n": 76, "decidir": 76, "manteners": 76, "consistent": 76, "resuelv": 76, "debido": 76, "estricta": 76, "interpretaci\u00f3n": 76, "sangr\u00eda": 76, "a\u00fan": [76, 78], "elegir": 76, "coloca": 76, "importaci\u00f3n": 76, "comenta": 76, "hago": 76, "mi": 76, "cualquiera": [76, 78], "usalo": 76, "trat\u00e1": 76, "documentar": 76, "coment\u00e1": 76, "parezca": 76, "caer": 76, "comentar": 76, "obvio": 76, "visto": 76, "gent": 76, "agrega": 76, "peor": 76, "mal": 76, "dise\u00f1ado": 76, "aparentan": 76, "aleatorio": 76, "documentaci\u00f3n": [76, 78], "deficient": 76, "dif\u00edcil": 76, "proceso": 77, "suficientement": 77, "tenga": 77, "sucediendo": 77, "colecci\u00f3n": 77, "introducci\u00f3n": 77, "suced": 77, "explicaci\u00f3n": 77, "clara": 77, "definitivament": 77, "recomiendo": 77, "vean": 77, "actualizado": 77, "mayor\u00eda": [77, 78], "juego": [77, 78], "importar\u00e1n": 77, "\u00fanica": 77, "segunda": 77, "opcion": 77, "plantea": 77, "conjunto": 77, "limitada": 77, "secuencia": [77, 78], "comando": 77, "important": 77, "comprobar\u00e1": 77, "importar\u00e1": 77, "establecera": 77, "ninguno": 77, "bastant": 77, "probar": [77, 78], "hacers": 77, "inicializarlo": 77, "hacerlo": 77, "mediant": 77, "intentar\u00e1": 77, "necesitan": 77, "inicializar\u00e1": 77, "automaticament": 77, "habr\u00eda": 77, "tengan": [77, 78], "inicialzia": 77, "fallar\u00e1": 77, "silenciosament": 77, "manualment": 77, "generar\u00e1": 77, "excepci\u00f3n": 77, "deba": 77, "tien": 77, "devolver\u00e1": 77, "seguro": 77, "abandonar": 77, "dejar\u00e1": 77, "configuraci\u00f3n": 77, "encontraba": 77, "cerrar\u00e1": 77, "limpiament": 77, "finaliza": 77, "configurar": 78, "cubrir": 78, "completa": 78, "gesti\u00f3n": 78, "usars": 78, "especial": 78, "actualizada": 78, "tarea": 78, "biblioteca": 78, "ventaja": 78, "emular": 78, "pedido": 78, "seleccionar\u00e1": 78, "resoluci\u00f3n": 78, "mejor": 78, "solicitada": 78, "permitir\u00e1": 78, "acceso": 78, "enlazado": 78, "librer\u00eda": 78, "qui\u00e9n": 78, "desventaja": 78, "requier": 78, "espec\u00edfico": 78, "ejecutars": 78, "soporten": 78, "requerimiento": 78, "simplificarl": 78, "vida": 78, "comenzando": 78, "selecci\u00f3n": 78, "soliciten": 78, "obten": 78, "castigo": 78, "multa": 78, "rendimineto": 78, "emulado": 78, "ayudar\u00e1": 78, "consultar": 78, "capacidad": 78, "aprend": 78, "establecist": 78, "previament": 78, "configurarlo": 78, "nuevament": 78, "ancho": 78, "alto": 78, "bandera": 78, "solicitado": 78, "dada": 78, "crear": 78, "asignaci\u00f3n": 78, "otorgu": 78, "mayor": 78, "profundida": 78, "empaquetado": 78, "podr\u00e1n": 78, "acerca": 78, "asigna": 78, "seleccionar": 78, "profunidad": 78, "caracter\u00edstica": 78, "querer": 78, "tema": 78, "documento": 78, "funcionar": 78, "corriendo": 78, "vario": 78, "reunir": 78, "dispositivo": 78, "deben": 78, "quieran": 78, "llamarlo": 78, "dir\u00e1": 78, "controlador": 78, "respaldado": 78, "coincidencia": 78, "pr\u00f3xima": 78, "seleccionado": 78, "regla": 78, "oro": 78, "practicament": 78, "emularlo": 78, "lentificar": 78, "convertir": 78, "actualziaci\u00f3n": 78, "apuesta": 78, "dejar": 78, "elija": 78, "convierta": 78, "dejamo": 78, "cercana": 78, "coincidir": 78, "escritorio": 78, "adecu": 78, "obtienen": 78, "descubrir": 78, "superfici": 78, "hayan": 78, "descripto": 78, "cero": 78, "emulaci\u00f3n": 78, "deveuelv": 78, "devoluci\u00f3n": 78, "vac\u00eda": 78, "defecto": 78, "especifican": 78, "probablement": 78, "obtengan": 78, "listado": 78, "ordenado": 78, "menor": 78, "miembro": 78, "describen": 78, "mostrar": 78, "mostrar\u00e1": 78, "r\u00e1pidament": 78, "dar": 78, "visualizci\u00f3n": 78, "dame": 78, "soportado": 78, "encontrada": 78, "lamento": 78, "percentag": 36, "final_level": 36, "current_level": 36, "max_level": 36, "midpoint": 36, "scale_by_ip": 45, "scalex": 45, "scalei": 45, "toolkit": 48}, "objects": {"": [[13, 0, 1, "c.PG_MAJOR_VERSION", "PG_MAJOR_VERSION"], [13, 0, 1, "c.PG_MINOR_VERSION", "PG_MINOR_VERSION"], [13, 0, 1, "c.PG_PATCH_VERSION", "PG_PATCH_VERSION"], [13, 0, 1, "c.PG_VERSIONNUM", "PG_VERSIONNUM"], [13, 0, 1, "c.PG_VERSION_ATLEAST", "PG_VERSION_ATLEAST"], [1, 1, 1, "c.import_pygame_base", "import_pygame_base"], [1, 1, 1, "c.pgBuffer_AsArrayInterface", "pgBuffer_AsArrayInterface"], [1, 1, 1, "c.pgBuffer_AsArrayStruct", "pgBuffer_AsArrayStruct"], [1, 1, 1, "c.pgBuffer_Release", "pgBuffer_Release"], [2, 1, 1, "c.pgBufproxy_Check", "pgBufproxy_Check"], [2, 1, 1, "c.pgBufproxy_GetParent", "pgBufproxy_GetParent"], [2, 1, 1, "c.pgBufproxy_New", "pgBufproxy_New"], [2, 1, 1, "c.pgBufproxy_Trip", "pgBufproxy_Trip"], [2, 3, 1, "c.pgBufproxy_Type", "pgBufproxy_Type"], [7, 4, 1, "c.pgChannelObject", "pgChannelObject"], [7, 1, 1, "c.pgChannel_AsInt", "pgChannel_AsInt"], [7, 1, 1, "c.pgChannel_Check", "pgChannel_Check"], [7, 1, 1, "c.pgChannel_New", "pgChannel_New"], [7, 3, 1, "c.pgChannel_Type", "pgChannel_Type"], [3, 1, 1, "c.pgColor_Check", "pgColor_Check"], [3, 1, 1, "c.pgColor_New", "pgColor_New"], [3, 1, 1, "c.pgColor_NewLength", "pgColor_NewLength"], [3, 3, 1, "c.pgColor_Type", "pgColor_Type"], [1, 1, 1, "c.pgDict_AsBuffer", "pgDict_AsBuffer"], [5, 4, 1, "c.pgEventObject", "pgEventObject"], [5, 1, 1, "c.pgEvent_Check", "pgEvent_Check"], [5, 1, 1, "c.pgEvent_FillUserEvent", "pgEvent_FillUserEvent"], [5, 1, 1, "c.pgEvent_New", "pgEvent_New"], [5, 1, 1, "c.pgEvent_New2", "pgEvent_New2"], [5, 4, 1, "c.pgEvent_Type", "pgEvent_Type"], [1, 3, 1, "c.pgExc_BufferError", "pgExc_BufferError"], [1, 3, 1, "c.pgExc_SDLError", "pgExc_SDLError"], [6, 4, 1, "c.pgFontObject", "pgFontObject"], [6, 1, 1, "c.pgFont_Check", "pgFont_Check"], [6, 1, 1, "c.pgFont_IS_ALIVE", "pgFont_IS_ALIVE"], [6, 1, 1, "c.pgFont_New", "pgFont_New"], [6, 4, 1, "c.pgFont_Type", "pgFont_Type"], [12, 4, 1, "c.pgLifetimeLockObject", "pgLifetimeLockObject"], [12, 1, 1, "c.pgLifetimeLock_Check", "pgLifetimeLock_Check"], [12, 3, 1, "c.pgLifetimeLock_Type", "pgLifetimeLock_Type"], [1, 1, 1, "c.pgObject_GetBuffer", "pgObject_GetBuffer"], [9, 1, 1, "c.pgRWops_FromFileObject", "pgRWops_FromFileObject"], [9, 1, 1, "c.pgRWops_FromObject", "pgRWops_FromObject"], [9, 1, 1, "c.pgRWops_IsFileObject", "pgRWops_IsFileObject"], [9, 1, 1, "c.pgRWops_ReleaseObject", "pgRWops_ReleaseObject"], [8, 4, 1, "c.pgRectObject", "pgRectObject"], [8, 1, 1, "c.pgRect_AsRect", "pgRect_AsRect"], [8, 1, 1, "c.pgRect_FromObject", "pgRect_FromObject"], [8, 1, 1, "c.pgRect_New", "pgRect_New"], [8, 1, 1, "c.pgRect_New4", "pgRect_New4"], [8, 1, 1, "c.pgRect_Normalize", "pgRect_Normalize"], [8, 3, 1, "c.pgRect_Type", "pgRect_Type"], [7, 4, 1, "c.pgSoundObject", "pgSoundObject"], [7, 1, 1, "c.pgSound_AsChunk", "pgSound_AsChunk"], [7, 1, 1, "c.pgSound_Check", "pgSound_Check"], [7, 1, 1, "c.pgSound_New", "pgSound_New"], [7, 3, 1, "c.pgSound_Type", "pgSound_Type"], [11, 4, 1, "c.pgSurfaceObject", "pgSurfaceObject"], [11, 1, 1, "c.pgSurface_AsSurface", "pgSurface_AsSurface"], [11, 1, 1, "c.pgSurface_Blit", "pgSurface_Blit"], [11, 1, 1, "c.pgSurface_Check", "pgSurface_Check"], [12, 1, 1, "c.pgSurface_Lock", "pgSurface_Lock"], [12, 1, 1, "c.pgSurface_LockBy", "pgSurface_LockBy"], [12, 1, 1, "c.pgSurface_LockLifetime", "pgSurface_LockLifetime"], [11, 1, 1, "c.pgSurface_New", "pgSurface_New"], [12, 1, 1, "c.pgSurface_Prep", "pgSurface_Prep"], [11, 3, 1, "c.pgSurface_Type", "pgSurface_Type"], [12, 1, 1, "c.pgSurface_UnLock", "pgSurface_UnLock"], [12, 1, 1, "c.pgSurface_UnLockBy", "pgSurface_UnLockBy"], [12, 1, 1, "c.pgSurface_Unprep", "pgSurface_Unprep"], [4, 4, 1, "c.pgVidInfoObject", "pgVidInfoObject"], [4, 1, 1, "c.pgVidInfo_AsVidInfo", "pgVidInfo_AsVidInfo"], [4, 1, 1, "c.pgVidInfo_Check", "pgVidInfo_Check"], [4, 1, 1, "c.pgVidInfo_New", "pgVidInfo_New"], [4, 3, 1, "c.pgVidInfo_Type", "pgVidInfo_Type"], [9, 1, 1, "c.pg_EncodeFilePath", "pg_EncodeFilePath"], [9, 1, 1, "c.pg_EncodeString", "pg_EncodeString"], [1, 1, 1, "c.pg_FloatFromObj", "pg_FloatFromObj"], [1, 1, 1, "c.pg_FloatFromObjIndex", "pg_FloatFromObjIndex"], [1, 1, 1, "c.pg_GetDefaultWindow", "pg_GetDefaultWindow"], [1, 1, 1, "c.pg_GetDefaultWindowSurface", "pg_GetDefaultWindowSurface"], [1, 1, 1, "c.pg_IntFromObj", "pg_IntFromObj"], [1, 1, 1, "c.pg_IntFromObjIndex", "pg_IntFromObjIndex"], [1, 1, 1, "c.pg_RGBAFromObj", "pg_RGBAFromObj"], [1, 1, 1, "c.pg_RegisterQuit", "pg_RegisterQuit"], [1, 1, 1, "c.pg_SetDefaultWindow", "pg_SetDefaultWindow"], [1, 1, 1, "c.pg_SetDefaultWindowSurface", "pg_SetDefaultWindowSurface"], [1, 1, 1, "c.pg_TwoFloatsFromObj", "pg_TwoFloatsFromObj"], [1, 1, 1, "c.pg_TwoIntsFromObj", "pg_TwoIntsFromObj"], [1, 1, 1, "c.pg_UintFromObj", "pg_UintFromObj"], [1, 1, 1, "c.pg_UintFromObjIndex", "pg_UintFromObjIndex"], [1, 4, 1, "c.pg_buffer", "pg_buffer"], [1, 1, 1, "c.pg_mod_autoinit", "pg_mod_autoinit"], [1, 1, 1, "c.pg_mod_autoquit", "pg_mod_autoquit"], [44, 5, 0, "-", "pygame"]], "pgBuffer_AsArrayInterface": [[1, 2, 1, "c.pgBuffer_AsArrayInterface", "view_p"]], "pgBuffer_AsArrayStruct": [[1, 2, 1, "c.pgBuffer_AsArrayStruct", "view_p"]], "pgBuffer_Release": [[1, 2, 1, "c.pgBuffer_Release", "pg_view_p"]], "pgBufproxy_Check": [[2, 2, 1, "c.pgBufproxy_Check", "x"]], "pgBufproxy_GetParent": [[2, 2, 1, "c.pgBufproxy_GetParent", "obj"]], "pgBufproxy_New": [[2, 2, 1, "c.pgBufproxy_New", "get_buffer"], [2, 2, 1, "c.pgBufproxy_New", "obj"]], "pgBufproxy_Trip": [[2, 2, 1, "c.pgBufproxy_Trip", "obj"]], "pgChannel_AsInt": [[7, 2, 1, "c.pgChannel_AsInt", "x"]], "pgChannel_Check": [[7, 2, 1, "c.pgChannel_Check", "obj"]], "pgChannel_New": [[7, 2, 1, "c.pgChannel_New", "channelnum"]], "pgColor_Check": [[3, 2, 1, "c.pgColor_Check", "obj"]], "pgColor_New": [[3, 2, 1, "c.pgColor_New", "rgba"]], "pgColor_NewLength": [[3, 2, 1, "c.pgColor_NewLength", "length"], [3, 2, 1, "c.pgColor_NewLength", "rgba"]], "pgDict_AsBuffer": [[1, 2, 1, "c.pgDict_AsBuffer", "dict"], [1, 2, 1, "c.pgDict_AsBuffer", "flags"], [1, 2, 1, "c.pgDict_AsBuffer", "pg_view_p"]], "pgEventObject": [[5, 3, 1, "c.pgEventObject.type", "type"]], "pgEvent_Check": [[5, 2, 1, "c.pgEvent_Check", "x"]], "pgEvent_FillUserEvent": [[5, 2, 1, "c.pgEvent_FillUserEvent", "e"], [5, 2, 1, "c.pgEvent_FillUserEvent", "event"]], "pgEvent_New": [[5, 2, 1, "c.pgEvent_New", "event"]], "pgEvent_New2": [[5, 2, 1, "c.pgEvent_New2", "dict"], [5, 2, 1, "c.pgEvent_New2", "type"]], "pgFont_Check": [[6, 2, 1, "c.pgFont_Check", "x"]], "pgFont_IS_ALIVE": [[6, 2, 1, "c.pgFont_IS_ALIVE", "o"]], "pgFont_New": [[6, 2, 1, "c.pgFont_New", "filename"], [6, 2, 1, "c.pgFont_New", "font_index"]], "pgLifetimeLockObject": [[12, 3, 1, "c.pgLifetimeLockObject.lockobj", "lockobj"], [12, 3, 1, "c.pgLifetimeLockObject.surface", "surface"]], "pgLifetimeLock_Check": [[12, 2, 1, "c.pgLifetimeLock_Check", "x"]], "pgObject_GetBuffer": [[1, 2, 1, "c.pgObject_GetBuffer", "flags"], [1, 2, 1, "c.pgObject_GetBuffer", "obj"], [1, 2, 1, "c.pgObject_GetBuffer", "pg_view_p"]], "pgRWops_FromFileObject": [[9, 2, 1, "c.pgRWops_FromFileObject", "obj"]], "pgRWops_FromObject": [[9, 2, 1, "c.pgRWops_FromObject", "extptr"], [9, 2, 1, "c.pgRWops_FromObject", "obj"]], "pgRWops_IsFileObject": [[9, 2, 1, "c.pgRWops_IsFileObject", "rw"]], "pgRWops_ReleaseObject": [[9, 2, 1, "c.pgRWops_ReleaseObject", "context"]], "pgRectObject": [[8, 3, 1, "c.pgRectObject.r", "r"]], "pgRect_AsRect": [[8, 2, 1, "c.pgRect_AsRect", "obj"]], "pgRect_FromObject": [[8, 2, 1, "c.pgRect_FromObject", "obj"], [8, 2, 1, "c.pgRect_FromObject", "temp"]], "pgRect_New": [[8, 2, 1, "c.pgRect_New", "r"]], "pgRect_New4": [[8, 2, 1, "c.pgRect_New4", "h"], [8, 2, 1, "c.pgRect_New4", "w"], [8, 2, 1, "c.pgRect_New4", "x"], [8, 2, 1, "c.pgRect_New4", "y"]], "pgRect_Normalize": [[8, 2, 1, "c.pgRect_Normalize", "rect"]], "pgSound_AsChunk": [[7, 2, 1, "c.pgSound_AsChunk", "x"]], "pgSound_Check": [[7, 2, 1, "c.pgSound_Check", "obj"]], "pgSound_New": [[7, 2, 1, "c.pgSound_New", "chunk"]], "pgSurface_AsSurface": [[11, 2, 1, "c.pgSurface_AsSurface", "x"]], "pgSurface_Blit": [[11, 2, 1, "c.pgSurface_Blit", "dstobj"], [11, 2, 1, "c.pgSurface_Blit", "dstrect"], [11, 2, 1, "c.pgSurface_Blit", "srcobj"], [11, 2, 1, "c.pgSurface_Blit", "srcrect"], [11, 2, 1, "c.pgSurface_Blit", "the_args"]], "pgSurface_Check": [[11, 2, 1, "c.pgSurface_Check", "x"]], "pgSurface_Lock": [[12, 2, 1, "c.pgSurface_Lock", "surfobj"]], "pgSurface_LockBy": [[12, 2, 1, "c.pgSurface_LockBy", "lockobj"], [12, 2, 1, "c.pgSurface_LockBy", "surfobj"]], "pgSurface_LockLifetime": [[12, 2, 1, "c.pgSurface_LockLifetime", "lockobj"], [12, 2, 1, "c.pgSurface_LockLifetime", "surfobj"]], "pgSurface_New": [[11, 2, 1, "c.pgSurface_New", "s"]], "pgSurface_Prep": [[12, 2, 1, "c.pgSurface_Prep", "surfobj"]], "pgSurface_UnLock": [[12, 2, 1, "c.pgSurface_UnLock", "surfobj"]], "pgSurface_UnLockBy": [[12, 2, 1, "c.pgSurface_UnLockBy", "lockobj"], [12, 2, 1, "c.pgSurface_UnLockBy", "surfobj"]], "pgSurface_Unprep": [[12, 2, 1, "c.pgSurface_Unprep", "surfobj"]], "pgVidInfo_AsVidInfo": [[4, 2, 1, "c.pgVidInfo_AsVidInfo", "obj"]], "pgVidInfo_Check": [[4, 2, 1, "c.pgVidInfo_Check", "x"]], "pgVidInfo_New": [[4, 2, 1, "c.pgVidInfo_New", "i"]], "pg_EncodeFilePath": [[9, 2, 1, "c.pg_EncodeFilePath", "eclass"], [9, 2, 1, "c.pg_EncodeFilePath", "obj"]], "pg_EncodeString": [[9, 2, 1, "c.pg_EncodeString", "eclass"], [9, 2, 1, "c.pg_EncodeString", "encoding"], [9, 2, 1, "c.pg_EncodeString", "errors"], [9, 2, 1, "c.pg_EncodeString", "obj"]], "pg_FloatFromObj": [[1, 2, 1, "c.pg_FloatFromObj", "obj"], [1, 2, 1, "c.pg_FloatFromObj", "val"]], "pg_FloatFromObjIndex": [[1, 2, 1, "c.pg_FloatFromObjIndex", "index"], [1, 2, 1, "c.pg_FloatFromObjIndex", "obj"], [1, 2, 1, "c.pg_FloatFromObjIndex", "val"]], "pg_IntFromObj": [[1, 2, 1, "c.pg_IntFromObj", "obj"], [1, 2, 1, "c.pg_IntFromObj", "val"]], "pg_IntFromObjIndex": [[1, 2, 1, "c.pg_IntFromObjIndex", "index"], [1, 2, 1, "c.pg_IntFromObjIndex", "obj"], [1, 2, 1, "c.pg_IntFromObjIndex", "val"]], "pg_RGBAFromObj": [[1, 2, 1, "c.pg_RGBAFromObj", "RGBA"], [1, 2, 1, "c.pg_RGBAFromObj", "obj"]], "pg_RegisterQuit": [[1, 2, 1, "c.pg_RegisterQuit", "f"]], "pg_SetDefaultWindow": [[1, 2, 1, "c.pg_SetDefaultWindow", "win"]], "pg_SetDefaultWindowSurface": [[1, 2, 1, "c.pg_SetDefaultWindowSurface", "screen"]], "pg_TwoFloatsFromObj": [[1, 2, 1, "c.pg_TwoFloatsFromObj", "obj"], [1, 2, 1, "c.pg_TwoFloatsFromObj", "val1"], [1, 2, 1, "c.pg_TwoFloatsFromObj", "val2"]], "pg_TwoIntsFromObj": [[1, 2, 1, "c.pg_TwoIntsFromObj", "obj"], [1, 2, 1, "c.pg_TwoIntsFromObj", "v2"], [1, 2, 1, "c.pg_TwoIntsFromObj", "val1"]], "pg_UintFromObj": [[1, 2, 1, "c.pg_UintFromObj", "obj"], [1, 2, 1, "c.pg_UintFromObj", "val"]], "pg_UintFromObjIndex": [[1, 2, 1, "c.pg_UintFromObjIndex", "_index"], [1, 2, 1, "c.pg_UintFromObjIndex", "obj"], [1, 2, 1, "c.pg_UintFromObjIndex", "val"]], "pg_buffer": [[1, 3, 1, "c.pg_buffer.consumer", "consumer"], [1, 3, 1, "c.pg_buffer.release_buffer", "release_buffer"], [1, 3, 1, "c.pg_buffer.view", "view"]], "pg_mod_autoinit": [[1, 2, 1, "c.pg_mod_autoinit", "modname"]], "pg_mod_autoquit": [[1, 2, 1, "c.pg_mod_autoquit", "modname"]], "pygame": [[17, 6, 1, "", "BufferProxy"], [20, 6, 1, "", "Color"], [41, 6, 1, "", "Overlay"], [42, 6, 1, "", "PixelArray"], [45, 6, 1, "", "Rect"], [51, 6, 1, "", "Surface"], [18, 5, 0, "-", "camera"], [19, 5, 0, "-", "cdrom"], [22, 5, 0, "-", "cursors"], [23, 5, 0, "-", "display"], [24, 5, 0, "-", "draw"], [44, 9, 1, "", "encode_file_path"], [44, 9, 1, "", "encode_string"], [44, 10, 1, "", "error"], [25, 5, 0, "-", "event"], [26, 5, 0, "-", "examples"], [27, 5, 0, "-", "fastevent"], [28, 5, 0, "-", "font"], [29, 5, 0, "-", "freetype"], [44, 9, 1, "", "get_error"], [44, 9, 1, "", "get_init"], [44, 9, 1, "", "get_sdl_byteorder"], [44, 9, 1, "", "get_sdl_version"], [30, 5, 0, "-", "gfxdraw"], [31, 5, 0, "-", "image"], [44, 9, 1, "", "init"], [32, 5, 0, "-", "joystick"], [33, 5, 0, "-", "key"], [34, 5, 0, "-", "locals"], [35, 5, 0, "-", "mask"], [36, 5, 0, "-", "math"], [37, 5, 0, "-", "midi"], [38, 5, 0, "-", "mixer"], [39, 5, 0, "-", "mouse"], [43, 5, 0, "-", "pixelcopy"], [44, 9, 1, "", "quit"], [44, 9, 1, "", "register_quit"], [46, 5, 0, "-", "scrap"], [44, 9, 1, "", "set_error"], [49, 5, 0, "-", "sndarray"], [50, 5, 0, "-", "sprite"], [52, 5, 0, "-", "surfarray"], [53, 5, 0, "-", "tests"], [54, 5, 0, "-", "time"], [56, 5, 0, "-", "transform"], [44, 5, 0, "-", "version"]], "pygame.BufferProxy": [[17, 7, 1, "", "length"], [17, 7, 1, "", "parent"], [17, 7, 1, "", "raw"], [17, 8, 1, "", "write"]], "pygame.Color": [[20, 7, 1, "", "a"], [20, 7, 1, "", "b"], [20, 7, 1, "", "cmy"], [20, 8, 1, "", "correct_gamma"], [20, 7, 1, "", "g"], [20, 8, 1, "", "grayscale"], [20, 7, 1, "", "hsla"], [20, 7, 1, "", "hsva"], [20, 7, 1, "", "i1i2i3"], [20, 8, 1, "", "lerp"], [20, 8, 1, "", "normalize"], [20, 8, 1, "", "premul_alpha"], [20, 7, 1, "", "r"], [20, 8, 1, "", "set_length"], [20, 8, 1, "", "update"]], "pygame.Overlay": [[41, 8, 1, "", "display"], [41, 8, 1, "", "get_hardware"], [41, 8, 1, "", "set_location"]], "pygame.PixelArray": [[42, 8, 1, "", "close"], [42, 8, 1, "", "compare"], [42, 8, 1, "", "extract"], [42, 7, 1, "", "itemsize"], [42, 8, 1, "", "make_surface"], [42, 7, 1, "", "ndim"], [42, 8, 1, "", "replace"], [42, 7, 1, "", "shape"], [42, 7, 1, "", "strides"], [42, 7, 1, "", "surface"], [42, 8, 1, "", "transpose"]], "pygame.Rect": [[45, 8, 1, "", "clamp"], [45, 8, 1, "", "clamp_ip"], [45, 8, 1, "", "clip"], [45, 8, 1, "", "clipline"], [45, 8, 1, "", "collidedict"], [45, 8, 1, "", "collidedictall"], [45, 8, 1, "", "collidelist"], [45, 8, 1, "", "collidelistall"], [45, 8, 1, "", "collideobjects"], [45, 8, 1, "", "collideobjectsall"], [45, 8, 1, "", "collidepoint"], [45, 8, 1, "", "colliderect"], [45, 8, 1, "", "contains"], [45, 8, 1, "", "copy"], [45, 8, 1, "", "fit"], [45, 8, 1, "", "inflate"], [45, 8, 1, "", "inflate_ip"], [45, 8, 1, "", "move"], [45, 8, 1, "", "move_ip"], [45, 8, 1, "", "normalize"], [45, 8, 1, "", "scale_by"], [45, 8, 1, "", "scale_by_ip"], [45, 8, 1, "", "union"], [45, 8, 1, "", "union_ip"], [45, 8, 1, "", "unionall"], [45, 8, 1, "", "unionall_ip"], [45, 8, 1, "", "update"]], "pygame.Surface": [[51, 7, 1, "", "_pixels_address"], [51, 8, 1, "", "blit"], [51, 8, 1, "", "blits"], [51, 8, 1, "", "convert"], [51, 8, 1, "", "convert_alpha"], [51, 8, 1, "", "copy"], [51, 8, 1, "", "fill"], [51, 8, 1, "", "get_abs_offset"], [51, 8, 1, "", "get_abs_parent"], [51, 8, 1, "", "get_alpha"], [51, 8, 1, "", "get_at"], [51, 8, 1, "", "get_at_mapped"], [51, 8, 1, "", "get_bitsize"], [51, 8, 1, "", "get_bounding_rect"], [51, 8, 1, "", "get_buffer"], [51, 8, 1, "", "get_bytesize"], [51, 8, 1, "", "get_clip"], [51, 8, 1, "", "get_colorkey"], [51, 8, 1, "", "get_flags"], [51, 8, 1, "", "get_height"], [51, 8, 1, "", "get_locked"], [51, 8, 1, "", "get_locks"], [51, 8, 1, "", "get_losses"], [51, 8, 1, "", "get_masks"], [51, 8, 1, "", "get_offset"], [51, 8, 1, "", "get_palette"], [51, 8, 1, "", "get_palette_at"], [51, 8, 1, "", "get_parent"], [51, 8, 1, "", "get_pitch"], [51, 8, 1, "", "get_rect"], [51, 8, 1, "", "get_shifts"], [51, 8, 1, "", "get_size"], [51, 8, 1, "", "get_view"], [51, 8, 1, "", "get_width"], [51, 8, 1, "", "lock"], [51, 8, 1, "", "map_rgb"], [51, 8, 1, "", "mustlock"], [51, 8, 1, "", "premul_alpha"], [51, 8, 1, "", "scroll"], [51, 8, 1, "", "set_alpha"], [51, 8, 1, "", "set_at"], [51, 8, 1, "", "set_clip"], [51, 8, 1, "", "set_colorkey"], [51, 8, 1, "", "set_masks"], [51, 8, 1, "", "set_palette"], [51, 8, 1, "", "set_palette_at"], [51, 8, 1, "", "set_shifts"], [51, 8, 1, "", "subsurface"], [51, 8, 1, "", "unlock"], [51, 8, 1, "", "unmap_rgb"]], "pygame._sdl2": [[47, 5, 0, "-", "controller"], [55, 5, 0, "-", "touch"], [48, 5, 0, "-", "video"]], "pygame._sdl2.controller": [[47, 6, 1, "", "Controller"], [47, 9, 1, "", "get_count"], [47, 9, 1, "", "get_eventstate"], [47, 9, 1, "", "get_init"], [47, 9, 1, "", "init"], [47, 9, 1, "", "is_controller"], [47, 9, 1, "", "name_forindex"], [47, 9, 1, "", "quit"], [47, 9, 1, "", "set_eventstate"]], "pygame._sdl2.controller.Controller": [[47, 8, 1, "", "as_joystick"], [47, 8, 1, "", "attached"], [47, 8, 1, "", "from_joystick"], [47, 8, 1, "", "get_axis"], [47, 8, 1, "", "get_button"], [47, 8, 1, "", "get_init"], [47, 8, 1, "", "get_mapping"], [47, 8, 1, "", "quit"], [47, 8, 1, "", "rumble"], [47, 8, 1, "", "set_mapping"], [47, 8, 1, "", "stop_rumble"]], "pygame._sdl2.touch": [[55, 9, 1, "", "get_device"], [55, 9, 1, "", "get_finger"], [55, 9, 1, "", "get_num_devices"], [55, 9, 1, "", "get_num_fingers"]], "pygame._sdl2.video": [[48, 6, 1, "", "Image"], [48, 6, 1, "", "Renderer"], [48, 6, 1, "", "Texture"], [48, 6, 1, "", "Window"]], "pygame._sdl2.video.Image": [[48, 7, 1, "", "alpha"], [48, 7, 1, "", "angle"], [48, 7, 1, "", "blend_mode"], [48, 7, 1, "", "color"], [48, 8, 1, "", "draw"], [48, 7, 1, "", "flip_x"], [48, 7, 1, "", "flip_y"], [48, 8, 1, "", "get_rect"], [48, 7, 1, "", "origin"], [48, 7, 1, "", "srcrect"], [48, 7, 1, "", "texture"]], "pygame._sdl2.video.Renderer": [[48, 8, 1, "", "blit"], [48, 8, 1, "", "clear"], [48, 7, 1, "", "draw_blend_mode"], [48, 7, 1, "", "draw_color"], [48, 8, 1, "", "draw_line"], [48, 8, 1, "", "draw_point"], [48, 8, 1, "", "draw_rect"], [48, 8, 1, "", "fill_rect"], [48, 8, 1, "", "from_window"], [48, 8, 1, "", "get_viewport"], [48, 7, 1, "", "logical_size"], [48, 8, 1, "", "present"], [48, 7, 1, "", "scale"], [48, 8, 1, "", "set_viewport"], [48, 7, 1, "", "target"], [48, 8, 1, "", "to_surface"]], "pygame._sdl2.video.Texture": [[48, 7, 1, "", "alpha"], [48, 7, 1, "", "blend_mode"], [48, 7, 1, "", "color"], [48, 8, 1, "", "draw"], [48, 8, 1, "", "from_surface"], [48, 8, 1, "", "get_rect"], [48, 7, 1, "", "height"], [48, 7, 1, "", "renderer"], [48, 8, 1, "", "update"], [48, 7, 1, "", "width"]], "pygame._sdl2.video.Window": [[48, 7, 1, "", "borderless"], [48, 8, 1, "", "destroy"], [48, 7, 1, "", "display_index"], [48, 8, 1, "", "focus"], [48, 8, 1, "", "from_display_module"], [48, 8, 1, "", "from_window"], [48, 7, 1, "", "grab"], [48, 8, 1, "", "hide"], [48, 7, 1, "", "id"], [48, 8, 1, "", "maximize"], [48, 8, 1, "", "minimize"], [48, 7, 1, "", "opacity"], [48, 7, 1, "", "position"], [48, 7, 1, "", "relative_mouse"], [48, 7, 1, "", "resizable"], [48, 8, 1, "", "restore"], [48, 8, 1, "", "set_fullscreen"], [48, 8, 1, "", "set_icon"], [48, 8, 1, "", "set_modal_for"], [48, 8, 1, "", "set_windowed"], [48, 8, 1, "", "show"], [48, 7, 1, "", "size"], [48, 7, 1, "", "title"]], "pygame.camera": [[18, 6, 1, "", "Camera"], [18, 9, 1, "", "colorspace"], [18, 9, 1, "", "get_backends"], [18, 9, 1, "", "init"], [18, 9, 1, "", "list_cameras"]], "pygame.camera.Camera": [[18, 8, 1, "", "get_controls"], [18, 8, 1, "", "get_image"], [18, 8, 1, "", "get_raw"], [18, 8, 1, "", "get_size"], [18, 8, 1, "", "query_image"], [18, 8, 1, "", "set_controls"], [18, 8, 1, "", "start"], [18, 8, 1, "", "stop"]], "pygame.cdrom": [[19, 6, 1, "", "CD"], [19, 9, 1, "", "get_count"], [19, 9, 1, "", "get_init"], [19, 9, 1, "", "init"], [19, 9, 1, "", "quit"]], "pygame.cdrom.CD": [[19, 8, 1, "", "eject"], [19, 8, 1, "", "get_all"], [19, 8, 1, "", "get_busy"], [19, 8, 1, "", "get_current"], [19, 8, 1, "", "get_empty"], [19, 8, 1, "", "get_id"], [19, 8, 1, "", "get_init"], [19, 8, 1, "", "get_name"], [19, 8, 1, "", "get_numtracks"], [19, 8, 1, "", "get_paused"], [19, 8, 1, "", "get_track_audio"], [19, 8, 1, "", "get_track_length"], [19, 8, 1, "", "get_track_start"], [19, 8, 1, "", "init"], [19, 8, 1, "", "pause"], [19, 8, 1, "", "play"], [19, 8, 1, "", "quit"], [19, 8, 1, "", "resume"], [19, 8, 1, "", "stop"]], "pygame.cursors": [[22, 6, 1, "", "Cursor"], [22, 9, 1, "", "compile"], [22, 9, 1, "", "load_xbm"]], "pygame.cursors.Cursor": [[22, 8, 1, "", "copy"], [22, 7, 1, "", "data"], [22, 7, 1, "", "type"]], "pygame.display": [[23, 9, 1, "", "Info"], [23, 9, 1, "", "flip"], [23, 9, 1, "", "get_active"], [23, 9, 1, "", "get_allow_screensaver"], [23, 9, 1, "", "get_caption"], [23, 9, 1, "", "get_desktop_sizes"], [23, 9, 1, "", "get_driver"], [23, 9, 1, "", "get_init"], [23, 9, 1, "", "get_num_displays"], [23, 9, 1, "", "get_surface"], [23, 9, 1, "", "get_window_size"], [23, 9, 1, "", "get_wm_info"], [23, 9, 1, "", "gl_get_attribute"], [23, 9, 1, "", "gl_set_attribute"], [23, 9, 1, "", "iconify"], [23, 9, 1, "", "init"], [23, 9, 1, "", "list_modes"], [23, 9, 1, "", "mode_ok"], [23, 9, 1, "", "quit"], [23, 9, 1, "", "set_allow_screensaver"], [23, 9, 1, "", "set_caption"], [23, 9, 1, "", "set_gamma"], [23, 9, 1, "", "set_gamma_ramp"], [23, 9, 1, "", "set_icon"], [23, 9, 1, "", "set_mode"], [23, 9, 1, "", "set_palette"], [23, 9, 1, "", "toggle_fullscreen"], [23, 9, 1, "", "update"]], "pygame.draw": [[24, 9, 1, "", "aaline"], [24, 9, 1, "", "aalines"], [24, 9, 1, "", "arc"], [24, 9, 1, "", "circle"], [24, 9, 1, "", "ellipse"], [24, 9, 1, "", "line"], [24, 9, 1, "", "lines"], [24, 9, 1, "", "polygon"], [24, 9, 1, "", "rect"]], "pygame.event": [[25, 6, 1, "", "Event"], [25, 9, 1, "", "clear"], [25, 9, 1, "", "custom_type"], [25, 9, 1, "", "event_name"], [25, 9, 1, "", "get"], [25, 9, 1, "", "get_blocked"], [25, 9, 1, "", "get_grab"], [25, 9, 1, "", "peek"], [25, 9, 1, "", "poll"], [25, 9, 1, "", "post"], [25, 9, 1, "", "pump"], [25, 9, 1, "", "set_allowed"], [25, 9, 1, "", "set_blocked"], [25, 9, 1, "", "set_grab"], [25, 9, 1, "", "wait"]], "pygame.event.Event": [[25, 7, 1, "", "__dict__"], [25, 7, 1, "", "type"]], "pygame.examples.aliens": [[26, 9, 1, "", "main"]], "pygame.examples.arraydemo": [[26, 9, 1, "", "main"]], "pygame.examples.blend_fill": [[26, 9, 1, "", "main"]], "pygame.examples.blit_blends": [[26, 9, 1, "", "main"]], "pygame.examples.camera": [[26, 9, 1, "", "main"]], "pygame.examples.chimp": [[26, 9, 1, "", "main"]], "pygame.examples.cursors": [[26, 9, 1, "", "main"]], "pygame.examples.eventlist": [[26, 9, 1, "", "main"]], "pygame.examples.fonty": [[26, 9, 1, "", "main"]], "pygame.examples.freetype_misc": [[26, 9, 1, "", "main"]], "pygame.examples.glcube": [[26, 9, 1, "", "main"]], "pygame.examples.headless_no_windows_needed": [[26, 9, 1, "", "main"]], "pygame.examples.joystick": [[26, 9, 1, "", "main"]], "pygame.examples.liquid": [[26, 9, 1, "", "main"]], "pygame.examples.mask": [[26, 9, 1, "", "main"]], "pygame.examples.midi": [[26, 9, 1, "", "main"]], "pygame.examples.moveit": [[26, 9, 1, "", "main"]], "pygame.examples.pixelarray": [[26, 9, 1, "", "main"]], "pygame.examples.playmus": [[26, 9, 1, "", "main"]], "pygame.examples.scaletest": [[26, 9, 1, "", "main"]], "pygame.examples.scrap_clipboard": [[26, 9, 1, "", "main"]], "pygame.examples.scroll": [[26, 9, 1, "", "main"]], "pygame.examples.sound": [[26, 9, 1, "", "main"]], "pygame.examples.sound_array_demos": [[26, 9, 1, "", "main"]], "pygame.examples.stars": [[26, 9, 1, "", "main"]], "pygame.examples.testsprite": [[26, 9, 1, "", "main"]], "pygame.examples.vgrade": [[26, 9, 1, "", "main"]], "pygame.fastevent": [[27, 9, 1, "", "get"], [27, 9, 1, "", "get_init"], [27, 9, 1, "", "init"], [27, 9, 1, "", "poll"], [27, 9, 1, "", "post"], [27, 9, 1, "", "pump"], [27, 9, 1, "", "wait"]], "pygame.font": [[28, 6, 1, "", "Font"], [28, 9, 1, "", "SysFont"], [28, 9, 1, "", "get_default_font"], [28, 9, 1, "", "get_fonts"], [28, 9, 1, "", "get_init"], [28, 9, 1, "", "get_sdl_ttf_version"], [28, 9, 1, "", "init"], [28, 9, 1, "", "match_font"], [28, 9, 1, "", "quit"]], "pygame.font.Font": [[28, 7, 1, "", "bold"], [28, 8, 1, "", "get_ascent"], [28, 8, 1, "", "get_bold"], [28, 8, 1, "", "get_descent"], [28, 8, 1, "", "get_height"], [28, 8, 1, "", "get_italic"], [28, 8, 1, "", "get_linesize"], [28, 8, 1, "", "get_strikethrough"], [28, 8, 1, "", "get_underline"], [28, 7, 1, "", "italic"], [28, 8, 1, "", "metrics"], [28, 8, 1, "", "render"], [28, 8, 1, "", "set_bold"], [28, 8, 1, "", "set_italic"], [28, 8, 1, "", "set_script"], [28, 8, 1, "", "set_strikethrough"], [28, 8, 1, "", "set_underline"], [28, 8, 1, "", "size"], [28, 7, 1, "", "strikethrough"], [28, 7, 1, "", "underline"]], "pygame.freetype": [[29, 6, 1, "", "Font"], [29, 9, 1, "", "SysFont"], [29, 9, 1, "", "get_cache_size"], [29, 9, 1, "", "get_default_font"], [29, 9, 1, "", "get_default_resolution"], [29, 9, 1, "", "get_error"], [29, 9, 1, "", "get_init"], [29, 9, 1, "", "get_version"], [29, 9, 1, "", "init"], [29, 9, 1, "", "quit"], [29, 9, 1, "", "set_default_resolution"], [29, 9, 1, "", "was_init"]], "pygame.freetype.Font": [[29, 7, 1, "", "antialiased"], [29, 7, 1, "", "ascender"], [29, 7, 1, "", "bgcolor"], [29, 7, 1, "", "descender"], [29, 7, 1, "", "fgcolor"], [29, 7, 1, "", "fixed_sizes"], [29, 7, 1, "", "fixed_width"], [29, 8, 1, "", "get_metrics"], [29, 8, 1, "", "get_rect"], [29, 8, 1, "", "get_sized_ascender"], [29, 8, 1, "", "get_sized_descender"], [29, 8, 1, "", "get_sized_glyph_height"], [29, 8, 1, "", "get_sized_height"], [29, 8, 1, "", "get_sizes"], [29, 7, 1, "", "height"], [29, 7, 1, "", "kerning"], [29, 7, 1, "", "name"], [29, 7, 1, "", "oblique"], [29, 7, 1, "", "origin"], [29, 7, 1, "", "pad"], [29, 7, 1, "", "path"], [29, 8, 1, "", "render"], [29, 8, 1, "", "render_raw"], [29, 8, 1, "", "render_raw_to"], [29, 8, 1, "", "render_to"], [29, 7, 1, "", "resolution"], [29, 7, 1, "", "rotation"], [29, 7, 1, "", "scalable"], [29, 7, 1, "", "size"], [29, 7, 1, "", "strength"], [29, 7, 1, "", "strong"], [29, 7, 1, "", "style"], [29, 7, 1, "", "ucs4"], [29, 7, 1, "", "underline"], [29, 7, 1, "", "underline_adjustment"], [29, 7, 1, "", "use_bitmap_strikes"], [29, 7, 1, "", "vertical"], [29, 7, 1, "", "wide"]], "pygame.gfxdraw": [[30, 9, 1, "", "aacircle"], [30, 9, 1, "", "aaellipse"], [30, 9, 1, "", "aapolygon"], [30, 9, 1, "", "aatrigon"], [30, 9, 1, "", "arc"], [30, 9, 1, "", "bezier"], [30, 9, 1, "", "box"], [30, 9, 1, "", "circle"], [30, 9, 1, "", "ellipse"], [30, 9, 1, "", "filled_circle"], [30, 9, 1, "", "filled_ellipse"], [30, 9, 1, "", "filled_polygon"], [30, 9, 1, "", "filled_trigon"], [30, 9, 1, "", "hline"], [30, 9, 1, "", "line"], [30, 9, 1, "", "pie"], [30, 9, 1, "", "pixel"], [30, 9, 1, "", "polygon"], [30, 9, 1, "", "rectangle"], [30, 9, 1, "", "textured_polygon"], [30, 9, 1, "", "trigon"], [30, 9, 1, "", "vline"]], "pygame.image": [[31, 9, 1, "", "frombuffer"], [31, 9, 1, "", "frombytes"], [31, 9, 1, "", "fromstring"], [31, 9, 1, "", "get_extended"], [31, 9, 1, "", "get_sdl_image_version"], [31, 9, 1, "", "load"], [31, 9, 1, "", "load_basic"], [31, 9, 1, "", "load_extended"], [31, 9, 1, "", "save"], [31, 9, 1, "", "save_extended"], [31, 9, 1, "", "tobytes"], [31, 9, 1, "", "tostring"]], "pygame.joystick": [[32, 6, 1, "", "Joystick"], [32, 9, 1, "", "get_count"], [32, 9, 1, "", "get_init"], [32, 9, 1, "", "init"], [32, 9, 1, "", "quit"]], "pygame.joystick.Joystick": [[32, 8, 1, "", "get_axis"], [32, 8, 1, "", "get_ball"], [32, 8, 1, "", "get_button"], [32, 8, 1, "", "get_guid"], [32, 8, 1, "", "get_hat"], [32, 8, 1, "", "get_id"], [32, 8, 1, "", "get_init"], [32, 8, 1, "", "get_instance_id"], [32, 8, 1, "", "get_name"], [32, 8, 1, "", "get_numaxes"], [32, 8, 1, "", "get_numballs"], [32, 8, 1, "", "get_numbuttons"], [32, 8, 1, "", "get_numhats"], [32, 8, 1, "", "get_power_level"], [32, 8, 1, "", "init"], [32, 8, 1, "", "quit"], [32, 8, 1, "", "rumble"], [32, 8, 1, "", "stop_rumble"]], "pygame.key": [[33, 9, 1, "", "get_focused"], [33, 9, 1, "", "get_mods"], [33, 9, 1, "", "get_pressed"], [33, 9, 1, "", "get_repeat"], [33, 9, 1, "", "key_code"], [33, 9, 1, "", "name"], [33, 9, 1, "", "set_mods"], [33, 9, 1, "", "set_repeat"], [33, 9, 1, "", "set_text_input_rect"], [33, 9, 1, "", "start_text_input"], [33, 9, 1, "", "stop_text_input"]], "pygame.mask": [[35, 6, 1, "", "Mask"], [35, 9, 1, "", "from_surface"], [35, 9, 1, "", "from_threshold"]], "pygame.mask.Mask": [[35, 8, 1, "", "angle"], [35, 8, 1, "", "centroid"], [35, 8, 1, "", "clear"], [35, 8, 1, "", "connected_component"], [35, 8, 1, "", "connected_components"], [35, 8, 1, "", "convolve"], [35, 8, 1, "", "copy"], [35, 8, 1, "", "count"], [35, 8, 1, "", "draw"], [35, 8, 1, "", "erase"], [35, 8, 1, "", "fill"], [35, 8, 1, "", "get_at"], [35, 8, 1, "", "get_bounding_rects"], [35, 8, 1, "", "get_rect"], [35, 8, 1, "", "get_size"], [35, 8, 1, "", "invert"], [35, 8, 1, "", "outline"], [35, 8, 1, "", "overlap"], [35, 8, 1, "", "overlap_area"], [35, 8, 1, "", "overlap_mask"], [35, 8, 1, "", "scale"], [35, 8, 1, "", "set_at"], [35, 8, 1, "", "to_surface"]], "pygame.math": [[36, 6, 1, "", "Vector2"], [36, 6, 1, "", "Vector3"], [36, 9, 1, "", "clamp"], [36, 9, 1, "", "lerp"]], "pygame.math.Vector2": [[36, 8, 1, "", "angle_to"], [36, 8, 1, "", "as_polar"], [36, 8, 1, "", "clamp_magnitude"], [36, 8, 1, "", "clamp_magnitude_ip"], [36, 8, 1, "", "copy"], [36, 8, 1, "", "cross"], [36, 8, 1, "", "distance_squared_to"], [36, 8, 1, "", "distance_to"], [36, 8, 1, "", "dot"], [36, 8, 1, "", "elementwise"], [36, 7, 1, "", "epsilon"], [36, 8, 1, "", "from_polar"], [36, 8, 1, "", "is_normalized"], [36, 8, 1, "", "length"], [36, 8, 1, "", "length_squared"], [36, 8, 1, "", "lerp"], [36, 8, 1, "", "magnitude"], [36, 8, 1, "", "magnitude_squared"], [36, 8, 1, "", "move_towards"], [36, 8, 1, "", "move_towards_ip"], [36, 8, 1, "", "normalize"], [36, 8, 1, "", "normalize_ip"], [36, 8, 1, "", "project"], [36, 8, 1, "", "reflect"], [36, 8, 1, "", "reflect_ip"], [36, 8, 1, "", "rotate"], [36, 8, 1, "", "rotate_ip"], [36, 8, 1, "", "rotate_ip_rad"], [36, 8, 1, "", "rotate_rad"], [36, 8, 1, "", "rotate_rad_ip"], [36, 8, 1, "", "scale_to_length"], [36, 8, 1, "", "slerp"], [36, 8, 1, "", "update"]], "pygame.math.Vector3": [[36, 8, 1, "", "angle_to"], [36, 8, 1, "", "as_spherical"], [36, 8, 1, "", "clamp_magnitude"], [36, 8, 1, "", "clamp_magnitude_ip"], [36, 8, 1, "", "copy"], [36, 8, 1, "", "cross"], [36, 8, 1, "", "distance_squared_to"], [36, 8, 1, "", "distance_to"], [36, 8, 1, "", "dot"], [36, 8, 1, "", "elementwise"], [36, 7, 1, "", "epsilon"], [36, 8, 1, "", "from_spherical"], [36, 8, 1, "", "is_normalized"], [36, 8, 1, "", "length"], [36, 8, 1, "", "length_squared"], [36, 8, 1, "", "lerp"], [36, 8, 1, "", "magnitude"], [36, 8, 1, "", "magnitude_squared"], [36, 8, 1, "", "move_towards"], [36, 8, 1, "", "move_towards_ip"], [36, 8, 1, "", "normalize"], [36, 8, 1, "", "normalize_ip"], [36, 8, 1, "", "project"], [36, 8, 1, "", "reflect"], [36, 8, 1, "", "reflect_ip"], [36, 8, 1, "", "rotate"], [36, 8, 1, "", "rotate_ip"], [36, 8, 1, "", "rotate_ip_rad"], [36, 8, 1, "", "rotate_rad"], [36, 8, 1, "", "rotate_rad_ip"], [36, 8, 1, "", "rotate_x"], [36, 8, 1, "", "rotate_x_ip"], [36, 8, 1, "", "rotate_x_ip_rad"], [36, 8, 1, "", "rotate_x_rad"], [36, 8, 1, "", "rotate_x_rad_ip"], [36, 8, 1, "", "rotate_y"], [36, 8, 1, "", "rotate_y_ip"], [36, 8, 1, "", "rotate_y_ip_rad"], [36, 8, 1, "", "rotate_y_rad"], [36, 8, 1, "", "rotate_y_rad_ip"], [36, 8, 1, "", "rotate_z"], [36, 8, 1, "", "rotate_z_ip"], [36, 8, 1, "", "rotate_z_ip_rad"], [36, 8, 1, "", "rotate_z_rad"], [36, 8, 1, "", "rotate_z_rad_ip"], [36, 8, 1, "", "scale_to_length"], [36, 8, 1, "", "slerp"], [36, 8, 1, "", "update"]], "pygame.midi": [[37, 6, 1, "", "Input"], [37, 10, 1, "", "MidiException"], [37, 6, 1, "", "Output"], [37, 9, 1, "", "frequency_to_midi"], [37, 9, 1, "", "get_count"], [37, 9, 1, "", "get_default_input_id"], [37, 9, 1, "", "get_default_output_id"], [37, 9, 1, "", "get_device_info"], [37, 9, 1, "", "get_init"], [37, 9, 1, "", "init"], [37, 9, 1, "", "midi_to_ansi_note"], [37, 9, 1, "", "midi_to_frequency"], [37, 9, 1, "", "midis2events"], [37, 9, 1, "", "quit"], [37, 9, 1, "", "time"]], "pygame.midi.Input": [[37, 8, 1, "", "close"], [37, 8, 1, "", "poll"], [37, 8, 1, "", "read"]], "pygame.midi.Output": [[37, 8, 1, "", "abort"], [37, 8, 1, "", "close"], [37, 8, 1, "", "note_off"], [37, 8, 1, "", "note_on"], [37, 8, 1, "", "pitch_bend"], [37, 8, 1, "", "set_instrument"], [37, 8, 1, "", "write"], [37, 8, 1, "", "write_short"], [37, 8, 1, "", "write_sys_ex"]], "pygame.mixer": [[38, 6, 1, "", "Channel"], [38, 6, 1, "", "Sound"], [38, 9, 1, "", "fadeout"], [38, 9, 1, "", "find_channel"], [38, 9, 1, "", "get_busy"], [38, 9, 1, "", "get_init"], [38, 9, 1, "", "get_num_channels"], [38, 9, 1, "", "get_sdl_mixer_version"], [38, 9, 1, "", "init"], [40, 5, 0, "-", "music"], [38, 9, 1, "", "pause"], [38, 9, 1, "", "pre_init"], [38, 9, 1, "", "quit"], [38, 9, 1, "", "set_num_channels"], [38, 9, 1, "", "set_reserved"], [38, 9, 1, "", "stop"], [38, 9, 1, "", "unpause"]], "pygame.mixer.Channel": [[38, 8, 1, "", "fadeout"], [38, 8, 1, "", "get_busy"], [38, 8, 1, "", "get_endevent"], [38, 8, 1, "", "get_queue"], [38, 8, 1, "", "get_sound"], [38, 8, 1, "", "get_volume"], [38, 8, 1, "", "pause"], [38, 8, 1, "", "play"], [38, 8, 1, "", "queue"], [38, 8, 1, "", "set_endevent"], [38, 8, 1, "", "set_volume"], [38, 8, 1, "", "stop"], [38, 8, 1, "", "unpause"]], "pygame.mixer.Sound": [[38, 8, 1, "", "fadeout"], [38, 8, 1, "", "get_length"], [38, 8, 1, "", "get_num_channels"], [38, 8, 1, "", "get_raw"], [38, 8, 1, "", "get_volume"], [38, 8, 1, "", "play"], [38, 8, 1, "", "set_volume"], [38, 8, 1, "", "stop"]], "pygame.mixer.music": [[40, 9, 1, "", "fadeout"], [40, 9, 1, "", "get_busy"], [40, 9, 1, "", "get_endevent"], [40, 9, 1, "", "get_pos"], [40, 9, 1, "", "get_volume"], [40, 9, 1, "", "load"], [40, 9, 1, "", "pause"], [40, 9, 1, "", "play"], [40, 9, 1, "", "queue"], [40, 9, 1, "", "rewind"], [40, 9, 1, "", "set_endevent"], [40, 9, 1, "", "set_pos"], [40, 9, 1, "", "set_volume"], [40, 9, 1, "", "stop"], [40, 9, 1, "", "unload"], [40, 9, 1, "", "unpause"]], "pygame.mouse": [[39, 9, 1, "", "get_cursor"], [39, 9, 1, "", "get_focused"], [39, 9, 1, "", "get_pos"], [39, 9, 1, "", "get_pressed"], [39, 9, 1, "", "get_rel"], [39, 9, 1, "", "get_visible"], [39, 9, 1, "", "set_cursor"], [39, 9, 1, "", "set_pos"], [39, 9, 1, "", "set_visible"]], "pygame.pixelcopy": [[43, 9, 1, "", "array_to_surface"], [43, 9, 1, "", "make_surface"], [43, 9, 1, "", "map_array"], [43, 9, 1, "", "surface_to_array"]], "pygame.scrap": [[46, 9, 1, "", "contains"], [46, 9, 1, "", "get"], [46, 9, 1, "", "get_init"], [46, 9, 1, "", "get_types"], [46, 9, 1, "", "init"], [46, 9, 1, "", "lost"], [46, 9, 1, "", "put"], [46, 9, 1, "", "set_mode"]], "pygame.sndarray": [[49, 9, 1, "", "array"], [49, 9, 1, "", "get_arraytype"], [49, 9, 1, "", "get_arraytypes"], [49, 9, 1, "", "make_sound"], [49, 9, 1, "", "samples"], [49, 9, 1, "", "use_arraytype"]], "pygame.sprite": [[50, 6, 1, "", "DirtySprite"], [50, 6, 1, "", "Group"], [50, 9, 1, "", "GroupSingle"], [50, 6, 1, "", "LayeredDirty"], [50, 6, 1, "", "LayeredUpdates"], [50, 9, 1, "", "OrderedUpdates"], [50, 6, 1, "", "RenderClear"], [50, 6, 1, "", "RenderPlain"], [50, 6, 1, "", "RenderUpdates"], [50, 6, 1, "", "Sprite"], [50, 9, 1, "", "collide_circle"], [50, 9, 1, "", "collide_circle_ratio"], [50, 9, 1, "", "collide_mask"], [50, 9, 1, "", "collide_rect"], [50, 9, 1, "", "collide_rect_ratio"], [50, 9, 1, "", "groupcollide"], [50, 9, 1, "", "spritecollide"], [50, 9, 1, "", "spritecollideany"]], "pygame.sprite.Group": [[50, 8, 1, "", "add"], [50, 8, 1, "", "clear"], [50, 8, 1, "", "copy"], [50, 8, 1, "", "draw"], [50, 8, 1, "", "empty"], [50, 8, 1, "", "has"], [50, 8, 1, "", "remove"], [50, 8, 1, "", "sprites"], [50, 8, 1, "", "update"]], "pygame.sprite.LayeredDirty": [[50, 8, 1, "", "change_layer"], [50, 8, 1, "", "clear"], [50, 8, 1, "", "draw"], [50, 8, 1, "", "get_clip"], [50, 8, 1, "", "repaint_rect"], [50, 8, 1, "", "set_clip"], [50, 8, 1, "", "set_timing_threshold"], [50, 8, 1, "", "set_timing_treshold"]], "pygame.sprite.LayeredUpdates": [[50, 8, 1, "", "add"], [50, 8, 1, "", "change_layer"], [50, 8, 1, "", "draw"], [50, 8, 1, "", "get_bottom_layer"], [50, 8, 1, "", "get_layer_of_sprite"], [50, 8, 1, "", "get_sprite"], [50, 8, 1, "", "get_sprites_at"], [50, 8, 1, "", "get_sprites_from_layer"], [50, 8, 1, "", "get_top_layer"], [50, 8, 1, "", "get_top_sprite"], [50, 8, 1, "", "layers"], [50, 8, 1, "", "move_to_back"], [50, 8, 1, "", "move_to_front"], [50, 8, 1, "", "remove_sprites_of_layer"], [50, 8, 1, "", "sprites"], [50, 8, 1, "", "switch_layer"]], "pygame.sprite.RenderUpdates": [[50, 8, 1, "", "draw"]], "pygame.sprite.Sprite": [[50, 8, 1, "", "add"], [50, 8, 1, "", "alive"], [50, 8, 1, "", "groups"], [50, 8, 1, "", "kill"], [50, 8, 1, "", "remove"], [50, 8, 1, "", "update"]], "pygame.surfarray": [[52, 9, 1, "", "array2d"], [52, 9, 1, "", "array3d"], [52, 9, 1, "", "array_alpha"], [52, 9, 1, "", "array_blue"], [52, 9, 1, "", "array_colorkey"], [52, 9, 1, "", "array_green"], [52, 9, 1, "", "array_red"], [52, 9, 1, "", "blit_array"], [52, 9, 1, "", "get_arraytype"], [52, 9, 1, "", "get_arraytypes"], [52, 9, 1, "", "make_surface"], [52, 9, 1, "", "map_array"], [52, 9, 1, "", "pixels2d"], [52, 9, 1, "", "pixels3d"], [52, 9, 1, "", "pixels_alpha"], [52, 9, 1, "", "pixels_blue"], [52, 9, 1, "", "pixels_green"], [52, 9, 1, "", "pixels_red"], [52, 9, 1, "", "use_arraytype"]], "pygame.tests": [[53, 9, 1, "", "run"]], "pygame.time": [[54, 6, 1, "", "Clock"], [54, 9, 1, "", "delay"], [54, 9, 1, "", "get_ticks"], [54, 9, 1, "", "set_timer"], [54, 9, 1, "", "wait"]], "pygame.time.Clock": [[54, 8, 1, "", "get_fps"], [54, 8, 1, "", "get_rawtime"], [54, 8, 1, "", "get_time"], [54, 8, 1, "", "tick"], [54, 8, 1, "", "tick_busy_loop"]], "pygame.transform": [[56, 9, 1, "", "average_color"], [56, 9, 1, "", "average_surfaces"], [56, 9, 1, "", "chop"], [56, 9, 1, "", "flip"], [56, 9, 1, "", "get_smoothscale_backend"], [56, 9, 1, "", "grayscale"], [56, 9, 1, "", "laplacian"], [56, 9, 1, "", "rotate"], [56, 9, 1, "", "rotozoom"], [56, 9, 1, "", "scale"], [56, 9, 1, "", "scale2x"], [56, 9, 1, "", "scale_by"], [56, 9, 1, "", "set_smoothscale_backend"], [56, 9, 1, "", "smoothscale"], [56, 9, 1, "", "smoothscale_by"], [56, 9, 1, "", "threshold"]], "pygame.version": [[44, 11, 1, "", "SDL"], [44, 11, 1, "", "rev"], [44, 11, 1, "", "ver"], [44, 11, 1, "", "vernum"]]}, "objtypes": {"0": "c:macro", "1": "c:function", "2": "c:functionParam", "3": "c:member", "4": "c:type", "5": "py:module", "6": "py:class", "7": "py:attribute", "8": "py:method", "9": "py:function", "10": "py:exception", "11": "py:data"}, "objnames": {"0": ["c", "macro", "C macro"], "1": ["c", "function", "C function"], "2": ["c", "functionParam", "C function parameter"], "3": ["c", "member", "C member"], "4": ["c", "type", "C type"], "5": ["py", "module", "Python module"], "6": ["py", "class", "Python class"], "7": ["py", "attribute", "Python attribute"], "8": ["py", "method", "Python method"], "9": ["py", "function", "Python function"], "10": ["py", "exception", "Python exception"], "11": ["py", "data", "Python data"]}, "titleterms": {"pygam": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 75, 76, 77, 78, 88, 89, 92], "c": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12], "api": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13], "high": 1, "level": [1, 44], "export": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 17], "base": 1, "src_c": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12], "class": [2, 3, 8, 11, 36, 50, 58, 64, 91, 92], "bufferproxi": 2, "color": [3, 20, 21], "displai": [4, 23, 58, 59], "event": [5, 25, 27, 58, 68, 70, 88, 89, 92], "_freetyp": 6, "mixer": [7, 40], "rect": [8, 88], "rwobject": 9, "slot": 10, "c_api": 10, "make": [10, 61, 62], "function": [10, 14, 59, 62, 65, 71, 90], "data": [10, 49, 52], "avail": 10, "from": [10, 62], "other": [10, 65], "modul": [10, 18, 19, 22, 23, 24, 25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 43, 44, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 63, 64, 90], "surfac": [11, 17, 42, 52, 56, 65, 88], "surflock": 12, "version": [13, 44], "src_py": 13, "py": [13, 66], "file": 14, "path": 14, "argument": 14, "front": 15, "page": [15, 16], "document": 15, "tutori": [15, 57, 58, 59, 60, 62, 64, 65, 75], "refer": 15, "logo": 16, "legaci": 16, "bufferproxypygam": 17, "object": [17, 20, 41, 42, 45, 50, 51, 58, 89, 91, 92], "buffer": 17, "through": 17, "an": [17, 62], "arrai": [17, 43, 52], "protocol": 17, "camerapygam": 18, "camera": [18, 57], "us": [18, 52, 57, 88], "cdrompygam": 19, "audio": [19, 40], "cdrom": 19, "control": [19, 23, 32, 40, 47, 57, 92], "colorpygam": 20, "represent": 20, "name": 21, "cursorspygam": 22, "cursor": 22, "resourc": [22, 58, 90], "displaypygam": 23, "window": 23, "screen": [23, 62], "drawpygam": 24, "draw": [24, 30, 58], "shape": [24, 30], "eventpygam": 25, "interact": [25, 27, 32, 37], "queue": [25, 27], "examplesmodul": 26, "exampl": [26, 58, 59, 65, 66], "program": 26, "fasteventpygam": 27, "fontpygam": 28, "load": [28, 29, 38, 58, 90], "render": [28, 29, 64], "font": [28, 29], "freetypeenhanc": 29, "comput": [29, 57], "gfxdrawpygam": 30, "imagepygam": 31, "imag": [31, 35, 51, 57, 62], "transfer": 31, "joystickpygam": 32, "joystick": 32, "gamepad": 32, "trackbal": 32, "common": [32, 64], "axi": 32, "map": [32, 62], "nintendo": 32, "switch": 32, "left": 32, "joi": 32, "con": [32, 76], "2": [32, 62, 89, 90, 91, 93], "x": 32, "right": 32, "pro": 32, "xbox": 32, "360": 32, "playstat": 32, "4": [32, 89, 91], "1": [32, 61, 76, 89, 90, 91, 92, 93], "keypygam": 33, "work": [33, 39, 47, 55, 88], "keyboard": 33, "localspygam": 34, "constant": 34, "maskpygam": 35, "mask": [35, 57], "mathpygam": 36, "vector": [36, 91], "midipygam": 37, "midi": 37, "input": [37, 55, 58, 62, 70], "output": [37, 68, 72], "mixerpygam": 38, "plai": 38, "sound": [38, 49], "mousepygam": 39, "mous": 39, "musicpygam": 40, "stream": [40, 57], "overlaypygam": 41, "video": 41, "overlai": 41, "graphic": 41, "pixelarraypygam": 42, "direct": 42, "pixel": [42, 43, 52, 62, 88], "access": [42, 49, 52], "pixelcopypygam": 43, "gener": 43, "copi": 43, "pygameth": 44, "top": 44, "packag": [44, 53], "versionsmal": 44, "contain": 44, "inform": 44, "rectpygam": 45, "store": 45, "rectangular": 45, "coordin": [45, 62], "scrappygam": 46, "clipboard": 46, "support": 46, "_sdl2": [47, 55], "controllerpygam": 47, "sdl2_video": 48, "sndarraypygam": 49, "sampl": 49, "spritepygam": 50, "basic": [50, 57, 59, 68, 69, 70, 89], "game": [50, 58, 61, 63, 88, 89, 91], "surfacepygam": 51, "repres": 51, "surfarraypygam": 52, "interfac": 52, "testspygam": 53, "unit": 53, "test": 53, "suit": 53, "timepygam": 54, "monitor": 54, "time": [54, 62], "touchpygam": 55, "touch": 55, "transformpygam": 56, "transform": 56, "introduct": [57, 58, 59, 61, 63, 64, 65], "import": [57, 58, 60, 65], "init": [57, 60], "captur": 57, "singl": 57, "list": [57, 62], "connect": 57, "live": 57, "vision": 57, "colorspac": 57, "threshold": 57, "line": [58, 90], "By": 58, "chimp": [58, 66], "initi": [58, 60], "everyth": 58, "creat": [58, 62], "The": [58, 62, 64, 89, 90, 93], "background": [58, 62], "put": [58, 62, 93], "text": 58, "On": [58, 62], "center": 58, "while": 58, "setup": [58, 75], "finish": [58, 93], "prepar": [58, 62], "main": [58, 75], "loop": [58, 75, 89], "handl": [58, 62, 90], "all": [58, 62, 93], "updat": 58, "sprite": [58, 64, 75, 91], "entir": 58, "scene": 58, "over": 58, "set": [59, 69], "mode": 59, "how": [59, 62], "decid": 59, "quit": [60, 77], "With": 61, "tabl": 61, "content": 61, "A": [61, 62, 88, 91, 92], "note": 61, "code": 61, "style": 61, "help": 62, "do": [62, 88], "i": [62, 70, 88], "move": 62, "just": 62, "let": [62, 93], "": 62, "go": 62, "back": 62, "step": 62, "hero": 62, "take": 62, "definit": 62, "blit": [62, 89], "To": 62, "chang": 62, "smooth": 62, "movement": 62, "so": 62, "what": [62, 88], "next": 62, "first": [62, 90], "mysteri": 62, "some": 62, "multipl": 62, "It": 62, "togeth": [62, 64, 93], "improv": 62, "user": [62, 92], "ad": 62, "One": 62, "more": [62, 65], "you": [62, 88], "ar": [62, 88], "your": [62, 64, 88], "own": [62, 64], "here": 62, "intro": 63, "python": [63, 65, 88], "histori": [63, 64], "tast": 63, "AND": 63, "close": 63, "overview": 63, "lesson": 64, "group": 64, "mix": 64, "them": 64, "mani": 64, "type": 64, "collis": [64, 88], "detect": [64, 88], "problem": 64, "extend": 64, "advanc": [64, 65, 71, 72], "surfarrai": 65, "numer": 65, "lock": 65, "transpar": 65, "numpi": 65, "graduat": 65, "author": [67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86], "youngwook": [67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86], "kim": [67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86], "korean": [67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86], "contact": [67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86], "rumia0601": [67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86], "gmail": [67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86], "com": [67, 68, 69, 70, 71, 72, 73, 74, 79, 80, 81, 82, 83, 84, 85, 86], "prolog": 67, "why": 67, "templat": 68, "Into": 68, "driven": 68, "gui": [68, 80], "process": [69, 71], "anim": 69, "new": 70, "button": 72, "plu": 73, "alpha": [73, 88], "epilog": 74, "de": [75, 76, 77, 78], "ejemplo": [75, 78], "del": 75, "chimpanc\u00e9": 75, "l\u00ednea": 75, "por": 75, "introducci\u00f3n": [75, 76, 78], "importaci\u00f3n": 75, "m\u00f3dulo": 75, "carga": 75, "recurso": 75, "clase": 75, "objeto": 75, "para": 75, "juego": [75, 76], "inicializar": [75, 77], "todo": 75, "crear": [75, 76], "el": 75, "fondo": 75, "centrar": 75, "texto": 75, "en": 75, "mostrar": 75, "mientra": 75, "termina": 75, "preparar": 75, "bucl": 75, "princip": 75, "manejar": 75, "lo": [75, 78], "evento": 75, "entrada": 75, "actualizar": 75, "dibujar": 75, "la": 75, "escena": 75, "completa": 75, "fin": 75, "\ud504\ub864\ub85c\uadf8": 79, "\uc65c": 79, "\ud558\ud544": 79, "\ud30c\uc774\uac8c\uc784": 79, "\uae30\ubcf8": 80, "\ud615\uc2dd\uacfc": 80, "\uae30\ucd08": [80, 81, 82], "\ucd9c\ub825": [80, 84], "\uc774\ubca4\ud2b8": [80, 82], "\uae30\ubc18\uacfc": 80, "\uae30\ubc18\uc73c\ub85c\uc758": 80, "\uc785\ubb38": 80, "\ucc98\ub9ac": [81, 83], "\ud654\uba74\uc774": 81, "\uc6c0\uc9c1\uc774\uae30": 81, "\uc704\ud55c": 81, "\uc870\uac74": 81, "\uc785\ub825": 82, "\uc0c8\ub85c\uc6b4": 82, "\uc785\ub825\uc740": 82, "\uadf8\ub9ac\uace0": [83, 84, 85], "\uc2ec\ud654": [83, 84], "\ud568\uc218\ud654": 83, "\ubc84\ud2bc": 84, "\uc870\uae08": 85, "\ub354": 85, "\uc5d0\ud544\ub85c\uadf8": 86, "\ud55c\uad6d\uc5b4": 87, "\ud29c\ud1a0\ub9ac\uc5bc": 87, "newbi": 88, "guid": 88, "get": 88, "comfort": 88, "recogn": 88, "which": 88, "part": 88, "realli": 88, "need": 88, "know": 88, "convert": 88, "Be": 88, "wari": 88, "outdat": 88, "obsolet": 88, "option": 88, "advic": 88, "There": 88, "NO": 88, "rule": 88, "six": 88, "don": 88, "t": 88, "distract": 88, "side": [88, 93], "issu": 88, "friend": 88, "bother": 88, "perfect": 88, "manag": 88, "subsystem": 88, "colorkei": 88, "v": 88, "softwar": 88, "architectur": 88, "design": 88, "pattern": 88, "thing": [88, 90], "pythoni": 88, "wai": 88, "revis": 89, "fundament": 89, "3": [89, 90, 92, 93], "5": [89, 92], "ta": 89, "da": 89, "kick": 90, "off": 90, "simpl": [91, 92], "ball": [91, 93], "divers": [91, 92], "physic": 91, "bat": [92, 93], "6": 93, "hit": 93, "product": 93, "quick": 15, "start": 15, "tabla": 76, "contenido": 76, "una": 76, "nota": 76, "sobr": 76, "estilo": 76, "codificaci\u00f3n": 76, "tutorial": [77, 78], "importar": 77, "e": 77, "cerrar": 77, "configuraci\u00f3n": 78, "modo": 78, "visualizaci\u00f3n": 78, "b\u00e1sica": 78, "c\u00f3mo": 78, "decidir": 78, "funcion": 78}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"pygame C API": [[0, "pygame-c-api"]], "High level API exported by pygame.base": [[1, "high-level-api-exported-by-pygame-base"]], "src_c/base.c": [[1, "src-c-base-c"]], "Class BufferProxy API exported by pygame.bufferproxy": [[2, "class-bufferproxy-api-exported-by-pygame-bufferproxy"]], "src_c/bufferproxy.c": [[2, "src-c-bufferproxy-c"]], "Class Color API exported by pygame.color": [[3, "class-color-api-exported-by-pygame-color"]], "src_c/color.c": [[3, "src-c-color-c"]], "API exported by pygame.display": [[4, "api-exported-by-pygame-display"]], "src_c/display.c": [[4, "src-c-display-c"]], "API exported by pygame.event": [[5, "api-exported-by-pygame-event"]], "src_c/event.c": [[5, "src-c-event-c"]], "API exported by pygame._freetype": [[6, "api-exported-by-pygame-freetype"]], "src_c/_freetype.c": [[6, "src-c-freetype-c"]], "API exported by pygame.mixer": [[7, "api-exported-by-pygame-mixer"]], "src_c/mixer.c": [[7, "src-c-mixer-c"]], "Class Rect API exported by pygame.rect": [[8, "class-rect-api-exported-by-pygame-rect"]], "src_c/rect.c": [[8, "src-c-rect-c"]], "API exported by pygame.rwobject": [[9, "api-exported-by-pygame-rwobject"]], "src_c/rwobject.c": [[9, "src-c-rwobject-c"]], "Slots and c_api - Making functions and data available from other modules": [[10, "slots-and-c-api-making-functions-and-data-available-from-other-modules"]], "Class Surface API exported by pygame.surface": [[11, "class-surface-api-exported-by-pygame-surface"]], "src_c/surface.c": [[11, "src-c-surface-c"]], "API exported by pygame.surflock": [[12, "api-exported-by-pygame-surflock"]], "src_c/surflock.c": [[12, "src-c-surflock-c"]], "API exported by pygame.version": [[13, "api-exported-by-pygame-version"]], "src_py/version.py": [[13, "src-py-version-py"]], "File Path Function Arguments": [[14, "file-path-function-arguments"]], "Pygame Front Page": [[15, "pygame-front-page"]], "Quick start": [[15, "quick-start"]], "Documents": [[15, "documents"]], "Tutorials": [[15, "tutorials"]], "Reference": [[15, "reference"]], "Pygame Logos Page": [[16, "pygame-logos-page"]], "Pygame Logos": [[16, "pygame-logos"]], "Legacy logos": [[16, "legacy-logos"]], "pygame.BufferProxypygame object to export a surface buffer through an array protocol": [[17, "pygame-bufferproxy"]], "pygame.camerapygame module for camera use": [[18, "module-pygame.camera"]], "pygame.cdrompygame module for audio cdrom control": [[19, "module-pygame.cdrom"]], "pygame.Colorpygame object for color representations": [[20, "pygame-color"]], "Named Colors": [[21, "named-colors"]], "pygame.cursorspygame module for cursor resources": [[22, "module-pygame.cursors"]], "pygame.displaypygame module to control the display window and screen": [[23, "module-pygame.display"]], "pygame.drawpygame module for drawing shapes": [[24, "module-pygame.draw"]], "pygame.eventpygame module for interacting with events and queues": [[25, "module-pygame.event"]], "pygame.examplesmodule of example programs": [[26, "module-pygame.examples"]], "pygame.fasteventpygame module for interacting with events and queues": [[27, "module-pygame.fastevent"]], "pygame.fontpygame module for loading and rendering fonts": [[28, "module-pygame.font"]], "pygame.freetypeEnhanced pygame module for loading and rendering computer fonts": [[29, "module-pygame.freetype"]], "pygame.gfxdrawpygame module for drawing shapes": [[30, "module-pygame.gfxdraw"]], "pygame.imagepygame module for image transfer": [[31, "module-pygame.image"]], "pygame.joystickPygame module for interacting with joysticks, gamepads, and trackballs.": [[32, "module-pygame.joystick"]], "Common Controller Axis Mappings": [[32, "common-controller-axis-mappings"]], "Nintendo Switch Left Joy-Con (pygame 2.x)": [[32, "nintendo-switch-left-joy-con-pygame-2-x"]], "Nintendo Switch Right Joy-Con (pygame 2.x)": [[32, "nintendo-switch-right-joy-con-pygame-2-x"]], "Nintendo Switch Pro Controller (pygame 2.x)": [[32, "nintendo-switch-pro-controller-pygame-2-x"]], "XBox 360 Controller (pygame 2.x)": [[32, "xbox-360-controller-pygame-2-x"]], "Playstation 4 Controller (pygame 2.x)": [[32, "playstation-4-controller-pygame-2-x"]], "XBox 360 Controller (pygame 1.x)": [[32, "xbox-360-controller-pygame-1-x"]], "Playstation 4 Controller (pygame 1.x)": [[32, "playstation-4-controller-pygame-1-x"]], "pygame.keypygame module to work with the keyboard": [[33, "module-pygame.key"]], "pygame.localspygame constants": [[34, "module-pygame.locals"]], "pygame.maskpygame module for image masks.": [[35, "module-pygame.mask"]], "pygame.mathpygame module for vector classes": [[36, "module-pygame.math"]], "pygame.midipygame module for interacting with midi input and output.": [[37, "module-pygame.midi"]], "pygame.mixerpygame module for loading and playing sounds": [[38, "module-pygame.mixer"]], "pygame.mousepygame module to work with the mouse": [[39, "module-pygame.mouse"]], "pygame.mixer.musicpygame module for controlling streamed audio": [[40, "module-pygame.mixer.music"]], "pygame.Overlaypygame object for video overlay graphics": [[41, "pygame-overlay"]], "pygame.PixelArraypygame object for direct pixel access of surfaces": [[42, "pygame-pixelarray"]], "pygame.pixelcopypygame module for general pixel array copying": [[43, "module-pygame.pixelcopy"]], "pygamethe top level pygame package": [[44, "module-pygame"]], "pygame.versionsmall module containing version information": [[44, "module-pygame.version"]], "pygame.Rectpygame object for storing rectangular coordinates": [[45, "pygame-rect"]], "pygame.scrappygame module for clipboard support.": [[46, "module-pygame.scrap"]], "pygame._sdl2.controllerPygame module to work with controllers.": [[47, "module-pygame._sdl2.controller"]], "pygame.sdl2_video": [[48, "module-pygame._sdl2.video"]], "pygame.sndarraypygame module for accessing sound sample data": [[49, "module-pygame.sndarray"]], "pygame.spritepygame module with basic game object classes": [[50, "module-pygame.sprite"]], "pygame.Surfacepygame object for representing images": [[51, "pygame-surface"]], "pygame.surfarraypygame module for accessing surface pixel data using array interfaces": [[52, "module-pygame.surfarray"]], "pygame.testsPygame unit test suite package": [[53, "module-pygame.tests"]], "pygame.timepygame module for monitoring time": [[54, "module-pygame.time"]], "pygame._sdl2.touchpygame module to work with touch input": [[55, "module-pygame._sdl2.touch"]], "pygame.transformpygame module to transform surfaces": [[56, "module-pygame.transform"]], "Pygame Tutorials - Camera Module Introduction": [[57, "pygame-tutorials-camera-module-introduction"]], "Camera Module Introduction": [[57, "camera-module-introduction"]], "Import and Init": [[57, "import-and-init"]], "Capturing a Single Image": [[57, "capturing-a-single-image"]], "Listing Connected Cameras": [[57, "listing-connected-cameras"]], "Using Camera Controls": [[57, "using-camera-controls"]], "Capturing a Live Stream": [[57, "capturing-a-live-stream"]], "Basic Computer Vision": [[57, "basic-computer-vision"]], "Colorspaces": [[57, "colorspaces"]], "Thresholding": [[57, "thresholding"]], "Using the Mask Module": [[57, "using-the-mask-module"]], "Pygame Tutorials - Line By Line Chimp Example": [[58, "pygame-tutorials-line-by-line-chimp-example"]], "Line By Line Chimp": [[58, "line-by-line-chimp"]], "Introduction": [[58, "introduction"], [59, "introduction"], [65, "introduction"]], "Import Modules": [[58, "import-modules"]], "Loading Resources": [[58, "loading-resources"]], "Game Object Classes": [[58, "game-object-classes"]], "Initialize Everything": [[58, "initialize-everything"]], "Create The Background": [[58, "create-the-background"]], "Put Text On The Background, Centered": [[58, "put-text-on-the-background-centered"]], "Display The Background While Setup Finishes": [[58, "display-the-background-while-setup-finishes"]], "Prepare Game Object": [[58, "prepare-game-object"]], "Main Loop": [[58, "main-loop"]], "Handle All Input Events": [[58, "handle-all-input-events"]], "Update the Sprites": [[58, "update-the-sprites"]], "Draw The Entire Scene": [[58, "draw-the-entire-scene"]], "Game Over": [[58, "game-over"]], "Pygame Tutorials - Setting Display Modes": [[59, "pygame-tutorials-setting-display-modes"]], "Setting Display Modes": [[59, "setting-display-modes"]], "Setting Basics": [[59, "setting-basics"]], "How to Decide": [[59, "how-to-decide"]], "Functions": [[59, "functions"]], "Examples": [[59, "examples"], [65, "examples"]], "Pygame Tutorials - Import and Initialize": [[60, "pygame-tutorials-import-and-initialize"]], "Import and Initialize": [[60, "import-and-initialize"]], "Import": [[60, "import"]], "Init": [[60, "init"]], "Quit": [[60, "quit"]], "Making Games With Pygame": [[61, "making-games-with-pygame"], [61, "id1"]], "Table of Contents": [[61, "table-of-contents"]], "1. Introduction": [[61, "introduction"]], "1.1. A note on coding styles": [[61, "a-note-on-coding-styles"]], "Pygame Tutorials - Help! How Do I Move An Image?": [[62, "pygame-tutorials-help-how-do-i-move-an-image"]], "Help! How Do I Move An Image?": [[62, "help-how-do-i-move-an-image"]], "Just Pixels On The Screen": [[62, "just-pixels-on-the-screen"]], "Let's Go Back A Step": [[62, "let-s-go-back-a-step"]], "Making The Hero Move": [[62, "making-the-hero-move"]], "Creating A Map": [[62, "creating-a-map"]], "Making The Hero Move (Take 2)": [[62, "making-the-hero-move-take-2"]], "Definition: \"blit\"": [[62, "definition-blit"]], "Going From The List To The Screen": [[62, "going-from-the-list-to-the-screen"]], "Screen Coordinates": [[62, "screen-coordinates"]], "Changing The Background": [[62, "changing-the-background"]], "Smooth Movement": [[62, "smooth-movement"]], "So, What Next?": [[62, "so-what-next"]], "First, The Mystery Functions": [[62, "first-the-mystery-functions"]], "Handling Some Input": [[62, "handling-some-input"]], "Moving Multiple Images": [[62, "moving-multiple-images"]], "Putting It All Together": [[62, "putting-it-all-together"]], "Preparing for Improved User Input": [[62, "preparing-for-improved-user-input"]], "Adding the User Input": [[62, "adding-the-user-input"]], "Putting it all Together One More time": [[62, "putting-it-all-together-one-more-time"]], "You Are On Your Own From Here": [[62, "you-are-on-your-own-from-here"]], "Pygame Intro": [[63, "pygame-intro"]], "Python Pygame Introduction": [[63, "python-pygame-introduction"]], "HISTORY": [[63, "history"]], "TASTE": [[63, "taste"]], "PYTHON AND GAMING": [[63, "python-and-gaming"]], "CLOSING": [[63, "closing"]], "Pygame Modules Overview": [[63, "pygame-modules-overview"]], "Pygame Tutorials - Sprite Module Introduction": [[64, "pygame-tutorials-sprite-module-introduction"]], "Sprite Module Introduction": [[64, "sprite-module-introduction"]], "History Lesson": [[64, "history-lesson"]], "The Classes": [[64, "the-classes"]], "The Sprite Class": [[64, "the-sprite-class"]], "The Group Class": [[64, "the-group-class"]], "Mixing Them Together": [[64, "mixing-them-together"]], "The Many Group Types": [[64, "the-many-group-types"]], "The Rendering Groups": [[64, "the-rendering-groups"]], "Collision Detection": [[64, "collision-detection"]], "Common Problems": [[64, "common-problems"]], "Extending Your Own Classes (Advanced)": [[64, "extending-your-own-classes-advanced"]], "Pygame Tutorials - Surfarray Introduction": [[65, "pygame-tutorials-surfarray-introduction"]], "Surfarray Introduction": [[65, "surfarray-introduction"], [65, "id1"]], "Numeric Python": [[65, "numeric-python"]], "Import Surfarray": [[65, "import-surfarray"]], "Surface Locking": [[65, "surface-locking"]], "Transparency": [[65, "transparency"]], "Other Surfarray Functions": [[65, "other-surfarray-functions"]], "More Advanced NumPy": [[65, "more-advanced-numpy"]], "Graduation": [[65, "graduation"]], "pygame/examples/chimp.py": [[66, "pygame-examples-chimp-py"]], "Author: Youngwook Kim (Korean)": [[67, "author-youngwook-kim-korean"], [68, "author-youngwook-kim-korean"], [69, "author-youngwook-kim-korean"], [70, "author-youngwook-kim-korean"], [71, "author-youngwook-kim-korean"], [72, "author-youngwook-kim-korean"], [73, "author-youngwook-kim-korean"], [74, "author-youngwook-kim-korean"], [79, "author-youngwook-kim-korean"], [80, "author-youngwook-kim-korean"], [81, "author-youngwook-kim-korean"], [82, "author-youngwook-kim-korean"], [83, "author-youngwook-kim-korean"], [84, "author-youngwook-kim-korean"], [85, "author-youngwook-kim-korean"], [86, "author-youngwook-kim-korean"]], "Contact: rumia0601@gmail.com": [[67, "contact-rumia0601-gmail-com"], [68, "contact-rumia0601-gmail-com"], [69, "contact-rumia0601-gmail-com"], [70, "contact-rumia0601-gmail-com"], [71, "contact-rumia0601-gmail-com"], [72, "contact-rumia0601-gmail-com"], [73, "contact-rumia0601-gmail-com"], [74, "contact-rumia0601-gmail-com"], [79, "contact-rumia0601-gmail-com"], [80, "contact-rumia0601-gmail-com"], [81, "contact-rumia0601-gmail-com"], [82, "contact-rumia0601-gmail-com"], [83, "contact-rumia0601-gmail-com"], [84, "contact-rumia0601-gmail-com"], [85, "contact-rumia0601-gmail-com"], [86, "contact-rumia0601-gmail-com"]], "Prolog? Why Pygame?": [[67, "prolog-why-pygame"]], "Basic TEMPLATE and OUTPUT": [[68, "basic-template-and-output"]], "\u2013Into Event-driven and GUI": [[68, "into-event-driven-and-gui"]], "Basic PROCESS": [[69, "basic-process"]], "-Setting for Animation": [[69, "setting-for-animation"]], "Basic INPUT": [[70, "basic-input"]], "-New Input is new Event": [[70, "new-input-is-new-event"]], "with Advanced PROCESS - Functionalization": [[71, "with-advanced-process-functionalization"]], "with Advanced OUTPUT \u2013 Buttons": [[72, "with-advanced-output-buttons"]], "and plus alpha": [[73, "and-plus-alpha"]], "Epilog": [[74, "epilog"]], "Tutorial de Pygame - Ejemplo del Chimpanc\u00e9, L\u00ednea Por L\u00ednea": [[75, "tutorial-de-pygame-ejemplo-del-chimpance-linea-por-linea"]], "Chimpanc\u00e9, L\u00ednea Por L\u00ednea": [[75, "chimpance-linea-por-linea"]], "Introducci\u00f3n": [[75, "introduccion"], [78, "introduccion"]], "Importaci\u00f3n de M\u00f3dulos": [[75, "importacion-de-modulos"]], "Carga de Recursos": [[75, "carga-de-recursos"]], "Clases de Objetos para Juegos": [[75, "clases-de-objetos-para-juegos"]], "Inicializar Todo": [[75, "inicializar-todo"]], "Crear el Fondo": [[75, "crear-el-fondo"]], "Centrar Texto en el Fondo": [[75, "centrar-texto-en-el-fondo"]], "Mostrar el Fondo mientras Termina el Setup": [[75, "mostrar-el-fondo-mientras-termina-el-setup"]], "Preparar Objetos del Juego": [[75, "preparar-objetos-del-juego"]], "Bucle principal (Main Loop)": [[75, "bucle-principal-main-loop"]], "Manejar los Eventos de Entrada": [[75, "manejar-los-eventos-de-entrada"]], "Actualizar los Sprites": [[75, "actualizar-los-sprites"]], "Dibujar la Escena Completa": [[75, "dibujar-la-escena-completa"]], "Fin del Juego": [[75, "fin-del-juego"]], "Crear Juegos con Pygame": [[76, "crear-juegos-con-pygame"], [76, "id1"]], "Tabla de Contenido": [[76, "tabla-de-contenido"]], "1. Introducci\u00f3n": [[76, "introduccion"]], "1.1. Una nota sobre estilos de codificaci\u00f3n": [[76, "una-nota-sobre-estilos-de-codificacion"]], "Tutoriales de Pygame - Importar e Inicializar": [[77, "tutoriales-de-pygame-importar-e-inicializar"]], "Importar e Inicializar": [[77, "importar-e-inicializar"]], "Importar": [[77, "importar"]], "Inicializar": [[77, "inicializar"]], "Cerrar (Quit)": [[77, "cerrar-quit"]], "Tutoriales de Pygame - Configuraci\u00f3n de los Modos de Visualizaci\u00f3n": [[78, "tutoriales-de-pygame-configuracion-de-los-modos-de-visualizacion"]], "Configuraci\u00f3n de los Modos de Visualizaci\u00f3n": [[78, "configuracion-de-los-modos-de-visualizacion"]], "Configuraci\u00f3n b\u00e1sica": [[78, "configuracion-basica"]], "C\u00f3mo decidir": [[78, "como-decidir"]], "Funciones": [[78, "funciones"]], "Ejemplos": [[78, "ejemplos"]], "\ud504\ub864\ub85c\uadf8": [[79, "id1"]], "\u2013 \uc65c \ud558\ud544 \ud30c\uc774\uac8c\uc784?": [[79, "id2"]], "\uae30\ubcf8 \ud615\uc2dd\uacfc \uae30\ucd08 \ucd9c\ub825": [[80, "id1"]], "\u2013\uc774\ubca4\ud2b8 \uae30\ubc18\uacfc GUI \uae30\ubc18\uc73c\ub85c\uc758 \uc785\ubb38": [[80, "gui"]], "\uae30\ucd08 \ucc98\ub9ac": [[81, "id1"]], "-\ud654\uba74\uc774 \uc6c0\uc9c1\uc774\uae30 \uc704\ud55c \uc870\uac74": [[81, "id2"]], "\uae30\ucd08 \uc785\ub825": [[82, "id1"]], "-\uc0c8\ub85c\uc6b4 \uc785\ub825\uc740 \uc0c8\ub85c\uc6b4 \uc774\ubca4\ud2b8": [[82, "id2"]], "\uadf8\ub9ac\uace0 \uc2ec\ud654 \ucc98\ub9ac - \ud568\uc218\ud654": [[83, "id1"]], "\uadf8\ub9ac\uace0 \uc2ec\ud654 \ucd9c\ub825 \u2013 \ubc84\ud2bc": [[84, "id1"]], "\uadf8\ub9ac\uace0 \uc870\uae08 \ub354!": [[85, "id1"]], "\uc5d0\ud544\ub85c\uadf8": [[86, "id1"]], "\ud55c\uad6d\uc5b4 \ud29c\ud1a0\ub9ac\uc5bc": [[87, "id1"], [87, "id2"]], "Newbie Guide to Pygame": [[88, "newbie-guide-to-pygame"]], "A Newbie Guide to pygame": [[88, "a-newbie-guide-to-pygame"]], "Get comfortable working in Python.": [[88, "get-comfortable-working-in-python"]], "Recognize which parts of pygame you really need.": [[88, "recognize-which-parts-of-pygame-you-really-need"]], "Know what a surface is.": [[88, "know-what-a-surface-is"]], "Use Surface.convert().": [[88, "use-surface-convert"]], "Be wary of outdated, obsolete, and optional advice.": [[88, "be-wary-of-outdated-obsolete-and-optional-advice"]], "There is NO rule six.": [[88, "there-is-no-rule-six"]], "Don't get distracted by side issues.": [[88, "don-t-get-distracted-by-side-issues"]], "Rects are your friends.": [[88, "rects-are-your-friends"]], "Don't bother with pixel-perfect collision detection.": [[88, "don-t-bother-with-pixel-perfect-collision-detection"]], "Managing the event subsystem.": [[88, "managing-the-event-subsystem"]], "Colorkey vs. Alpha.": [[88, "colorkey-vs-alpha"]], "Software architecture, design patterns, and games.": [[88, "software-architecture-design-patterns-and-games"]], "Do things the pythony way.": [[88, "do-things-the-pythony-way"]], "Revision: Pygame fundamentals": [[89, "revision-pygame-fundamentals"]], "2. Revision: Pygame fundamentals": [[89, "makegames-2"]], "2.1. The basic Pygame game": [[89, "the-basic-pygame-game"]], "2.2. Basic Pygame objects": [[89, "basic-pygame-objects"]], "2.3. Blitting": [[89, "blitting"]], "2.4. The event loop": [[89, "the-event-loop"]], "2.5. Ta-da!": [[89, "ta-da"]], "Kicking things off": [[90, "kicking-things-off"]], "3. Kicking things off": [[90, "makegames-3"]], "3.1. The first lines, and loading modules": [[90, "the-first-lines-and-loading-modules"]], "3.2. Resource handling functions": [[90, "resource-handling-functions"]], "Game object classes": [[91, "game-object-classes"]], "4. Game object classes": [[91, "makegames-4"]], "4.1. A simple ball class": [[91, "a-simple-ball-class"]], "4.1.1. Diversion 1: Sprites": [[91, "diversion-1-sprites"]], "4.1.2. Diversion 2: Vector physics": [[91, "diversion-2-vector-physics"]], "User-controllable objects": [[92, "user-controllable-objects"]], "5. User-controllable objects": [[92, "makegames-5"]], "5.1. A simple bat class": [[92, "a-simple-bat-class"]], "5.1.1. Diversion 3: Pygame events": [[92, "diversion-3-pygame-events"]], "Putting it all together": [[93, "putting-it-all-together"]], "6. Putting it all together": [[93, "makegames-6"]], "6.1. Let the ball hit sides": [[93, "let-the-ball-hit-sides"]], "6.2. Let the ball hit bats": [[93, "let-the-ball-hit-bats"]], "6.3. The Finished product": [[93, "the-finished-product"]]}, "indexentries": {"import_pygame_base (c function)": [[1, "c.import_pygame_base"]], "pgbuffer_asarrayinterface (c function)": [[1, "c.pgBuffer_AsArrayInterface"]], "pgbuffer_asarraystruct (c function)": [[1, "c.pgBuffer_AsArrayStruct"]], "pgbuffer_release (c function)": [[1, "c.pgBuffer_Release"]], "pgdict_asbuffer (c function)": [[1, "c.pgDict_AsBuffer"]], "pgexc_buffererror (c var)": [[1, "c.pgExc_BufferError"]], "pgexc_sdlerror (c var)": [[1, "c.pgExc_SDLError"]], "pgobject_getbuffer (c function)": [[1, "c.pgObject_GetBuffer"]], "pg_floatfromobj (c function)": [[1, "c.pg_FloatFromObj"]], "pg_floatfromobjindex (c function)": [[1, "c.pg_FloatFromObjIndex"]], "pg_getdefaultwindow (c function)": [[1, "c.pg_GetDefaultWindow"]], "pg_getdefaultwindowsurface (c function)": [[1, "c.pg_GetDefaultWindowSurface"]], "pg_intfromobj (c function)": [[1, "c.pg_IntFromObj"]], "pg_intfromobjindex (c function)": [[1, "c.pg_IntFromObjIndex"]], "pg_rgbafromobj (c function)": [[1, "c.pg_RGBAFromObj"]], "pg_registerquit (c function)": [[1, "c.pg_RegisterQuit"]], "pg_setdefaultwindow (c function)": [[1, "c.pg_SetDefaultWindow"]], "pg_setdefaultwindowsurface (c function)": [[1, "c.pg_SetDefaultWindowSurface"]], "pg_twofloatsfromobj (c function)": [[1, "c.pg_TwoFloatsFromObj"]], "pg_twointsfromobj (c function)": [[1, "c.pg_TwoIntsFromObj"]], "pg_uintfromobj (c function)": [[1, "c.pg_UintFromObj"]], "pg_uintfromobjindex (c function)": [[1, "c.pg_UintFromObjIndex"]], "pg_buffer (c type)": [[1, "c.pg_buffer"]], "pg_buffer.consumer (c member)": [[1, "c.pg_buffer.consumer"]], "pg_buffer.release_buffer (c member)": [[1, "c.pg_buffer.release_buffer"]], "pg_buffer.view (c member)": [[1, "c.pg_buffer.view"]], "pg_mod_autoinit (c function)": [[1, "c.pg_mod_autoinit"]], "pg_mod_autoquit (c function)": [[1, "c.pg_mod_autoquit"]], "pgbufproxy_check (c function)": [[2, "c.pgBufproxy_Check"]], "pgbufproxy_getparent (c function)": [[2, "c.pgBufproxy_GetParent"]], "pgbufproxy_new (c function)": [[2, "c.pgBufproxy_New"]], "pgbufproxy_trip (c function)": [[2, "c.pgBufproxy_Trip"]], "pgbufproxy_type (c var)": [[2, "c.pgBufproxy_Type"]], "pgcolor_check (c function)": [[3, "c.pgColor_Check"]], "pgcolor_new (c function)": [[3, "c.pgColor_New"]], "pgcolor_newlength (c function)": [[3, "c.pgColor_NewLength"]], "pgcolor_type (c var)": [[3, "c.pgColor_Type"]], "pgvidinfoobject (c type)": [[4, "c.pgVidInfoObject"]], "pgvidinfo_asvidinfo (c function)": [[4, "c.pgVidInfo_AsVidInfo"]], "pgvidinfo_check (c function)": [[4, "c.pgVidInfo_Check"]], "pgvidinfo_new (c function)": [[4, "c.pgVidInfo_New"]], "pgvidinfo_type (c var)": [[4, "c.pgVidInfo_Type"]], "pgeventobject (c type)": [[5, "c.pgEventObject"]], "pgeventobject.type (c member)": [[5, "c.pgEventObject.type"]], "pgevent_check (c function)": [[5, "c.pgEvent_Check"]], "pgevent_filluserevent (c function)": [[5, "c.pgEvent_FillUserEvent"]], "pgevent_new (c function)": [[5, "c.pgEvent_New"]], "pgevent_new2 (c function)": [[5, "c.pgEvent_New2"]], "pgevent_type (c type)": [[5, "c.pgEvent_Type"]], "pgfontobject (c type)": [[6, "c.pgFontObject"]], "pgfont_check (c function)": [[6, "c.pgFont_Check"]], "pgfont_is_alive (c function)": [[6, "c.pgFont_IS_ALIVE"]], "pgfont_new (c function)": [[6, "c.pgFont_New"]], "pgfont_type (c type)": [[6, "c.pgFont_Type"]], "pgchannelobject (c type)": [[7, "c.pgChannelObject"]], "pgchannel_asint (c function)": [[7, "c.pgChannel_AsInt"]], "pgchannel_check (c function)": [[7, "c.pgChannel_Check"]], "pgchannel_new (c function)": [[7, "c.pgChannel_New"]], "pgchannel_type (c var)": [[7, "c.pgChannel_Type"]], "pgsoundobject (c type)": [[7, "c.pgSoundObject"]], "pgsound_aschunk (c function)": [[7, "c.pgSound_AsChunk"]], "pgsound_check (c function)": [[7, "c.pgSound_Check"]], "pgsound_new (c function)": [[7, "c.pgSound_New"]], "pgsound_type (c var)": [[7, "c.pgSound_Type"]], "pgrectobject (c type)": [[8, "c.pgRectObject"]], "pgrectobject.r (c member)": [[8, "c.pgRectObject.r"]], "pgrect_asrect (c function)": [[8, "c.pgRect_AsRect"]], "pgrect_fromobject (c function)": [[8, "c.pgRect_FromObject"]], "pgrect_new (c function)": [[8, "c.pgRect_New"]], "pgrect_new4 (c function)": [[8, "c.pgRect_New4"]], "pgrect_normalize (c function)": [[8, "c.pgRect_Normalize"]], "pgrect_type (c var)": [[8, "c.pgRect_Type"]], "pgrwops_fromfileobject (c function)": [[9, "c.pgRWops_FromFileObject"]], "pgrwops_fromobject (c function)": [[9, "c.pgRWops_FromObject"]], "pgrwops_isfileobject (c function)": [[9, "c.pgRWops_IsFileObject"]], "pgrwops_releaseobject (c function)": [[9, "c.pgRWops_ReleaseObject"]], "pg_encodefilepath (c function)": [[9, "c.pg_EncodeFilePath"]], "pg_encodestring (c function)": [[9, "c.pg_EncodeString"]], "pgsurfaceobject (c type)": [[11, "c.pgSurfaceObject"]], "pgsurface_assurface (c function)": [[11, "c.pgSurface_AsSurface"]], "pgsurface_blit (c function)": [[11, "c.pgSurface_Blit"]], "pgsurface_check (c function)": [[11, "c.pgSurface_Check"]], "pgsurface_new (c function)": [[11, "c.pgSurface_New"]], "pgsurface_type (c var)": [[11, "c.pgSurface_Type"]], "pglifetimelockobject (c type)": [[12, "c.pgLifetimeLockObject"]], "pglifetimelockobject.lockobj (c member)": [[12, "c.pgLifetimeLockObject.lockobj"]], "pglifetimelockobject.surface (c member)": [[12, "c.pgLifetimeLockObject.surface"]], "pglifetimelock_check (c function)": [[12, "c.pgLifetimeLock_Check"]], "pglifetimelock_type (c var)": [[12, "c.pgLifetimeLock_Type"]], "pgsurface_lock (c function)": [[12, "c.pgSurface_Lock"]], "pgsurface_lockby (c function)": [[12, "c.pgSurface_LockBy"]], "pgsurface_locklifetime (c function)": [[12, "c.pgSurface_LockLifetime"]], "pgsurface_prep (c function)": [[12, "c.pgSurface_Prep"]], "pgsurface_unlock (c function)": [[12, "c.pgSurface_UnLock"]], "pgsurface_unlockby (c function)": [[12, "c.pgSurface_UnLockBy"]], "pgsurface_unprep (c function)": [[12, "c.pgSurface_Unprep"]], "pg_major_version (c macro)": [[13, "c.PG_MAJOR_VERSION"]], "pg_minor_version (c macro)": [[13, "c.PG_MINOR_VERSION"]], "pg_patch_version (c macro)": [[13, "c.PG_PATCH_VERSION"]], "pg_versionnum (c macro)": [[13, "c.PG_VERSIONNUM"]], "pg_version_atleast (c macro)": [[13, "c.PG_VERSION_ATLEAST"]], "bufferproxy (class in pygame)": [[17, "pygame.BufferProxy"]], "length (pygame.bufferproxy attribute)": [[17, "pygame.BufferProxy.length"]], "parent (pygame.bufferproxy attribute)": [[17, "pygame.BufferProxy.parent"]], "raw (pygame.bufferproxy attribute)": [[17, "pygame.BufferProxy.raw"]], "write() (pygame.bufferproxy method)": [[17, "pygame.BufferProxy.write"]], "camera (class in pygame.camera)": [[18, "pygame.camera.Camera"]], "colorspace() (in module pygame.camera)": [[18, "pygame.camera.colorspace"]], "get_backends() (in module pygame.camera)": [[18, "pygame.camera.get_backends"]], "get_controls() (pygame.camera.camera method)": [[18, "pygame.camera.Camera.get_controls"]], "get_image() (pygame.camera.camera method)": [[18, "pygame.camera.Camera.get_image"]], "get_raw() (pygame.camera.camera method)": [[18, "pygame.camera.Camera.get_raw"]], "get_size() (pygame.camera.camera method)": [[18, "pygame.camera.Camera.get_size"]], "init() (in module pygame.camera)": [[18, "pygame.camera.init"]], "list_cameras() (in module pygame.camera)": [[18, "pygame.camera.list_cameras"]], "module": [[18, "module-pygame.camera"], [19, "module-pygame.cdrom"], [22, "module-pygame.cursors"], [23, "module-pygame.display"], [24, "module-pygame.draw"], [25, "module-pygame.event"], [26, "module-pygame.examples"], [27, "module-pygame.fastevent"], [28, "module-pygame.font"], [29, "module-pygame.freetype"], [30, "module-pygame.gfxdraw"], [31, "module-pygame.image"], [32, "module-pygame.joystick"], [33, "module-pygame.key"], [34, "module-pygame.locals"], [35, "module-pygame.mask"], [36, "module-pygame.math"], [37, "module-pygame.midi"], [38, "module-pygame.mixer"], [39, "module-pygame.mouse"], [40, "module-pygame.mixer.music"], [43, "module-pygame.pixelcopy"], [44, "module-pygame"], [44, "module-pygame.version"], [46, "module-pygame.scrap"], [47, "module-pygame._sdl2.controller"], [48, "module-pygame._sdl2.video"], [49, "module-pygame.sndarray"], [50, "module-pygame.sprite"], [52, "module-pygame.surfarray"], [53, "module-pygame.tests"], [54, "module-pygame.time"], [55, "module-pygame._sdl2.touch"], [56, "module-pygame.transform"]], "pygame.camera": [[18, "module-pygame.camera"]], "query_image() (pygame.camera.camera method)": [[18, "pygame.camera.Camera.query_image"]], "set_controls() (pygame.camera.camera method)": [[18, "pygame.camera.Camera.set_controls"]], "start() (pygame.camera.camera method)": [[18, "pygame.camera.Camera.start"]], "stop() (pygame.camera.camera method)": [[18, "pygame.camera.Camera.stop"]], "cd (class in pygame.cdrom)": [[19, "pygame.cdrom.CD"]], "eject() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.eject"]], "get_all() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_all"]], "get_busy() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_busy"]], "get_count() (in module pygame.cdrom)": [[19, "pygame.cdrom.get_count"]], "get_current() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_current"]], "get_empty() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_empty"]], "get_id() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_id"]], "get_init() (in module pygame.cdrom)": [[19, "pygame.cdrom.get_init"]], "get_init() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_init"]], "get_name() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_name"]], "get_numtracks() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_numtracks"]], "get_paused() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_paused"]], "get_track_audio() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_track_audio"]], "get_track_length() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_track_length"]], "get_track_start() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.get_track_start"]], "init() (in module pygame.cdrom)": [[19, "pygame.cdrom.init"]], "init() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.init"]], "pause() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.pause"]], "play() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.play"]], "pygame.cdrom": [[19, "module-pygame.cdrom"]], "quit() (in module pygame.cdrom)": [[19, "pygame.cdrom.quit"]], "quit() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.quit"]], "resume() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.resume"]], "stop() (pygame.cdrom.cd method)": [[19, "pygame.cdrom.CD.stop"]], "color (class in pygame)": [[20, "pygame.Color"]], "a (pygame.color attribute)": [[20, "pygame.Color.a"]], "b (pygame.color attribute)": [[20, "pygame.Color.b"]], "cmy (pygame.color attribute)": [[20, "pygame.Color.cmy"]], "correct_gamma() (pygame.color method)": [[20, "pygame.Color.correct_gamma"]], "g (pygame.color attribute)": [[20, "pygame.Color.g"]], "grayscale() (pygame.color method)": [[20, "pygame.Color.grayscale"]], "hsla (pygame.color attribute)": [[20, "pygame.Color.hsla"]], "hsva (pygame.color attribute)": [[20, "pygame.Color.hsva"]], "i1i2i3 (pygame.color attribute)": [[20, "pygame.Color.i1i2i3"]], "lerp() (pygame.color method)": [[20, "pygame.Color.lerp"]], "normalize() (pygame.color method)": [[20, "pygame.Color.normalize"]], "premul_alpha() (pygame.color method)": [[20, "pygame.Color.premul_alpha"]], "r (pygame.color attribute)": [[20, "pygame.Color.r"]], "set_length() (pygame.color method)": [[20, "pygame.Color.set_length"]], "update() (pygame.color method)": [[20, "pygame.Color.update"]], "cursor (class in pygame.cursors)": [[22, "pygame.cursors.Cursor"]], "compile() (in module pygame.cursors)": [[22, "pygame.cursors.compile"]], "copy() (pygame.cursors.cursor method)": [[22, "pygame.cursors.Cursor.copy"]], "data (pygame.cursors.cursor attribute)": [[22, "pygame.cursors.Cursor.data"]], "load_xbm() (in module pygame.cursors)": [[22, "pygame.cursors.load_xbm"]], "pygame.cursors": [[22, "module-pygame.cursors"]], "type (pygame.cursors.cursor attribute)": [[22, "pygame.cursors.Cursor.type"]], "info() (in module pygame.display)": [[23, "pygame.display.Info"]], "flip() (in module pygame.display)": [[23, "pygame.display.flip"]], "get_active() (in module pygame.display)": [[23, "pygame.display.get_active"]], "get_allow_screensaver() (in module pygame.display)": [[23, "pygame.display.get_allow_screensaver"]], "get_caption() (in module pygame.display)": [[23, "pygame.display.get_caption"]], "get_desktop_sizes() (in module pygame.display)": [[23, "pygame.display.get_desktop_sizes"]], "get_driver() (in module pygame.display)": [[23, "pygame.display.get_driver"]], "get_init() (in module pygame.display)": [[23, "pygame.display.get_init"]], "get_num_displays() (in module pygame.display)": [[23, "pygame.display.get_num_displays"]], "get_surface() (in module pygame.display)": [[23, "pygame.display.get_surface"]], "get_window_size() (in module pygame.display)": [[23, "pygame.display.get_window_size"]], "get_wm_info() (in module pygame.display)": [[23, "pygame.display.get_wm_info"]], "gl_get_attribute() (in module pygame.display)": [[23, "pygame.display.gl_get_attribute"]], "gl_set_attribute() (in module pygame.display)": [[23, "pygame.display.gl_set_attribute"]], "iconify() (in module pygame.display)": [[23, "pygame.display.iconify"]], "init() (in module pygame.display)": [[23, "pygame.display.init"]], "list_modes() (in module pygame.display)": [[23, "pygame.display.list_modes"]], "mode_ok() (in module pygame.display)": [[23, "pygame.display.mode_ok"]], "pygame.display": [[23, "module-pygame.display"]], "quit() (in module pygame.display)": [[23, "pygame.display.quit"]], "set_allow_screensaver() (in module pygame.display)": [[23, "pygame.display.set_allow_screensaver"]], "set_caption() (in module pygame.display)": [[23, "pygame.display.set_caption"]], "set_gamma() (in module pygame.display)": [[23, "pygame.display.set_gamma"]], "set_gamma_ramp() (in module pygame.display)": [[23, "pygame.display.set_gamma_ramp"]], "set_icon() (in module pygame.display)": [[23, "pygame.display.set_icon"]], "set_mode() (in module pygame.display)": [[23, "pygame.display.set_mode"]], "set_palette() (in module pygame.display)": [[23, "pygame.display.set_palette"]], "toggle_fullscreen() (in module pygame.display)": [[23, "pygame.display.toggle_fullscreen"]], "update() (in module pygame.display)": [[23, "pygame.display.update"]], "aaline() (in module pygame.draw)": [[24, "pygame.draw.aaline"]], "aalines() (in module pygame.draw)": [[24, "pygame.draw.aalines"]], "arc() (in module pygame.draw)": [[24, "pygame.draw.arc"]], "circle() (in module pygame.draw)": [[24, "pygame.draw.circle"]], "ellipse() (in module pygame.draw)": [[24, "pygame.draw.ellipse"]], "line() (in module pygame.draw)": [[24, "pygame.draw.line"]], "lines() (in module pygame.draw)": [[24, "pygame.draw.lines"]], "polygon() (in module pygame.draw)": [[24, "pygame.draw.polygon"]], "pygame.draw": [[24, "module-pygame.draw"]], "rect() (in module pygame.draw)": [[24, "pygame.draw.rect"]], "event (class in pygame.event)": [[25, "pygame.event.Event"]], "__dict__ (pygame.event.event attribute)": [[25, "pygame.event.Event.__dict__"]], "clear() (in module pygame.event)": [[25, "pygame.event.clear"]], "custom_type() (in module pygame.event)": [[25, "pygame.event.custom_type"]], "event_name() (in module pygame.event)": [[25, "pygame.event.event_name"]], "get() (in module pygame.event)": [[25, "pygame.event.get"]], "get_blocked() (in module pygame.event)": [[25, "pygame.event.get_blocked"]], "get_grab() (in module pygame.event)": [[25, "pygame.event.get_grab"]], "peek() (in module pygame.event)": [[25, "pygame.event.peek"]], "poll() (in module pygame.event)": [[25, "pygame.event.poll"]], "post() (in module pygame.event)": [[25, "pygame.event.post"]], "pump() (in module pygame.event)": [[25, "pygame.event.pump"]], "pygame.event": [[25, "module-pygame.event"]], "set_allowed() (in module pygame.event)": [[25, "pygame.event.set_allowed"]], "set_blocked() (in module pygame.event)": [[25, "pygame.event.set_blocked"]], "set_grab() (in module pygame.event)": [[25, "pygame.event.set_grab"]], "type (pygame.event.event attribute)": [[25, "pygame.event.Event.type"]], "wait() (in module pygame.event)": [[25, "pygame.event.wait"]], "aliens.main() (in module pygame.examples)": [[26, "pygame.examples.aliens.main"]], "arraydemo.main() (in module pygame.examples)": [[26, "pygame.examples.arraydemo.main"]], "blend_fill.main() (in module pygame.examples)": [[26, "pygame.examples.blend_fill.main"]], "blit_blends.main() (in module pygame.examples)": [[26, "pygame.examples.blit_blends.main"]], "camera.main() (in module pygame.examples)": [[26, "pygame.examples.camera.main"]], "chimp.main() (in module pygame.examples)": [[26, "pygame.examples.chimp.main"]], "cursors.main() (in module pygame.examples)": [[26, "pygame.examples.cursors.main"]], "eventlist.main() (in module pygame.examples)": [[26, "pygame.examples.eventlist.main"]], "fonty.main() (in module pygame.examples)": [[26, "pygame.examples.fonty.main"]], "freetype_misc.main() (in module pygame.examples)": [[26, "pygame.examples.freetype_misc.main"]], "glcube.main() (in module pygame.examples)": [[26, "pygame.examples.glcube.main"]], "headless_no_windows_needed.main() (in module pygame.examples)": [[26, "pygame.examples.headless_no_windows_needed.main"]], "joystick.main() (in module pygame.examples)": [[26, "pygame.examples.joystick.main"]], "liquid.main() (in module pygame.examples)": [[26, "pygame.examples.liquid.main"]], "mask.main() (in module pygame.examples)": [[26, "pygame.examples.mask.main"]], "midi.main() (in module pygame.examples)": [[26, "pygame.examples.midi.main"]], "moveit.main() (in module pygame.examples)": [[26, "pygame.examples.moveit.main"]], "pixelarray.main() (in module pygame.examples)": [[26, "pygame.examples.pixelarray.main"]], "playmus.main() (in module pygame.examples)": [[26, "pygame.examples.playmus.main"]], "pygame.examples": [[26, "module-pygame.examples"]], "scaletest.main() (in module pygame.examples)": [[26, "pygame.examples.scaletest.main"]], "scrap_clipboard.main() (in module pygame.examples)": [[26, "pygame.examples.scrap_clipboard.main"]], "scroll.main() (in module pygame.examples)": [[26, "pygame.examples.scroll.main"]], "sound.main() (in module pygame.examples)": [[26, "pygame.examples.sound.main"]], "sound_array_demos.main() (in module pygame.examples)": [[26, "pygame.examples.sound_array_demos.main"]], "stars.main() (in module pygame.examples)": [[26, "pygame.examples.stars.main"]], "testsprite.main() (in module pygame.examples)": [[26, "pygame.examples.testsprite.main"]], "vgrade.main() (in module pygame.examples)": [[26, "pygame.examples.vgrade.main"]], "get() (in module pygame.fastevent)": [[27, "pygame.fastevent.get"]], "get_init() (in module pygame.fastevent)": [[27, "pygame.fastevent.get_init"]], "init() (in module pygame.fastevent)": [[27, "pygame.fastevent.init"]], "poll() (in module pygame.fastevent)": [[27, "pygame.fastevent.poll"]], "post() (in module pygame.fastevent)": [[27, "pygame.fastevent.post"]], "pump() (in module pygame.fastevent)": [[27, "pygame.fastevent.pump"]], "pygame.fastevent": [[27, "module-pygame.fastevent"]], "wait() (in module pygame.fastevent)": [[27, "pygame.fastevent.wait"]], "font (class in pygame.font)": [[28, "pygame.font.Font"]], "sysfont() (in module pygame.font)": [[28, "pygame.font.SysFont"]], "bold (pygame.font.font attribute)": [[28, "pygame.font.Font.bold"]], "get_ascent() (pygame.font.font method)": [[28, "pygame.font.Font.get_ascent"]], "get_bold() (pygame.font.font method)": [[28, "pygame.font.Font.get_bold"]], "get_default_font() (in module pygame.font)": [[28, "pygame.font.get_default_font"]], "get_descent() (pygame.font.font method)": [[28, "pygame.font.Font.get_descent"]], "get_fonts() (in module pygame.font)": [[28, "pygame.font.get_fonts"]], "get_height() (pygame.font.font method)": [[28, "pygame.font.Font.get_height"]], "get_init() (in module pygame.font)": [[28, "pygame.font.get_init"]], "get_italic() (pygame.font.font method)": [[28, "pygame.font.Font.get_italic"]], "get_linesize() (pygame.font.font method)": [[28, "pygame.font.Font.get_linesize"]], "get_sdl_ttf_version() (in module pygame.font)": [[28, "pygame.font.get_sdl_ttf_version"]], "get_strikethrough() (pygame.font.font method)": [[28, "pygame.font.Font.get_strikethrough"]], "get_underline() (pygame.font.font method)": [[28, "pygame.font.Font.get_underline"]], "init() (in module pygame.font)": [[28, "pygame.font.init"]], "italic (pygame.font.font attribute)": [[28, "pygame.font.Font.italic"]], "match_font() (in module pygame.font)": [[28, "pygame.font.match_font"]], "metrics() (pygame.font.font method)": [[28, "pygame.font.Font.metrics"]], "pygame.font": [[28, "module-pygame.font"]], "quit() (in module pygame.font)": [[28, "pygame.font.quit"]], "render() (pygame.font.font method)": [[28, "pygame.font.Font.render"]], "set_bold() (pygame.font.font method)": [[28, "pygame.font.Font.set_bold"]], "set_italic() (pygame.font.font method)": [[28, "pygame.font.Font.set_italic"]], "set_script() (pygame.font.font method)": [[28, "pygame.font.Font.set_script"]], "set_strikethrough() (pygame.font.font method)": [[28, "pygame.font.Font.set_strikethrough"]], "set_underline() (pygame.font.font method)": [[28, "pygame.font.Font.set_underline"]], "size() (pygame.font.font method)": [[28, "pygame.font.Font.size"]], "strikethrough (pygame.font.font attribute)": [[28, "pygame.font.Font.strikethrough"]], "underline (pygame.font.font attribute)": [[28, "pygame.font.Font.underline"]], "font (class in pygame.freetype)": [[29, "pygame.freetype.Font"]], "sysfont() (in module pygame.freetype)": [[29, "pygame.freetype.SysFont"]], "antialiased (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.antialiased"]], "ascender (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.ascender"]], "bgcolor (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.bgcolor"]], "descender (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.descender"]], "fgcolor (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.fgcolor"]], "fixed_sizes (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.fixed_sizes"]], "fixed_width (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.fixed_width"]], "get_cache_size() (in module pygame.freetype)": [[29, "pygame.freetype.get_cache_size"]], "get_default_font() (in module pygame.freetype)": [[29, "pygame.freetype.get_default_font"]], "get_default_resolution() (in module pygame.freetype)": [[29, "pygame.freetype.get_default_resolution"]], "get_error() (in module pygame.freetype)": [[29, "pygame.freetype.get_error"]], "get_init() (in module pygame.freetype)": [[29, "pygame.freetype.get_init"]], "get_metrics() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.get_metrics"]], "get_rect() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.get_rect"]], "get_sized_ascender() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.get_sized_ascender"]], "get_sized_descender() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.get_sized_descender"]], "get_sized_glyph_height() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.get_sized_glyph_height"]], "get_sized_height() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.get_sized_height"]], "get_sizes() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.get_sizes"]], "get_version() (in module pygame.freetype)": [[29, "pygame.freetype.get_version"]], "height (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.height"]], "init() (in module pygame.freetype)": [[29, "pygame.freetype.init"]], "kerning (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.kerning"]], "name (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.name"]], "oblique (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.oblique"]], "origin (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.origin"]], "pad (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.pad"]], "path (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.path"]], "pygame.freetype": [[29, "module-pygame.freetype"]], "quit() (in module pygame.freetype)": [[29, "pygame.freetype.quit"]], "render() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.render"]], "render_raw() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.render_raw"]], "render_raw_to() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.render_raw_to"]], "render_to() (pygame.freetype.font method)": [[29, "pygame.freetype.Font.render_to"]], "resolution (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.resolution"]], "rotation (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.rotation"]], "scalable (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.scalable"]], "set_default_resolution() (in module pygame.freetype)": [[29, "pygame.freetype.set_default_resolution"]], "size (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.size"]], "strength (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.strength"]], "strong (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.strong"]], "style (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.style"]], "ucs4 (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.ucs4"]], "underline (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.underline"]], "underline_adjustment (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.underline_adjustment"]], "use_bitmap_strikes (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.use_bitmap_strikes"]], "vertical (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.vertical"]], "was_init() (in module pygame.freetype)": [[29, "pygame.freetype.was_init"]], "wide (pygame.freetype.font attribute)": [[29, "pygame.freetype.Font.wide"]], "aacircle() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.aacircle"]], "aaellipse() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.aaellipse"]], "aapolygon() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.aapolygon"]], "aatrigon() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.aatrigon"]], "arc() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.arc"]], "bezier() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.bezier"]], "box() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.box"]], "circle() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.circle"]], "ellipse() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.ellipse"]], "filled_circle() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.filled_circle"]], "filled_ellipse() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.filled_ellipse"]], "filled_polygon() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.filled_polygon"]], "filled_trigon() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.filled_trigon"]], "hline() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.hline"]], "line() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.line"]], "pie() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.pie"]], "pixel() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.pixel"]], "polygon() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.polygon"]], "pygame.gfxdraw": [[30, "module-pygame.gfxdraw"]], "rectangle() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.rectangle"]], "textured_polygon() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.textured_polygon"]], "trigon() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.trigon"]], "vline() (in module pygame.gfxdraw)": [[30, "pygame.gfxdraw.vline"]], "frombuffer() (in module pygame.image)": [[31, "pygame.image.frombuffer"]], "frombytes() (in module pygame.image)": [[31, "pygame.image.frombytes"]], "fromstring() (in module pygame.image)": [[31, "pygame.image.fromstring"]], "get_extended() (in module pygame.image)": [[31, "pygame.image.get_extended"]], "get_sdl_image_version() (in module pygame.image)": [[31, "pygame.image.get_sdl_image_version"]], "load() (in module pygame.image)": [[31, "pygame.image.load"]], "load_basic() (in module pygame.image)": [[31, "pygame.image.load_basic"]], "load_extended() (in module pygame.image)": [[31, "pygame.image.load_extended"]], "pygame.image": [[31, "module-pygame.image"]], "save() (in module pygame.image)": [[31, "pygame.image.save"]], "save_extended() (in module pygame.image)": [[31, "pygame.image.save_extended"]], "tobytes() (in module pygame.image)": [[31, "pygame.image.tobytes"]], "tostring() (in module pygame.image)": [[31, "pygame.image.tostring"]], "joystick (class in pygame.joystick)": [[32, "pygame.joystick.Joystick"]], "get_axis() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_axis"]], "get_ball() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_ball"]], "get_button() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_button"]], "get_count() (in module pygame.joystick)": [[32, "pygame.joystick.get_count"]], "get_guid() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_guid"]], "get_hat() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_hat"]], "get_id() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_id"]], "get_init() (in module pygame.joystick)": [[32, "pygame.joystick.get_init"]], "get_init() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_init"]], "get_instance_id() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_instance_id"]], "get_name() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_name"]], "get_numaxes() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_numaxes"]], "get_numballs() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_numballs"]], "get_numbuttons() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_numbuttons"]], "get_numhats() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_numhats"]], "get_power_level() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.get_power_level"]], "init() (in module pygame.joystick)": [[32, "pygame.joystick.init"]], "init() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.init"]], "pygame.joystick": [[32, "module-pygame.joystick"]], "quit() (in module pygame.joystick)": [[32, "pygame.joystick.quit"]], "quit() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.quit"]], "rumble() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.rumble"]], "stop_rumble() (pygame.joystick.joystick method)": [[32, "pygame.joystick.Joystick.stop_rumble"]], "get_focused() (in module pygame.key)": [[33, "pygame.key.get_focused"]], "get_mods() (in module pygame.key)": [[33, "pygame.key.get_mods"]], "get_pressed() (in module pygame.key)": [[33, "pygame.key.get_pressed"]], "get_repeat() (in module pygame.key)": [[33, "pygame.key.get_repeat"]], "key_code() (in module pygame.key)": [[33, "pygame.key.key_code"]], "name() (in module pygame.key)": [[33, "pygame.key.name"]], "pygame.key": [[33, "module-pygame.key"]], "set_mods() (in module pygame.key)": [[33, "pygame.key.set_mods"]], "set_repeat() (in module pygame.key)": [[33, "pygame.key.set_repeat"]], "set_text_input_rect() (in module pygame.key)": [[33, "pygame.key.set_text_input_rect"]], "start_text_input() (in module pygame.key)": [[33, "pygame.key.start_text_input"]], "stop_text_input() (in module pygame.key)": [[33, "pygame.key.stop_text_input"]], "pygame.locals": [[34, "module-pygame.locals"]], "mask (class in pygame.mask)": [[35, "pygame.mask.Mask"]], "angle() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.angle"]], "centroid() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.centroid"]], "clear() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.clear"]], "connected_component() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.connected_component"]], "connected_components() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.connected_components"]], "convolve() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.convolve"]], "copy() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.copy"]], "count() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.count"]], "draw() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.draw"]], "erase() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.erase"]], "fill() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.fill"]], "from_surface() (in module pygame.mask)": [[35, "pygame.mask.from_surface"]], "from_threshold() (in module pygame.mask)": [[35, "pygame.mask.from_threshold"]], "get_at() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.get_at"]], "get_bounding_rects() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.get_bounding_rects"]], "get_rect() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.get_rect"]], "get_size() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.get_size"]], "invert() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.invert"]], "outline() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.outline"]], "overlap() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.overlap"]], "overlap_area() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.overlap_area"]], "overlap_mask() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.overlap_mask"]], "pygame.mask": [[35, "module-pygame.mask"]], "scale() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.scale"]], "set_at() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.set_at"]], "to_surface() (pygame.mask.mask method)": [[35, "pygame.mask.Mask.to_surface"]], "vector2 (class in pygame.math)": [[36, "pygame.math.Vector2"]], "vector3 (class in pygame.math)": [[36, "pygame.math.Vector3"]], "angle_to() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.angle_to"]], "angle_to() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.angle_to"]], "as_polar() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.as_polar"]], "as_spherical() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.as_spherical"]], "clamp() (in module pygame.math)": [[36, "pygame.math.clamp"]], "clamp_magnitude() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.clamp_magnitude"]], "clamp_magnitude() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.clamp_magnitude"]], "clamp_magnitude_ip() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.clamp_magnitude_ip"]], "clamp_magnitude_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.clamp_magnitude_ip"]], "copy() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.copy"]], "copy() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.copy"]], "cross() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.cross"]], "cross() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.cross"]], "distance_squared_to() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.distance_squared_to"]], "distance_squared_to() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.distance_squared_to"]], "distance_to() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.distance_to"]], "distance_to() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.distance_to"]], "dot() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.dot"]], "dot() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.dot"]], "elementwise() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.elementwise"]], "elementwise() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.elementwise"]], "epsilon (pygame.math.vector2 attribute)": [[36, "pygame.math.Vector2.epsilon"]], "epsilon (pygame.math.vector3 attribute)": [[36, "pygame.math.Vector3.epsilon"]], "from_polar() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.from_polar"]], "from_spherical() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.from_spherical"]], "is_normalized() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.is_normalized"]], "is_normalized() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.is_normalized"]], "length() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.length"]], "length() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.length"]], "length_squared() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.length_squared"]], "length_squared() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.length_squared"]], "lerp() (in module pygame.math)": [[36, "pygame.math.lerp"]], "lerp() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.lerp"]], "lerp() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.lerp"]], "magnitude() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.magnitude"]], "magnitude() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.magnitude"]], "magnitude_squared() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.magnitude_squared"]], "magnitude_squared() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.magnitude_squared"]], "move_towards() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.move_towards"]], "move_towards() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.move_towards"]], "move_towards_ip() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.move_towards_ip"]], "move_towards_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.move_towards_ip"]], "normalize() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.normalize"]], "normalize() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.normalize"]], "normalize_ip() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.normalize_ip"]], "normalize_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.normalize_ip"]], "project() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.project"]], "project() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.project"]], "pygame.math": [[36, "module-pygame.math"]], "reflect() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.reflect"]], "reflect() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.reflect"]], "reflect_ip() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.reflect_ip"]], "reflect_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.reflect_ip"]], "rotate() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.rotate"]], "rotate() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate"]], "rotate_ip() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.rotate_ip"]], "rotate_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_ip"]], "rotate_ip_rad() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.rotate_ip_rad"]], "rotate_ip_rad() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_ip_rad"]], "rotate_rad() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.rotate_rad"]], "rotate_rad() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_rad"]], "rotate_rad_ip() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.rotate_rad_ip"]], "rotate_rad_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_rad_ip"]], "rotate_x() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_x"]], "rotate_x_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_x_ip"]], "rotate_x_ip_rad() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_x_ip_rad"]], "rotate_x_rad() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_x_rad"]], "rotate_x_rad_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_x_rad_ip"]], "rotate_y() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_y"]], "rotate_y_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_y_ip"]], "rotate_y_ip_rad() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_y_ip_rad"]], "rotate_y_rad() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_y_rad"]], "rotate_y_rad_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_y_rad_ip"]], "rotate_z() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_z"]], "rotate_z_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_z_ip"]], "rotate_z_ip_rad() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_z_ip_rad"]], "rotate_z_rad() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_z_rad"]], "rotate_z_rad_ip() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.rotate_z_rad_ip"]], "scale_to_length() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.scale_to_length"]], "scale_to_length() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.scale_to_length"]], "slerp() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.slerp"]], "slerp() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.slerp"]], "update() (pygame.math.vector2 method)": [[36, "pygame.math.Vector2.update"]], "update() (pygame.math.vector3 method)": [[36, "pygame.math.Vector3.update"]], "input (class in pygame.midi)": [[37, "pygame.midi.Input"]], "midiexception": [[37, "pygame.midi.MidiException"]], "output (class in pygame.midi)": [[37, "pygame.midi.Output"]], "abort() (pygame.midi.output method)": [[37, "pygame.midi.Output.abort"]], "close() (pygame.midi.input method)": [[37, "pygame.midi.Input.close"]], "close() (pygame.midi.output method)": [[37, "pygame.midi.Output.close"]], "frequency_to_midi() (in module pygame.midi)": [[37, "pygame.midi.frequency_to_midi"]], "get_count() (in module pygame.midi)": [[37, "pygame.midi.get_count"]], "get_default_input_id() (in module pygame.midi)": [[37, "pygame.midi.get_default_input_id"]], "get_default_output_id() (in module pygame.midi)": [[37, "pygame.midi.get_default_output_id"]], "get_device_info() (in module pygame.midi)": [[37, "pygame.midi.get_device_info"]], "get_init() (in module pygame.midi)": [[37, "pygame.midi.get_init"]], "init() (in module pygame.midi)": [[37, "pygame.midi.init"]], "midi_to_ansi_note() (in module pygame.midi)": [[37, "pygame.midi.midi_to_ansi_note"]], "midi_to_frequency() (in module pygame.midi)": [[37, "pygame.midi.midi_to_frequency"]], "midis2events() (in module pygame.midi)": [[37, "pygame.midi.midis2events"]], "note_off() (pygame.midi.output method)": [[37, "pygame.midi.Output.note_off"]], "note_on() (pygame.midi.output method)": [[37, "pygame.midi.Output.note_on"]], "pitch_bend() (pygame.midi.output method)": [[37, "pygame.midi.Output.pitch_bend"]], "poll() (pygame.midi.input method)": [[37, "pygame.midi.Input.poll"]], "pygame.midi": [[37, "module-pygame.midi"]], "quit() (in module pygame.midi)": [[37, "pygame.midi.quit"]], "read() (pygame.midi.input method)": [[37, "pygame.midi.Input.read"]], "set_instrument() (pygame.midi.output method)": [[37, "pygame.midi.Output.set_instrument"]], "time() (in module pygame.midi)": [[37, "pygame.midi.time"]], "write() (pygame.midi.output method)": [[37, "pygame.midi.Output.write"]], "write_short() (pygame.midi.output method)": [[37, "pygame.midi.Output.write_short"]], "write_sys_ex() (pygame.midi.output method)": [[37, "pygame.midi.Output.write_sys_ex"]], "channel (class in pygame.mixer)": [[38, "pygame.mixer.Channel"]], "sound (class in pygame.mixer)": [[38, "pygame.mixer.Sound"]], "fadeout() (in module pygame.mixer)": [[38, "pygame.mixer.fadeout"]], "fadeout() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.fadeout"]], "fadeout() (pygame.mixer.sound method)": [[38, "pygame.mixer.Sound.fadeout"]], "find_channel() (in module pygame.mixer)": [[38, "pygame.mixer.find_channel"]], "get_busy() (in module pygame.mixer)": [[38, "pygame.mixer.get_busy"]], "get_busy() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.get_busy"]], "get_endevent() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.get_endevent"]], "get_init() (in module pygame.mixer)": [[38, "pygame.mixer.get_init"]], "get_length() (pygame.mixer.sound method)": [[38, "pygame.mixer.Sound.get_length"]], "get_num_channels() (in module pygame.mixer)": [[38, "pygame.mixer.get_num_channels"]], "get_num_channels() (pygame.mixer.sound method)": [[38, "pygame.mixer.Sound.get_num_channels"]], "get_queue() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.get_queue"]], "get_raw() (pygame.mixer.sound method)": [[38, "pygame.mixer.Sound.get_raw"]], "get_sdl_mixer_version() (in module pygame.mixer)": [[38, "pygame.mixer.get_sdl_mixer_version"]], "get_sound() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.get_sound"]], "get_volume() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.get_volume"]], "get_volume() (pygame.mixer.sound method)": [[38, "pygame.mixer.Sound.get_volume"]], "init() (in module pygame.mixer)": [[38, "pygame.mixer.init"]], "pause() (in module pygame.mixer)": [[38, "pygame.mixer.pause"]], "pause() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.pause"]], "play() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.play"]], "play() (pygame.mixer.sound method)": [[38, "pygame.mixer.Sound.play"]], "pre_init() (in module pygame.mixer)": [[38, "pygame.mixer.pre_init"]], "pygame.mixer": [[38, "module-pygame.mixer"]], "queue() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.queue"]], "quit() (in module pygame.mixer)": [[38, "pygame.mixer.quit"]], "set_endevent() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.set_endevent"]], "set_num_channels() (in module pygame.mixer)": [[38, "pygame.mixer.set_num_channels"]], "set_reserved() (in module pygame.mixer)": [[38, "pygame.mixer.set_reserved"]], "set_volume() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.set_volume"]], "set_volume() (pygame.mixer.sound method)": [[38, "pygame.mixer.Sound.set_volume"]], "stop() (in module pygame.mixer)": [[38, "pygame.mixer.stop"]], "stop() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.stop"]], "stop() (pygame.mixer.sound method)": [[38, "pygame.mixer.Sound.stop"]], "unpause() (in module pygame.mixer)": [[38, "pygame.mixer.unpause"]], "unpause() (pygame.mixer.channel method)": [[38, "pygame.mixer.Channel.unpause"]], "get_cursor() (in module pygame.mouse)": [[39, "pygame.mouse.get_cursor"]], "get_focused() (in module pygame.mouse)": [[39, "pygame.mouse.get_focused"]], "get_pos() (in module pygame.mouse)": [[39, "pygame.mouse.get_pos"]], "get_pressed() (in module pygame.mouse)": [[39, "pygame.mouse.get_pressed"]], "get_rel() (in module pygame.mouse)": [[39, "pygame.mouse.get_rel"]], "get_visible() (in module pygame.mouse)": [[39, "pygame.mouse.get_visible"]], "pygame.mouse": [[39, "module-pygame.mouse"]], "set_cursor() (in module pygame.mouse)": [[39, "pygame.mouse.set_cursor"]], "set_pos() (in module pygame.mouse)": [[39, "pygame.mouse.set_pos"]], "set_visible() (in module pygame.mouse)": [[39, "pygame.mouse.set_visible"]], "fadeout() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.fadeout"]], "get_busy() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.get_busy"]], "get_endevent() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.get_endevent"]], "get_pos() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.get_pos"]], "get_volume() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.get_volume"]], "load() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.load"]], "pause() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.pause"]], "play() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.play"]], "pygame.mixer.music": [[40, "module-pygame.mixer.music"]], "queue() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.queue"]], "rewind() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.rewind"]], "set_endevent() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.set_endevent"]], "set_pos() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.set_pos"]], "set_volume() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.set_volume"]], "stop() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.stop"]], "unload() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.unload"]], "unpause() (in module pygame.mixer.music)": [[40, "pygame.mixer.music.unpause"]], "overlay (class in pygame)": [[41, "pygame.Overlay"]], "display() (pygame.overlay method)": [[41, "pygame.Overlay.display"]], "get_hardware() (pygame.overlay method)": [[41, "pygame.Overlay.get_hardware"]], "set_location() (pygame.overlay method)": [[41, "pygame.Overlay.set_location"]], "pixelarray (class in pygame)": [[42, "pygame.PixelArray"]], "close() (pygame.pixelarray method)": [[42, "pygame.PixelArray.close"]], "compare() (pygame.pixelarray method)": [[42, "pygame.PixelArray.compare"]], "extract() (pygame.pixelarray method)": [[42, "pygame.PixelArray.extract"]], "itemsize (pygame.pixelarray attribute)": [[42, "pygame.PixelArray.itemsize"]], "make_surface() (pygame.pixelarray method)": [[42, "pygame.PixelArray.make_surface"]], "ndim (pygame.pixelarray attribute)": [[42, "pygame.PixelArray.ndim"]], "replace() (pygame.pixelarray method)": [[42, "pygame.PixelArray.replace"]], "shape (pygame.pixelarray attribute)": [[42, "pygame.PixelArray.shape"]], "strides (pygame.pixelarray attribute)": [[42, "pygame.PixelArray.strides"]], "surface (pygame.pixelarray attribute)": [[42, "pygame.PixelArray.surface"]], "transpose() (pygame.pixelarray method)": [[42, "pygame.PixelArray.transpose"]], "array_to_surface() (in module pygame.pixelcopy)": [[43, "pygame.pixelcopy.array_to_surface"]], "make_surface() (in module pygame.pixelcopy)": [[43, "pygame.pixelcopy.make_surface"]], "map_array() (in module pygame.pixelcopy)": [[43, "pygame.pixelcopy.map_array"]], "pygame.pixelcopy": [[43, "module-pygame.pixelcopy"]], "surface_to_array() (in module pygame.pixelcopy)": [[43, "pygame.pixelcopy.surface_to_array"]], "sdl (in module pygame.version)": [[44, "pygame.version.SDL"]], "encode_file_path() (in module pygame)": [[44, "pygame.encode_file_path"]], "encode_string() (in module pygame)": [[44, "pygame.encode_string"]], "error": [[44, "pygame.error"]], "get_error() (in module pygame)": [[44, "pygame.get_error"]], "get_init() (in module pygame)": [[44, "pygame.get_init"]], "get_sdl_byteorder() (in module pygame)": [[44, "pygame.get_sdl_byteorder"]], "get_sdl_version() (in module pygame)": [[44, "pygame.get_sdl_version"]], "init() (in module pygame)": [[44, "pygame.init"]], "pygame": [[44, "module-pygame"]], "pygame.version": [[44, "module-pygame.version"]], "quit() (in module pygame)": [[44, "pygame.quit"]], "register_quit() (in module pygame)": [[44, "pygame.register_quit"]], "rev (in module pygame.version)": [[44, "pygame.version.rev"]], "set_error() (in module pygame)": [[44, "pygame.set_error"]], "ver (in module pygame.version)": [[44, "pygame.version.ver"]], "vernum (in module pygame.version)": [[44, "pygame.version.vernum"]], "rect (class in pygame)": [[45, "pygame.Rect"]], "clamp() (pygame.rect method)": [[45, "pygame.Rect.clamp"]], "clamp_ip() (pygame.rect method)": [[45, "pygame.Rect.clamp_ip"]], "clip() (pygame.rect method)": [[45, "pygame.Rect.clip"]], "clipline() (pygame.rect method)": [[45, "pygame.Rect.clipline"]], "collidedict() (pygame.rect method)": [[45, "pygame.Rect.collidedict"]], "collidedictall() (pygame.rect method)": [[45, "pygame.Rect.collidedictall"]], "collidelist() (pygame.rect method)": [[45, "pygame.Rect.collidelist"]], "collidelistall() (pygame.rect method)": [[45, "pygame.Rect.collidelistall"]], "collideobjects() (pygame.rect method)": [[45, "pygame.Rect.collideobjects"]], "collideobjectsall() (pygame.rect method)": [[45, "pygame.Rect.collideobjectsall"]], "collidepoint() (pygame.rect method)": [[45, "pygame.Rect.collidepoint"]], "colliderect() (pygame.rect method)": [[45, "pygame.Rect.colliderect"]], "contains() (pygame.rect method)": [[45, "pygame.Rect.contains"]], "copy() (pygame.rect method)": [[45, "pygame.Rect.copy"]], "fit() (pygame.rect method)": [[45, "pygame.Rect.fit"]], "inflate() (pygame.rect method)": [[45, "pygame.Rect.inflate"]], "inflate_ip() (pygame.rect method)": [[45, "pygame.Rect.inflate_ip"]], "move() (pygame.rect method)": [[45, "pygame.Rect.move"]], "move_ip() (pygame.rect method)": [[45, "pygame.Rect.move_ip"]], "normalize() (pygame.rect method)": [[45, "pygame.Rect.normalize"]], "scale_by() (pygame.rect method)": [[45, "pygame.Rect.scale_by"]], "scale_by_ip() (pygame.rect method)": [[45, "pygame.Rect.scale_by_ip"]], "union() (pygame.rect method)": [[45, "pygame.Rect.union"]], "union_ip() (pygame.rect method)": [[45, "pygame.Rect.union_ip"]], "unionall() (pygame.rect method)": [[45, "pygame.Rect.unionall"]], "unionall_ip() (pygame.rect method)": [[45, "pygame.Rect.unionall_ip"]], "update() (pygame.rect method)": [[45, "pygame.Rect.update"]], "contains() (in module pygame.scrap)": [[46, "pygame.scrap.contains"]], "get() (in module pygame.scrap)": [[46, "pygame.scrap.get"]], "get_init() (in module pygame.scrap)": [[46, "pygame.scrap.get_init"]], "get_types() (in module pygame.scrap)": [[46, "pygame.scrap.get_types"]], "init() (in module pygame.scrap)": [[46, "pygame.scrap.init"]], "lost() (in module pygame.scrap)": [[46, "pygame.scrap.lost"]], "put() (in module pygame.scrap)": [[46, "pygame.scrap.put"]], "pygame.scrap": [[46, "module-pygame.scrap"]], "set_mode() (in module pygame.scrap)": [[46, "pygame.scrap.set_mode"]], "controller (class in pygame._sdl2.controller)": [[47, "pygame._sdl2.controller.Controller"]], "as_joystick() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.as_joystick"]], "attached() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.attached"]], "from_joystick() (pygame._sdl2.controller.controller static method)": [[47, "pygame._sdl2.controller.Controller.from_joystick"]], "get_axis() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.get_axis"]], "get_button() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.get_button"]], "get_count() (in module pygame._sdl2.controller)": [[47, "pygame._sdl2.controller.get_count"]], "get_eventstate() (in module pygame._sdl2.controller)": [[47, "pygame._sdl2.controller.get_eventstate"]], "get_init() (in module pygame._sdl2.controller)": [[47, "pygame._sdl2.controller.get_init"]], "get_init() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.get_init"]], "get_mapping() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.get_mapping"]], "init() (in module pygame._sdl2.controller)": [[47, "pygame._sdl2.controller.init"]], "is_controller() (in module pygame._sdl2.controller)": [[47, "pygame._sdl2.controller.is_controller"]], "name_forindex() (in module pygame._sdl2.controller)": [[47, "pygame._sdl2.controller.name_forindex"]], "pygame._sdl2.controller": [[47, "module-pygame._sdl2.controller"]], "quit() (in module pygame._sdl2.controller)": [[47, "pygame._sdl2.controller.quit"]], "quit() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.quit"]], "rumble() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.rumble"]], "set_eventstate() (in module pygame._sdl2.controller)": [[47, "pygame._sdl2.controller.set_eventstate"]], "set_mapping() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.set_mapping"]], "stop_rumble() (pygame._sdl2.controller.controller method)": [[47, "pygame._sdl2.controller.Controller.stop_rumble"]], "image (class in pygame._sdl2.video)": [[48, "pygame._sdl2.video.Image"]], "renderer (class in pygame._sdl2.video)": [[48, "pygame._sdl2.video.Renderer"]], "texture (class in pygame._sdl2.video)": [[48, "pygame._sdl2.video.Texture"]], "window (class in pygame._sdl2.video)": [[48, "pygame._sdl2.video.Window"]], "alpha (pygame._sdl2.video.image attribute)": [[48, "pygame._sdl2.video.Image.alpha"]], "alpha (pygame._sdl2.video.texture attribute)": [[48, "pygame._sdl2.video.Texture.alpha"]], "angle (pygame._sdl2.video.image attribute)": [[48, "pygame._sdl2.video.Image.angle"]], "blend_mode (pygame._sdl2.video.image attribute)": [[48, "pygame._sdl2.video.Image.blend_mode"]], "blend_mode (pygame._sdl2.video.texture attribute)": [[48, "pygame._sdl2.video.Texture.blend_mode"]], "blit() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.blit"]], "borderless (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.borderless"]], "clear() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.clear"]], "color (pygame._sdl2.video.image attribute)": [[48, "pygame._sdl2.video.Image.color"]], "color (pygame._sdl2.video.texture attribute)": [[48, "pygame._sdl2.video.Texture.color"]], "destroy() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.destroy"]], "display_index (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.display_index"]], "draw() (pygame._sdl2.video.image method)": [[48, "pygame._sdl2.video.Image.draw"]], "draw() (pygame._sdl2.video.texture method)": [[48, "pygame._sdl2.video.Texture.draw"]], "draw_blend_mode (pygame._sdl2.video.renderer attribute)": [[48, "pygame._sdl2.video.Renderer.draw_blend_mode"]], "draw_color (pygame._sdl2.video.renderer attribute)": [[48, "pygame._sdl2.video.Renderer.draw_color"]], "draw_line() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.draw_line"]], "draw_point() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.draw_point"]], "draw_rect() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.draw_rect"]], "fill_rect() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.fill_rect"]], "flip_x (pygame._sdl2.video.image attribute)": [[48, "pygame._sdl2.video.Image.flip_x"]], "flip_y (pygame._sdl2.video.image attribute)": [[48, "pygame._sdl2.video.Image.flip_y"]], "focus() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.focus"]], "from_display_module() (pygame._sdl2.video.window class method)": [[48, "pygame._sdl2.video.Window.from_display_module"]], "from_surface() (pygame._sdl2.video.texture static method)": [[48, "pygame._sdl2.video.Texture.from_surface"]], "from_window() (pygame._sdl2.video.renderer class method)": [[48, "pygame._sdl2.video.Renderer.from_window"]], "from_window() (pygame._sdl2.video.window class method)": [[48, "pygame._sdl2.video.Window.from_window"]], "get_rect() (pygame._sdl2.video.image method)": [[48, "pygame._sdl2.video.Image.get_rect"]], "get_rect() (pygame._sdl2.video.texture method)": [[48, "pygame._sdl2.video.Texture.get_rect"]], "get_viewport() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.get_viewport"]], "grab (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.grab"]], "height (pygame._sdl2.video.texture attribute)": [[48, "pygame._sdl2.video.Texture.height"]], "hide() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.hide"]], "id (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.id"]], "logical_size (pygame._sdl2.video.renderer attribute)": [[48, "pygame._sdl2.video.Renderer.logical_size"]], "maximize() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.maximize"]], "minimize() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.minimize"]], "opacity (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.opacity"]], "origin (pygame._sdl2.video.image attribute)": [[48, "pygame._sdl2.video.Image.origin"]], "position (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.position"]], "present() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.present"]], "pygame._sdl2.video": [[48, "module-pygame._sdl2.video"]], "relative_mouse (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.relative_mouse"]], "renderer (pygame._sdl2.video.texture attribute)": [[48, "pygame._sdl2.video.Texture.renderer"]], "resizable (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.resizable"]], "restore() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.restore"]], "scale (pygame._sdl2.video.renderer attribute)": [[48, "pygame._sdl2.video.Renderer.scale"]], "set_fullscreen() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.set_fullscreen"]], "set_icon() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.set_icon"]], "set_modal_for() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.set_modal_for"]], "set_viewport() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.set_viewport"]], "set_windowed() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.set_windowed"]], "show() (pygame._sdl2.video.window method)": [[48, "pygame._sdl2.video.Window.show"]], "size (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.size"]], "srcrect (pygame._sdl2.video.image attribute)": [[48, "pygame._sdl2.video.Image.srcrect"]], "target (pygame._sdl2.video.renderer attribute)": [[48, "pygame._sdl2.video.Renderer.target"]], "texture (pygame._sdl2.video.image attribute)": [[48, "pygame._sdl2.video.Image.texture"]], "title (pygame._sdl2.video.window attribute)": [[48, "pygame._sdl2.video.Window.title"]], "to_surface() (pygame._sdl2.video.renderer method)": [[48, "pygame._sdl2.video.Renderer.to_surface"]], "update() (pygame._sdl2.video.texture method)": [[48, "pygame._sdl2.video.Texture.update"]], "width (pygame._sdl2.video.texture attribute)": [[48, "pygame._sdl2.video.Texture.width"]], "array() (in module pygame.sndarray)": [[49, "pygame.sndarray.array"]], "get_arraytype() (in module pygame.sndarray)": [[49, "pygame.sndarray.get_arraytype"]], "get_arraytypes() (in module pygame.sndarray)": [[49, "pygame.sndarray.get_arraytypes"]], "make_sound() (in module pygame.sndarray)": [[49, "pygame.sndarray.make_sound"]], "pygame.sndarray": [[49, "module-pygame.sndarray"]], "samples() (in module pygame.sndarray)": [[49, "pygame.sndarray.samples"]], "use_arraytype() (in module pygame.sndarray)": [[49, "pygame.sndarray.use_arraytype"]], "dirtysprite (class in pygame.sprite)": [[50, "pygame.sprite.DirtySprite"]], "group (class in pygame.sprite)": [[50, "pygame.sprite.Group"]], "groupsingle() (in module pygame.sprite)": [[50, "pygame.sprite.GroupSingle"]], "layereddirty (class in pygame.sprite)": [[50, "pygame.sprite.LayeredDirty"]], "layeredupdates (class in pygame.sprite)": [[50, "pygame.sprite.LayeredUpdates"]], "orderedupdates() (in module pygame.sprite)": [[50, "pygame.sprite.OrderedUpdates"]], "renderclear (class in pygame.sprite)": [[50, "pygame.sprite.RenderClear"]], "renderplain (class in pygame.sprite)": [[50, "pygame.sprite.RenderPlain"]], "renderupdates (class in pygame.sprite)": [[50, "pygame.sprite.RenderUpdates"]], "sprite (class in pygame.sprite)": [[50, "pygame.sprite.Sprite"]], "add() (pygame.sprite.group method)": [[50, "pygame.sprite.Group.add"]], "add() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.add"]], "add() (pygame.sprite.sprite method)": [[50, "pygame.sprite.Sprite.add"]], "alive() (pygame.sprite.sprite method)": [[50, "pygame.sprite.Sprite.alive"]], "change_layer() (pygame.sprite.layereddirty method)": [[50, "pygame.sprite.LayeredDirty.change_layer"]], "change_layer() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.change_layer"]], "clear() (pygame.sprite.group method)": [[50, "pygame.sprite.Group.clear"]], "clear() (pygame.sprite.layereddirty method)": [[50, "pygame.sprite.LayeredDirty.clear"]], "collide_circle() (in module pygame.sprite)": [[50, "pygame.sprite.collide_circle"]], "collide_circle_ratio() (in module pygame.sprite)": [[50, "pygame.sprite.collide_circle_ratio"]], "collide_mask() (in module pygame.sprite)": [[50, "pygame.sprite.collide_mask"]], "collide_rect() (in module pygame.sprite)": [[50, "pygame.sprite.collide_rect"]], "collide_rect_ratio() (in module pygame.sprite)": [[50, "pygame.sprite.collide_rect_ratio"]], "copy() (pygame.sprite.group method)": [[50, "pygame.sprite.Group.copy"]], "draw() (pygame.sprite.group method)": [[50, "pygame.sprite.Group.draw"]], "draw() (pygame.sprite.layereddirty method)": [[50, "pygame.sprite.LayeredDirty.draw"]], "draw() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.draw"]], "draw() (pygame.sprite.renderupdates method)": [[50, "pygame.sprite.RenderUpdates.draw"]], "empty() (pygame.sprite.group method)": [[50, "pygame.sprite.Group.empty"]], "get_bottom_layer() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.get_bottom_layer"]], "get_clip() (pygame.sprite.layereddirty method)": [[50, "pygame.sprite.LayeredDirty.get_clip"]], "get_layer_of_sprite() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.get_layer_of_sprite"]], "get_sprite() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.get_sprite"]], "get_sprites_at() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.get_sprites_at"]], "get_sprites_from_layer() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.get_sprites_from_layer"]], "get_top_layer() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.get_top_layer"]], "get_top_sprite() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.get_top_sprite"]], "groupcollide() (in module pygame.sprite)": [[50, "pygame.sprite.groupcollide"]], "groups() (pygame.sprite.sprite method)": [[50, "pygame.sprite.Sprite.groups"]], "has() (pygame.sprite.group method)": [[50, "pygame.sprite.Group.has"]], "kill() (pygame.sprite.sprite method)": [[50, "pygame.sprite.Sprite.kill"]], "layers() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.layers"]], "move_to_back() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.move_to_back"]], "move_to_front() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.move_to_front"]], "pygame.sprite": [[50, "module-pygame.sprite"]], "remove() (pygame.sprite.group method)": [[50, "pygame.sprite.Group.remove"]], "remove() (pygame.sprite.sprite method)": [[50, "pygame.sprite.Sprite.remove"]], "remove_sprites_of_layer() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.remove_sprites_of_layer"]], "repaint_rect() (pygame.sprite.layereddirty method)": [[50, "pygame.sprite.LayeredDirty.repaint_rect"]], "set_clip() (pygame.sprite.layereddirty method)": [[50, "pygame.sprite.LayeredDirty.set_clip"]], "set_timing_threshold() (pygame.sprite.layereddirty method)": [[50, "pygame.sprite.LayeredDirty.set_timing_threshold"]], "set_timing_treshold() (pygame.sprite.layereddirty method)": [[50, "pygame.sprite.LayeredDirty.set_timing_treshold"]], "spritecollide() (in module pygame.sprite)": [[50, "pygame.sprite.spritecollide"]], "spritecollideany() (in module pygame.sprite)": [[50, "pygame.sprite.spritecollideany"]], "sprites() (pygame.sprite.group method)": [[50, "pygame.sprite.Group.sprites"]], "sprites() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.sprites"]], "switch_layer() (pygame.sprite.layeredupdates method)": [[50, "pygame.sprite.LayeredUpdates.switch_layer"]], "update() (pygame.sprite.group method)": [[50, "pygame.sprite.Group.update"]], "update() (pygame.sprite.sprite method)": [[50, "pygame.sprite.Sprite.update"]], "surface (class in pygame)": [[51, "pygame.Surface"]], "_pixels_address (pygame.surface attribute)": [[51, "pygame.Surface._pixels_address"]], "blit() (pygame.surface method)": [[51, "pygame.Surface.blit"]], "blits() (pygame.surface method)": [[51, "pygame.Surface.blits"]], "convert() (pygame.surface method)": [[51, "pygame.Surface.convert"]], "convert_alpha() (pygame.surface method)": [[51, "pygame.Surface.convert_alpha"]], "copy() (pygame.surface method)": [[51, "pygame.Surface.copy"]], "fill() (pygame.surface method)": [[51, "pygame.Surface.fill"]], "get_abs_offset() (pygame.surface method)": [[51, "pygame.Surface.get_abs_offset"]], "get_abs_parent() (pygame.surface method)": [[51, "pygame.Surface.get_abs_parent"]], "get_alpha() (pygame.surface method)": [[51, "pygame.Surface.get_alpha"]], "get_at() (pygame.surface method)": [[51, "pygame.Surface.get_at"]], "get_at_mapped() (pygame.surface method)": [[51, "pygame.Surface.get_at_mapped"]], "get_bitsize() (pygame.surface method)": [[51, "pygame.Surface.get_bitsize"]], "get_bounding_rect() (pygame.surface method)": [[51, "pygame.Surface.get_bounding_rect"]], "get_buffer() (pygame.surface method)": [[51, "pygame.Surface.get_buffer"]], "get_bytesize() (pygame.surface method)": [[51, "pygame.Surface.get_bytesize"]], "get_clip() (pygame.surface method)": [[51, "pygame.Surface.get_clip"]], "get_colorkey() (pygame.surface method)": [[51, "pygame.Surface.get_colorkey"]], "get_flags() (pygame.surface method)": [[51, "pygame.Surface.get_flags"]], "get_height() (pygame.surface method)": [[51, "pygame.Surface.get_height"]], "get_locked() (pygame.surface method)": [[51, "pygame.Surface.get_locked"]], "get_locks() (pygame.surface method)": [[51, "pygame.Surface.get_locks"]], "get_losses() (pygame.surface method)": [[51, "pygame.Surface.get_losses"]], "get_masks() (pygame.surface method)": [[51, "pygame.Surface.get_masks"]], "get_offset() (pygame.surface method)": [[51, "pygame.Surface.get_offset"]], "get_palette() (pygame.surface method)": [[51, "pygame.Surface.get_palette"]], "get_palette_at() (pygame.surface method)": [[51, "pygame.Surface.get_palette_at"]], "get_parent() (pygame.surface method)": [[51, "pygame.Surface.get_parent"]], "get_pitch() (pygame.surface method)": [[51, "pygame.Surface.get_pitch"]], "get_rect() (pygame.surface method)": [[51, "pygame.Surface.get_rect"]], "get_shifts() (pygame.surface method)": [[51, "pygame.Surface.get_shifts"]], "get_size() (pygame.surface method)": [[51, "pygame.Surface.get_size"]], "get_view() (pygame.surface method)": [[51, "pygame.Surface.get_view"]], "get_width() (pygame.surface method)": [[51, "pygame.Surface.get_width"]], "lock() (pygame.surface method)": [[51, "pygame.Surface.lock"]], "map_rgb() (pygame.surface method)": [[51, "pygame.Surface.map_rgb"]], "mustlock() (pygame.surface method)": [[51, "pygame.Surface.mustlock"]], "premul_alpha() (pygame.surface method)": [[51, "pygame.Surface.premul_alpha"]], "scroll() (pygame.surface method)": [[51, "pygame.Surface.scroll"]], "set_alpha() (pygame.surface method)": [[51, "pygame.Surface.set_alpha"]], "set_at() (pygame.surface method)": [[51, "pygame.Surface.set_at"]], "set_clip() (pygame.surface method)": [[51, "pygame.Surface.set_clip"]], "set_colorkey() (pygame.surface method)": [[51, "pygame.Surface.set_colorkey"]], "set_masks() (pygame.surface method)": [[51, "pygame.Surface.set_masks"]], "set_palette() (pygame.surface method)": [[51, "pygame.Surface.set_palette"]], "set_palette_at() (pygame.surface method)": [[51, "pygame.Surface.set_palette_at"]], "set_shifts() (pygame.surface method)": [[51, "pygame.Surface.set_shifts"]], "subsurface() (pygame.surface method)": [[51, "pygame.Surface.subsurface"]], "unlock() (pygame.surface method)": [[51, "pygame.Surface.unlock"]], "unmap_rgb() (pygame.surface method)": [[51, "pygame.Surface.unmap_rgb"]], "array2d() (in module pygame.surfarray)": [[52, "pygame.surfarray.array2d"]], "array3d() (in module pygame.surfarray)": [[52, "pygame.surfarray.array3d"]], "array_alpha() (in module pygame.surfarray)": [[52, "pygame.surfarray.array_alpha"]], "array_blue() (in module pygame.surfarray)": [[52, "pygame.surfarray.array_blue"]], "array_colorkey() (in module pygame.surfarray)": [[52, "pygame.surfarray.array_colorkey"]], "array_green() (in module pygame.surfarray)": [[52, "pygame.surfarray.array_green"]], "array_red() (in module pygame.surfarray)": [[52, "pygame.surfarray.array_red"]], "blit_array() (in module pygame.surfarray)": [[52, "pygame.surfarray.blit_array"]], "get_arraytype() (in module pygame.surfarray)": [[52, "pygame.surfarray.get_arraytype"]], "get_arraytypes() (in module pygame.surfarray)": [[52, "pygame.surfarray.get_arraytypes"]], "make_surface() (in module pygame.surfarray)": [[52, "pygame.surfarray.make_surface"]], "map_array() (in module pygame.surfarray)": [[52, "pygame.surfarray.map_array"]], "pixels2d() (in module pygame.surfarray)": [[52, "pygame.surfarray.pixels2d"]], "pixels3d() (in module pygame.surfarray)": [[52, "pygame.surfarray.pixels3d"]], "pixels_alpha() (in module pygame.surfarray)": [[52, "pygame.surfarray.pixels_alpha"]], "pixels_blue() (in module pygame.surfarray)": [[52, "pygame.surfarray.pixels_blue"]], "pixels_green() (in module pygame.surfarray)": [[52, "pygame.surfarray.pixels_green"]], "pixels_red() (in module pygame.surfarray)": [[52, "pygame.surfarray.pixels_red"]], "pygame.surfarray": [[52, "module-pygame.surfarray"]], "use_arraytype() (in module pygame.surfarray)": [[52, "pygame.surfarray.use_arraytype"]], "pygame.tests": [[53, "module-pygame.tests"]], "run() (in module pygame.tests)": [[53, "pygame.tests.run"]], "clock (class in pygame.time)": [[54, "pygame.time.Clock"]], "delay() (in module pygame.time)": [[54, "pygame.time.delay"]], "get_fps() (pygame.time.clock method)": [[54, "pygame.time.Clock.get_fps"]], "get_rawtime() (pygame.time.clock method)": [[54, "pygame.time.Clock.get_rawtime"]], "get_ticks() (in module pygame.time)": [[54, "pygame.time.get_ticks"]], "get_time() (pygame.time.clock method)": [[54, "pygame.time.Clock.get_time"]], "pygame.time": [[54, "module-pygame.time"]], "set_timer() (in module pygame.time)": [[54, "pygame.time.set_timer"]], "tick() (pygame.time.clock method)": [[54, "pygame.time.Clock.tick"]], "tick_busy_loop() (pygame.time.clock method)": [[54, "pygame.time.Clock.tick_busy_loop"]], "wait() (in module pygame.time)": [[54, "pygame.time.wait"]], "get_device() (in module pygame._sdl2.touch)": [[55, "pygame._sdl2.touch.get_device"]], "get_finger() (in module pygame._sdl2.touch)": [[55, "pygame._sdl2.touch.get_finger"]], "get_num_devices() (in module pygame._sdl2.touch)": [[55, "pygame._sdl2.touch.get_num_devices"]], "get_num_fingers() (in module pygame._sdl2.touch)": [[55, "pygame._sdl2.touch.get_num_fingers"]], "pygame._sdl2.touch": [[55, "module-pygame._sdl2.touch"]], "average_color() (in module pygame.transform)": [[56, "pygame.transform.average_color"]], "average_surfaces() (in module pygame.transform)": [[56, "pygame.transform.average_surfaces"]], "chop() (in module pygame.transform)": [[56, "pygame.transform.chop"]], "flip() (in module pygame.transform)": [[56, "pygame.transform.flip"]], "get_smoothscale_backend() (in module pygame.transform)": [[56, "pygame.transform.get_smoothscale_backend"]], "grayscale() (in module pygame.transform)": [[56, "pygame.transform.grayscale"]], "laplacian() (in module pygame.transform)": [[56, "pygame.transform.laplacian"]], "pygame.transform": [[56, "module-pygame.transform"]], "rotate() (in module pygame.transform)": [[56, "pygame.transform.rotate"]], "rotozoom() (in module pygame.transform)": [[56, "pygame.transform.rotozoom"]], "scale() (in module pygame.transform)": [[56, "pygame.transform.scale"]], "scale2x() (in module pygame.transform)": [[56, "pygame.transform.scale2x"]], "scale_by() (in module pygame.transform)": [[56, "pygame.transform.scale_by"]], "set_smoothscale_backend() (in module pygame.transform)": [[56, "pygame.transform.set_smoothscale_backend"]], "smoothscale() (in module pygame.transform)": [[56, "pygame.transform.smoothscale"]], "smoothscale_by() (in module pygame.transform)": [[56, "pygame.transform.smoothscale_by"]], "threshold() (in module pygame.transform)": [[56, "pygame.transform.threshold"]]}})
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api.html:	    <a href="ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.angle">angle() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.centroid">centroid() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:        <li><a href="ref/mask.html#pygame.mask.Mask.clear">(pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/sprite.html#pygame.sprite.collide_mask">collide_mask() (in module pygame.sprite)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.connected_component">connected_component() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.connected_components">connected_components() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.convolve">convolve() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:        <li><a href="ref/mask.html#pygame.mask.Mask.copy">(pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.count">count() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:        <li><a href="ref/mask.html#pygame.mask.Mask.draw">(pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.erase">erase() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.fill">fill() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.from_surface">from_surface() (in module pygame.mask)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.from_threshold">from_threshold() (in module pygame.mask)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.get_at">get_at() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.get_bounding_rects">get_bounding_rects() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/surface.html#pygame.Surface.get_masks">get_masks() (pygame.Surface method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:        <li><a href="ref/mask.html#pygame.mask.Mask.get_rect">(pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:        <li><a href="ref/mask.html#pygame.mask.Mask.get_size">(pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.invert">invert() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask">Mask (class in pygame.mask)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/examples.html#pygame.examples.mask.main">mask.main() (in module pygame.examples)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:        <li><a href="ref/mask.html#module-pygame.mask">pygame.mask</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.outline">outline() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.overlap">overlap() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.overlap_area">overlap_area() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.overlap_mask">overlap_mask() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:    pygame.mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:        <li><a href="ref/mask.html#module-pygame.mask">module</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:        <li><a href="ref/mask.html#pygame.mask.Mask.scale">(pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/mask.html#pygame.mask.Mask.set_at">set_at() (pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:      <li><a href="ref/surface.html#pygame.Surface.set_masks">set_masks() (pygame.Surface method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/genindex.html:        <li><a href="ref/mask.html#pygame.mask.Mask.to_surface">(pygame.mask.Mask method)</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/index.html:	    <a href="ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/joystick.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:<div class="line"><span class="signature">compile(strings, black='X', white='.', xor='o') -&gt; data, mask</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:<div class="line"><span class="signature">load_xbm(cursorfile, maskfile) -&gt; cursor_args</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:<code class="docutils literal notranslate"><span class="pre">XBM</span></code> files. You can pass a second maskfile argument to load the two
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:<p>The cursorfile and maskfile arguments can either be filenames or file-like
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:<div class="line"><span class="signature">Cursor(size, hotspot, xormasks, andmasks) -&gt; Cursor</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:bitmap using the given bitmask arrays. The <code class="docutils literal notranslate"><span class="pre">size</span></code> is a sequence containing
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:<p><code class="docutils literal notranslate"><span class="pre">xormasks</span></code> is a sequence of bytes containing the cursor xor data masks.
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:Lastly <code class="docutils literal notranslate"><span class="pre">andmasks</span></code>, a sequence of bytes containing the cursor bitmask data.
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cursors.html:<p>Width and height must be a multiple of 8, and the mask arrays must be the
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/cdrom.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/pixelcopy.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/music.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/draw.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/math.html:    <link rel="prev" title="pygame.mask" href="mask.html" /> 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/math.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/math.html:          <a href="mask.html" title="pygame.mask"
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/time.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/font.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mouse.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mouse.html:<div class="line"><span class="signature">set_cursor(size, hotspot, xormasks, andmasks) -&gt; None</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mouse.html:<code class="docutils literal notranslate"><span class="pre">size,</span> <span class="pre">hotspot,</span> <span class="pre">xormasks,</span> <span class="pre">andmasks</span></code> will still work,
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/transform.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/display.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/display.html:<span class="n">masks</span><span class="p">:</span>      <span class="n">Four</span> <span class="n">values</span> <span class="n">used</span> <span class="n">to</span> <span class="n">pack</span> <span class="n">RGBA</span> <span class="n">values</span> <span class="n">into</span> <span class="n">pixels</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:    <title>pygame.mask &#8212; pygame v2.3.0 documentation</title>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<section id="module-pygame.mask">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span id="pygame-mask"></span><dl class="definition">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<code class="docutils literal notranslate"><span class="pre">pygame.mask</span></code></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">pygame module for image masks.</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.from_surface">pygame.mask.from_surface</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.from_threshold">pygame.mask.from_threshold</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Creates a mask by thresholding Surfaces</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask">pygame.mask.Mask</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>pygame object for representing 2D bitmasks</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Useful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.from_surface">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-prename descclassname"><span class="pre">pygame.mask.</span></span><span class="sig-name descname"><span class="pre">from_surface</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.from_surface" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Creates a <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> object from the given surface by setting all the
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:the resulting mask are set. All the pixels that are <strong>not</strong> equal to the
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:decide which bits in the resulting mask are set. All the pixels that have an
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>surface</strong> (<a class="reference internal" href="surface.html#pygame.Surface" title="pygame.Surface"><em>Surface</em></a>) -- the surface to create the mask from</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p>a newly created <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> object from the given surface</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p><a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask">Mask</a></p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>This function is used to create the masks for
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<a class="tooltip reference internal" href="sprite.html#pygame.sprite.collide_mask" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.sprite.collide_mask()</span></code><span class="tooltip-content">Collision detection between two sprites, using masks.</span></a>.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.from_threshold">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-prename descclassname"><span class="pre">pygame.mask.</span></span><span class="sig-name descname"><span class="pre">from_threshold</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.from_threshold" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Creates a mask by thresholding Surfaces</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>This is a more featureful method of getting a <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> from a surface.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<code class="docutils literal notranslate"><span class="pre">threshold</span></code> of the <code class="docutils literal notranslate"><span class="pre">color</span></code> parameter are <strong>set</strong> in the resulting mask.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<code class="docutils literal notranslate"><span class="pre">othersurface</span></code> is <strong>set</strong> in the resulting mask.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>surface</strong> (<a class="reference internal" href="surface.html#pygame.Surface" title="pygame.Surface"><em>Surface</em></a>) -- the surface to create the mask from</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p>a newly created <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> object from the given surface</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p><a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask">Mask</a></p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-prename descclassname"><span class="pre">pygame.mask.</span></span><span class="sig-name descname"><span class="pre">Mask</span></span><a class="headerlink" href="#pygame.mask.Mask" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">pygame object for representing 2D bitmasks</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.copy">pygame.mask.Mask.copy</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Returns a new copy of the mask</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.get_size">pygame.mask.Mask.get_size</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Returns the size of the mask</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.get_rect">pygame.mask.Mask.get_rect</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Returns a Rect based on the size of the mask</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.get_at">pygame.mask.Mask.get_at</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.set_at">pygame.mask.Mask.set_at</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.overlap">pygame.mask.Mask.overlap</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.overlap_area">pygame.mask.Mask.overlap_area</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.overlap_mask">pygame.mask.Mask.overlap_mask</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Returns a mask of the overlapping set bits</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.fill">pygame.mask.Mask.fill</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.clear">pygame.mask.Mask.clear</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.invert">pygame.mask.Mask.invert</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.scale">pygame.mask.Mask.scale</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Resizes a mask</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.draw">pygame.mask.Mask.draw</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Draws a mask onto another</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.erase">pygame.mask.Mask.erase</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Erases a mask from another</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.count">pygame.mask.Mask.count</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.centroid">pygame.mask.Mask.centroid</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.angle">pygame.mask.Mask.angle</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.outline">pygame.mask.Mask.outline</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.convolve">pygame.mask.Mask.convolve</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Returns the convolution of this mask with another mask</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.connected_component">pygame.mask.Mask.connected_component</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Returns a mask containing a connected component</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.connected_components">pygame.mask.Mask.connected_components</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Returns a list of masks of connected components</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.get_bounding_rects">pygame.mask.Mask.get_bounding_rects</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="mask.html#pygame.mask.Mask.to_surface">pygame.mask.Mask.to_surface</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<td>Returns a surface with the mask drawn on it</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>A <code class="docutils literal notranslate"><span class="pre">Mask</span></code> object is used to represent a 2D bitmask. Each bit in
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:the mask represents a pixel. 1 is used to indicate a set bit and 0 is used
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:to indicate an unset bit. Set bits in a mask can be used to detect collisions
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:with other masks and their set bits.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>A filled mask has all of its bits set to 1, conversely an
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:unfilled/cleared/empty mask has all of its bits set to 0. Masks can be
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:can also be cleared or filled using the <a class="tooltip reference internal" href="#pygame.mask.Mask.clear" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.mask.Mask.clear()</span></code><span class="tooltip-content">Sets all bits to 0</span></a> and
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<a class="tooltip reference internal" href="#pygame.mask.Mask.fill" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.mask.Mask.fill()</span></code><span class="tooltip-content">Sets all bits to 1</span></a> methods respectively.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>A mask's coordinates start in the top left corner at <code class="docutils literal notranslate"><span class="pre">(0,</span> <span class="pre">0)</span></code> just like
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<a class="tooltip reference internal" href="#pygame.mask.Mask.get_at" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.mask.Mask.get_at()</span></code><span class="tooltip-content">Gets the bit at the given position</span></a> and <a class="tooltip reference internal" href="#pygame.mask.Mask.set_at" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.mask.Mask.set_at()</span></code><span class="tooltip-content">Sets the bit at the given position</span></a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p id="mask-offset-label">The methods <a class="reference internal" href="#pygame.mask.Mask.overlap" title="pygame.mask.Mask.overlap"><code class="xref py py-meth docutils literal notranslate"><span class="pre">overlap()</span></code></a>, <a class="reference internal" href="#pygame.mask.Mask.overlap_area" title="pygame.mask.Mask.overlap_area"><code class="xref py py-meth docutils literal notranslate"><span class="pre">overlap_area()</span></code></a>, <a class="reference internal" href="#pygame.mask.Mask.overlap_mask" title="pygame.mask.Mask.overlap_mask"><code class="xref py py-meth docutils literal notranslate"><span class="pre">overlap_mask()</span></code></a>,
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<a class="reference internal" href="#pygame.mask.Mask.draw" title="pygame.mask.Mask.draw"><code class="xref py py-meth docutils literal notranslate"><span class="pre">draw()</span></code></a>, <a class="reference internal" href="#pygame.mask.Mask.erase" title="pygame.mask.Mask.erase"><code class="xref py py-meth docutils literal notranslate"><span class="pre">erase()</span></code></a>, and <a class="reference internal" href="#pygame.mask.Mask.convolve" title="pygame.mask.Mask.convolve"><code class="xref py py-meth docutils literal notranslate"><span class="pre">convolve()</span></code></a> use an offset parameter
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:to indicate the offset of another mask's top left corner from the calling
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:mask's top left corner. The calling mask's top left corner is considered to
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="p">(</span><span class="n">y_offset</span><span class="p">)</span> <span class="o">|</span>    <span class="o">|</span> <span class="n">othermask</span> <span class="o">|</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:           <span class="o">|</span> <span class="n">calling_mask</span> <span class="o">|</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>size</strong> -- the dimensions of the mask (width and height)</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>fill</strong> (<em>bool</em>) -- (optional) create an unfilled mask (default: <code class="docutils literal notranslate"><span class="pre">False</span></code>) or
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:filled mask (<code class="docutils literal notranslate"><span class="pre">True</span></code>)</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p>a newly created <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> object</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p><a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask">Mask</a></p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p><span class="versionmodified changed">Changed in pygame 2.0.0: </span>Shallow copy support added. The <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> class supports the special
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:method <code class="docutils literal notranslate"><span class="pre">__copy__()</span></code> and shallow copying via <code class="docutils literal notranslate"><span class="pre">copy.copy(mask)</span></code>.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p><span class="versionmodified changed">Changed in pygame 2.0.0: </span>Subclassing support added. The <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> class
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p><span class="versionmodified changed">Changed in pygame 1.9.5: </span>Added support for masks with a width and/or a
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.copy">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">copy</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.copy" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Returns a new copy of the mask</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p>a new copy of this mask, the new mask will have the same width,
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p><a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask">Mask</a></p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>If a mask subclass needs to copy any instance specific attributes
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">SubMask</span><span class="p">(</span><span class="n">pygame</span><span class="o">.</span><span class="n">mask</span><span class="o">.</span><span class="n">Mask</span><span class="p">):</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:        <span class="n">new_mask</span> <span class="o">=</span> <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__copy__</span><span class="p">()</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:        <span class="k">return</span> <span class="n">new_mask</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.get_size">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">get_size</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.get_size" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Returns the size of the mask</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p>the size of the mask, (width, height)</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.get_rect">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">get_rect</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.get_rect" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Returns a Rect based on the size of the mask</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Returns a new <a class="tooltip reference internal" href="rect.html#pygame.Rect" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.Rect()</span></code><span class="tooltip-content">pygame object for storing rectangular coordinates</span></a> object based on the size of this mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:height will be the same as this mask's. The rect's attributes can be
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:into this method. As an example, <code class="docutils literal notranslate"><span class="pre">a_mask.get_rect(center=(10,</span> <span class="pre">5))</span></code> would
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:create a <a class="tooltip reference internal" href="rect.html#pygame.Rect" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.Rect()</span></code><span class="tooltip-content">pygame object for storing rectangular coordinates</span></a> based on the mask's size centered at the
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p>a new <a class="tooltip reference internal" href="rect.html#pygame.Rect" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.Rect()</span></code><span class="tooltip-content">pygame object for storing rectangular coordinates</span></a> object based on the size of this mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.get_at">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">get_at</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.get_at" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p><strong>IndexError</strong> -- if the position is outside of the mask's bounds</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.set_at">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">set_at</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.set_at" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p><strong>IndexError</strong> -- if the position is outside of the mask's bounds</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.overlap">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">overlap</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.overlap" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Returns the first point of intersection encountered between this mask and
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>other</strong> (<a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><em>Mask</em></a>) -- the other mask to overlap with this mask</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>offset</strong> -- the offset of <code class="docutils literal notranslate"><span class="pre">other</span></code> from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:details refer to the <a class="reference internal" href="#mask-offset-label"><span class="std std-ref">Mask offset notes</span></a></p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.overlap_area">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">overlap_area</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.overlap_area" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Returns the number of overlapping set bits between between this mask and
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">dx</span> <span class="o">=</span> <span class="n">mask</span><span class="o">.</span><span class="n">overlap_area</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span> <span class="o">-</span> <span class="n">mask</span><span class="o">.</span><span class="n">overlap_area</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="n">dy</span> <span class="o">=</span> <span class="n">mask</span><span class="o">.</span><span class="n">overlap_area</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">-</span> <span class="n">mask</span><span class="o">.</span><span class="n">overlap_area</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>other</strong> (<a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><em>Mask</em></a>) -- the other mask to overlap with this mask</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>offset</strong> -- the offset of <code class="docutils literal notranslate"><span class="pre">other</span></code> from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:details refer to the <a class="reference internal" href="#mask-offset-label"><span class="std std-ref">Mask offset notes</span></a></p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.overlap_mask">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">overlap_mask</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.overlap_mask" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Returns a mask of the overlapping set bits</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="signature">overlap_mask(other, offset) -&gt; Mask</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Returns a <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a>, the same size as this mask, containing the
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:overlapping set bits between this mask and <code class="docutils literal notranslate"><span class="pre">other</span></code>.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>other</strong> (<a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><em>Mask</em></a>) -- the other mask to overlap with this mask</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>offset</strong> -- the offset of <code class="docutils literal notranslate"><span class="pre">other</span></code> from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:details refer to the <a class="reference internal" href="#mask-offset-label"><span class="std std-ref">Mask offset notes</span></a></p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p>a newly created <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> with the overlapping bits set</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p><a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask">Mask</a></p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.fill">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">fill</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.fill" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Sets all bits in the mask to 1.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.clear">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">clear</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.clear" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Sets all bits in the mask to 0.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.invert">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">invert</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.invert" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Flips all of the bits in the mask. All the set bits are cleared to 0 and
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.scale">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">scale</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.scale" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Resizes a mask</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Creates a new <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> of the requested size with its bits scaled
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:from this mask.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p><strong>size</strong> -- the width and height (size) of the mask to create</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p>a new <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> object with its bits scaled from this mask</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p><a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask">Mask</a></p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.draw">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">draw</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.draw" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Draws a mask onto another</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Performs a bitwise OR, drawing <code class="docutils literal notranslate"><span class="pre">othermask</span></code> onto this mask.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>other</strong> (<a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><em>Mask</em></a>) -- the mask to draw onto this mask</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>offset</strong> -- the offset of <code class="docutils literal notranslate"><span class="pre">other</span></code> from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:details refer to the <a class="reference internal" href="#mask-offset-label"><span class="std std-ref">Mask offset notes</span></a></p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.erase">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">erase</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.erase" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Erases a mask from another</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Erases (clears) all bits set in <code class="docutils literal notranslate"><span class="pre">other</span></code> from this mask.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>other</strong> (<a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><em>Mask</em></a>) -- the mask to erase from this mask</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>offset</strong> -- the offset of <code class="docutils literal notranslate"><span class="pre">other</span></code> from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:details refer to the <a class="reference internal" href="#mask-offset-label"><span class="std std-ref">Mask offset notes</span></a></p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.count">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">count</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.count" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p>the number of set bits in the mask</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.centroid">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">centroid</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.centroid" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Finds the centroid (the center mass of the set bits) for this mask.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p>a coordinate tuple indicating the centroid of the mask, it will
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:return <code class="docutils literal notranslate"><span class="pre">(0,</span> <span class="pre">0)</span></code> if the mask has no bits set</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.angle">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">angle</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.angle" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:in the mask. This works best if performed on a mask with only one
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p>the orientation of the set bits in the mask, it will return
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<code class="docutils literal notranslate"><span class="pre">0.0</span></code> if the mask has no bits set</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>See <a class="reference internal" href="#pygame.mask.Mask.connected_component" title="pygame.mask.Mask.connected_component"><code class="xref py py-meth docutils literal notranslate"><span class="pre">connected_component()</span></code></a> for details on how a connected
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.outline">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">outline</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.outline" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:encountered in the mask. To find a connected component, the mask is
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:encountered, an empty list is returned if the mask has no bits set</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>See <a class="reference internal" href="#pygame.mask.Mask.connected_component" title="pygame.mask.Mask.connected_component"><code class="xref py py-meth docutils literal notranslate"><span class="pre">connected_component()</span></code></a> for details on how a connected
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.convolve">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">convolve</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.convolve" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Returns the convolution of this mask with another mask</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Convolve this mask with the given <code class="docutils literal notranslate"><span class="pre">other</span></code> Mask.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>other</strong> (<a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><em>Mask</em></a>) -- mask to convolve this mask with</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>output</strong> (<a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><em>Mask</em></a><em> or </em><em>NoneType</em>) -- (optional) mask for output (default is <code class="docutils literal notranslate"><span class="pre">None</span></code>)</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>offset</strong> -- the offset of <code class="docutils literal notranslate"><span class="pre">other</span></code> from this mask, (default is
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p><p>a <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> with the <code class="docutils literal notranslate"><span class="pre">(i</span> <span class="pre">-</span> <span class="pre">offset[0],</span> <span class="pre">j</span> <span class="pre">-</span> <span class="pre">offset[1])</span></code> bit
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<code class="docutils literal notranslate"><span class="pre">(i,</span> <span class="pre">j)</span></code>) causes it to overlap with this mask</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:it is returned. Otherwise a mask of size <code class="docutils literal notranslate"><span class="pre">(MAX(0,</span> <span class="pre">width</span> <span class="pre">+</span> <span class="pre">other</span> <span class="pre">mask's</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="pre">width</span> <span class="pre">-</span> <span class="pre">1),</span> <span class="pre">MAX(0,</span> <span class="pre">height</span> <span class="pre">+</span> <span class="pre">other</span> <span class="pre">mask's</span> <span class="pre">height</span> <span class="pre">-</span> <span class="pre">1))</span></code> is created and
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p><a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask">Mask</a></p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.connected_component">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">connected_component</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.connected_component" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Returns a mask containing a connected component</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:connectivity, is used to find a connected component in the mask.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>By default this method will return a <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> containing the largest
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:connected component in the mask. Optionally, a bit coordinate can be
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:the bit at the given location is not set, the returned <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> will
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p><p>a <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> object (same size as this mask) with the largest
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:connected component from this mask, if this mask has no bits set then
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:an empty mask will be returned</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>If the <code class="docutils literal notranslate"><span class="pre">pos</span></code> parameter is provided then the mask returned will have
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:the connected component that contains this position. An empty mask will
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p><a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask">Mask</a></p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:mask's bounds</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.connected_components">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">connected_components</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.connected_components" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Returns a list of masks of connected components</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Provides a list containing a <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> object for each connected
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-even"><p>a list containing a <a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask"><code class="xref py py-class docutils literal notranslate"><span class="pre">Mask</span></code></a> object for each connected
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:component, an empty list is returned if the mask has no bits set</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dd class="field-odd"><p>list[<a class="reference internal" href="#pygame.mask.Mask" title="pygame.mask.Mask">Mask</a>]</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>See <a class="reference internal" href="#pygame.mask.Mask.connected_component" title="pygame.mask.Mask.connected_component"><code class="xref py py-meth docutils literal notranslate"><span class="pre">connected_component()</span></code></a> for details on how a connected
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.get_bounding_rects">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">get_bounding_rects</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.get_bounding_rects" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:an empty list is returned if the mask has no bits set</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>See <a class="reference internal" href="#pygame.mask.Mask.connected_component" title="pygame.mask.Mask.connected_component"><code class="xref py py-meth docutils literal notranslate"><span class="pre">connected_component()</span></code></a> for details on how a connected
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<dt class="sig sig-object py title" id="pygame.mask.Mask.to_surface">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<span class="sig-name descname"><span class="pre">to_surface</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.mask.Mask.to_surface" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<div class="line"><span class="summaryline">Returns a surface with the mask drawn on it</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<p>Draws this mask on the given surface. Set bits (bits set to 1) and unset
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<li><p><strong>surface</strong> (<a class="reference internal" href="surface.html#pygame.Surface" title="pygame.Surface"><em>Surface</em></a><em> or </em><em>None</em>) -- (optional) Surface to draw mask onto, if no surface is
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<code class="docutils literal notranslate"><span class="pre">Surface(size=mask.get_size(),</span> <span class="pre">flags=SRCALPHA,</span> <span class="pre">depth=32)</span></code> to be
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:mask any bits outside its bounds will use the <code class="docutils literal notranslate"><span class="pre">setcolor</span></code> value</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:mask any bits outside its bounds will use the <code class="docutils literal notranslate"><span class="pre">unsetcolor</span></code> value</p></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:topleft corner of the mask being drawn (default is <code class="docutils literal notranslate"><span class="pre">(0,</span> <span class="pre">0)</span></code>), if a
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:position the mask on the surface, it does not offset the <code class="docutils literal notranslate"><span class="pre">setsurface</span></code>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:and <code class="docutils literal notranslate"><span class="pre">unsetsurface</span></code> from the mask, they are always aligned with the
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:mask (i.e. position <code class="docutils literal notranslate"><span class="pre">(0,</span> <span class="pre">0)</span></code> on the mask always corresponds to
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<code class="docutils literal notranslate"><span class="pre">surface</span></code> parameter was provided) with this mask drawn on it</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:<a href="https://github.com/pygame/pygame/edit/main/docs/reST/ref/mask.rst" rel="nofollow">Edit on GitHub</a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mask.html:        <li class="nav-item nav-item-this"><a href=""><code class="xref py py-mod docutils literal notranslate"><span class="pre">pygame.mask</span></code></a></li>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/freetype.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/freetype.html:background 0, useful as an alpha mask for a foreground pattern.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<div class="line"><span class="signature">Surface((width, height), flags=0, depth=0, masks=None) -&gt; Surface</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="surface.html#pygame.Surface.get_masks">pygame.Surface.get_masks</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<td>the bitmasks needed to convert between a color and a mapped integer</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="surface.html#pygame.Surface.set_masks">pygame.Surface.set_masks</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<td>set the bitmasks needed to convert between a color and a mapped integer</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:Surface. The flags argument is a bitmask of additional features for the
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<p>Advance users can combine a set of bitmasks with a depth value. The masks
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:each color. Normal Surfaces should not require the masks argument.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<div class="line"><span class="signature">convert(masks, flags=0) -&gt; Surface</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:depth, flags, and masks arguments can be used, similar to the
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:flags bitmask. Typical flags are <code class="docutils literal notranslate"><span class="pre">RLEACCEL</span></code>, <code class="docutils literal notranslate"><span class="pre">SRCALPHA</span></code>, and
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<dt class="sig sig-object py title" id="pygame.Surface.get_masks">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<span class="sig-name descname"><span class="pre">get_masks</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.Surface.get_masks" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<div class="line"><span class="summaryline">the bitmasks needed to convert between a color and a mapped integer</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<div class="line"><span class="signature">get_masks() -&gt; (R, G, B, A)</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<p>Returns the bitmasks used to isolate each color in a mapped integer.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<dt class="sig sig-object py title" id="pygame.Surface.set_masks">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<span class="sig-name descname"><span class="pre">set_masks</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.Surface.set_masks" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<div class="line"><span class="summaryline">set the bitmasks needed to convert between a color and a mapped integer</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<div class="line"><span class="signature">set_masks((r,g,b,a)) -&gt; None</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surface.html:<p>Starting in pygame 2.0, the masks are read-only and
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/event.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/key.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/key.html:<li><p><code class="docutils literal notranslate"><span class="pre">mod</span></code>: a bitmask of all the <a class="reference internal" href="#key-modifiers-label"><span class="std std-ref">modifier keys</span></a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/key.html:bitmask of all the modifier keys that were in a pressed state when the event
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/key.html:<p>Returns a single integer representing a bitmask of all the modifier keys
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/key.html:<p>Create a bitmask of the <a class="reference internal" href="#key-modifiers-label"><span class="std std-ref">modifier key constants</span></a>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/bufferproxy.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/examples.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/examples.html:<tr class="row-odd"><td><div class="line"><a class="toc reference external" href="examples.html#pygame.examples.mask.main">pygame.examples.mask.main</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/examples.html:<dt class="sig sig-object py title" id="pygame.examples.mask.main">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/examples.html:<span class="sig-prename descclassname"><span class="pre">mask.</span></span><span class="sig-name descname"><span class="pre">main</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.examples.mask.main" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/examples.html:<div class="line"><span class="signature">mask.main(*args) -&gt; None</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/examples.html:<p>This <code class="docutils literal notranslate"><span class="pre">pygame.masks</span></code> demo will display multiple moving sprites bouncing off
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/examples.html:<p>If run as a program then <code class="docutils literal notranslate"><span class="pre">mask.py</span></code> takes one or more image files as
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/scrap.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/camera.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sdl2_controller.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/touch.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/mixer.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/pygame.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sdl2_video.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sndarray.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/image.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<tr class="row-even"><td><div class="line"><a class="toc reference external" href="sprite.html#pygame.sprite.collide_mask">pygame.sprite.collide_mask</a></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<td>Collision detection between two sprites, using masks.</td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<span class="n">collide_circle_ratio</span><span class="p">,</span> <span class="n">collide_mask</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<dt class="sig sig-object py title" id="pygame.sprite.collide_mask">
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<span class="sig-prename descclassname"><span class="pre">pygame.sprite.</span></span><span class="sig-name descname"><span class="pre">collide_mask</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#pygame.sprite.collide_mask" title="Permalink to this definition">¶</a></dt>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<div class="line"><span class="summaryline">Collision detection between two sprites, using masks.</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<div class="line"><span class="signature">collide_mask(sprite1, sprite2) -&gt; (int, int)</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<div class="line"><span class="signature">collide_mask(sprite1, sprite2) -&gt; None</span></div>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<p>Tests for collision between two sprites, by testing if their bitmasks
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:overlap (uses <a class="tooltip reference internal" href="mask.html#pygame.mask.Mask.overlap" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.mask.Mask.overlap()</span></code><span class="tooltip-content">Returns the point of intersection</span></a>). If the sprites have a
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<code class="docutils literal notranslate"><span class="pre">mask</span></code> attribute, it is used as the mask, otherwise a mask is created from
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:the sprite's <code class="docutils literal notranslate"><span class="pre">image</span></code> (uses <a class="tooltip reference internal" href="mask.html#pygame.mask.from_surface" title=""><code class="xref py py-func docutils literal notranslate"><span class="pre">pygame.mask.from_surface()</span></code><span class="tooltip-content">Creates a Mask from the given surface</span></a>). Sprites must
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:have a <code class="docutils literal notranslate"><span class="pre">rect</span></code> attribute; the <code class="docutils literal notranslate"><span class="pre">mask</span></code> attribute is optional.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<p>The first point of collision between the masks is returned. The collision
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:point is offset from <code class="docutils literal notranslate"><span class="pre">sprite1</span></code>'s mask's topleft corner (which is always
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:(0, 0)). The collision point is a position within the mask and is not
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<p>To increase performance, create and set a <code class="docutils literal notranslate"><span class="pre">mask</span></code> attribute for all
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:each time this function is called it will create new masks.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<p>A new mask needs to be recreated each time a sprite's image is changed
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1"># Example of mask creation for a sprite.</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<span class="n">sprite</span><span class="o">.</span><span class="n">mask</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mask</span><span class="o">.</span><span class="n">from_surface</span><span class="p">(</span><span class="n">sprite</span><span class="o">.</span><span class="n">image</span><span class="p">)</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/sprite.html:<dd class="field-odd"><p>first point of collision between the masks or <code class="docutils literal notranslate"><span class="pre">None</span></code> if no
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/fastevent.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/gfxdraw.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/overlay.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/context.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/color.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/locals.html:    <link rel="next" title="pygame.mask" href="mask.html" />
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/locals.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/locals.html:          <a href="mask.html" title="pygame.mask"
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/surfarray.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/color_list.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/midi.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/pixelarray.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/pixelarray.html:with the black/white color mask.</p>
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/pixelarray.html:PixelArray. It returns a new PixelArray with a black/white color mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/tests.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/ref/rect.html:	    <a href="mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/filepaths.html:	    <a href="ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/key.rst.txt:   * ``mod``: a bitmask of all the :ref:`modifier keys <key-modifiers-label>`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/key.rst.txt:bitmask of all the modifier keys that were in a pressed state when the event
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/key.rst.txt:   Returns a single integer representing a bitmask of all the modifier keys
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/key.rst.txt:   Create a bitmask of the :ref:`modifier key constants <key-modifiers-label>`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/examples.rst.txt:.. function:: mask.main
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/examples.rst.txt:   | :sg:`mask.main(*args) -> None`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/examples.rst.txt:   This ``pygame.masks`` demo will display multiple moving sprites bouncing off
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/examples.rst.txt:   If run as a program then ``mask.py`` takes one or more image files as
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/examples.rst.txt:   .. ## pygame.examples.mask.main ##
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:   | :sg:`Surface((width, height), flags=0, depth=0, masks=None) -> Surface`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:   Surface. The flags argument is a bitmask of additional features for the
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:   Advance users can combine a set of bitmasks with a depth value. The masks
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:   each color. Normal Surfaces should not require the masks argument.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      | :sg:`convert(masks, flags=0) -> Surface`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      depth, flags, and masks arguments can be used, similar to the
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      flags bitmask. Typical flags are ``RLEACCEL``, ``SRCALPHA``, and
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:   .. method:: get_masks
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      | :sl:`the bitmasks needed to convert between a color and a mapped integer`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      | :sg:`get_masks() -> (R, G, B, A)`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      Returns the bitmasks used to isolate each color in a mapped integer.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      .. ## Surface.get_masks ##
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:   .. method:: set_masks
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      | :sl:`set the bitmasks needed to convert between a color and a mapped integer`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      | :sg:`set_masks((r,g,b,a)) -> None`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      .. note:: Starting in pygame 2.0, the masks are read-only and
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/surface.rst.txt:      .. ## Surface.set_masks ##
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/freetype.rst.txt:      background 0, useful as an alpha mask for a foreground pattern.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/cursors.rst.txt:   | :sg:`compile(strings, black='X', white='.', xor='o') -> data, mask`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/cursors.rst.txt:   | :sg:`load_xbm(cursorfile, maskfile) -> cursor_args`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/cursors.rst.txt:   ``XBM`` files. You can pass a second maskfile argument to load the two
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/cursors.rst.txt:   The cursorfile and maskfile arguments can either be filenames or file-like
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/cursors.rst.txt:   | :sg:`Cursor(size, hotspot, xormasks, andmasks) -> Cursor`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/cursors.rst.txt:   bitmap using the given bitmask arrays. The ``size`` is a sequence containing 
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/cursors.rst.txt:   ``xormasks`` is a sequence of bytes containing the cursor xor data masks. 
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/cursors.rst.txt:   Lastly ``andmasks``, a sequence of bytes containing the cursor bitmask data.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/cursors.rst.txt:   Width and height must be a multiple of 8, and the mask arrays must be the 
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:       collide_circle_ratio, collide_mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:.. function:: collide_mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   | :sl:`Collision detection between two sprites, using masks.`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   | :sg:`collide_mask(sprite1, sprite2) -> (int, int)`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   | :sg:`collide_mask(sprite1, sprite2) -> None`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   Tests for collision between two sprites, by testing if their bitmasks
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   overlap (uses :func:`pygame.mask.Mask.overlap`). If the sprites have a
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   ``mask`` attribute, it is used as the mask, otherwise a mask is created from
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   the sprite's ``image`` (uses :func:`pygame.mask.from_surface`). Sprites must
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   have a ``rect`` attribute; the ``mask`` attribute is optional.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   The first point of collision between the masks is returned. The collision
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   point is offset from ``sprite1``'s mask's topleft corner (which is always
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   (0, 0)). The collision point is a position within the mask and is not
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:      To increase performance, create and set a ``mask`` attribute for all
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:      each time this function is called it will create new masks.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:      A new mask needs to be recreated each time a sprite's image is changed
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:      # Example of mask creation for a sprite.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:      sprite.mask = pygame.mask.from_surface(sprite.image)
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   :returns: first point of collision between the masks or ``None`` if no
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/sprite.rst.txt:   .. ## pygame.sprite.collide_mask ##
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mouse.rst.txt:   | :sg:`set_cursor(size, hotspot, xormasks, andmasks) -> None`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mouse.rst.txt:             ``size, hotspot, xormasks, andmasks`` will still work,
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/display.rst.txt:     masks:      Four values used to pack RGBA values into pixels
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt::mod:`pygame.mask`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:.. module:: pygame.mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   :synopsis: pygame module for image masks.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:| :sl:`pygame module for image masks.`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:Useful for fast pixel perfect collision detection. A mask uses 1 bit per-pixel
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   the resulting mask are set. All the pixels that are **not** equal to the
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   decide which bits in the resulting mask are set. All the pixels that have an
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   :param Surface surface: the surface to create the mask from
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      This function is used to create the masks for
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :func:`pygame.sprite.collide_mask`.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   .. ## pygame.mask.from_surface ##
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   | :sl:`Creates a mask by thresholding Surfaces`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   ``threshold`` of the ``color`` parameter are **set** in the resulting mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   ``othersurface`` is **set** in the resulting mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   :param Surface surface: the surface to create the mask from
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   .. ## pygame.mask.from_threshold ##
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   | :sl:`pygame object for representing 2D bitmasks`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   A ``Mask`` object is used to represent a 2D bitmask. Each bit in
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   the mask represents a pixel. 1 is used to indicate a set bit and 0 is used
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   to indicate an unset bit. Set bits in a mask can be used to detect collisions
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   with other masks and their set bits.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   A filled mask has all of its bits set to 1, conversely an
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   unfilled/cleared/empty mask has all of its bits set to 0. Masks can be
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   can also be cleared or filled using the :func:`pygame.mask.Mask.clear()` and
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   :func:`pygame.mask.Mask.fill()` methods respectively.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   A mask's coordinates start in the top left corner at ``(0, 0)`` just like
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   :func:`pygame.mask.Mask.get_at()` and :func:`pygame.mask.Mask.set_at()`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   .. _mask-offset-label:
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   The methods :meth:`overlap`, :meth:`overlap_area`, :meth:`overlap_mask`,
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   to indicate the offset of another mask's top left corner from the calling
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   mask's top left corner. The calling mask's top left corner is considered to
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      (y_offset) |    | othermask |
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:                 | calling_mask |
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   :param size: the dimensions of the mask (width and height)
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   :param bool fill: (optional) create an unfilled mask (default: ``False``) or
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      filled mask (``True``)
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      method ``__copy__()`` and shallow copying via ``copy.copy(mask)``.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   .. versionchanged:: 1.9.5 Added support for masks with a width and/or a
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Returns a new copy of the mask`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :returns: a new copy of this mask, the new mask will have the same width,
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         If a mask subclass needs to copy any instance specific attributes
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:            class SubMask(pygame.mask.Mask):
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:                    new_mask = super().__copy__()
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:                    return new_mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Returns the size of the mask`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :returns: the size of the mask, (width, height)
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Returns a Rect based on the size of the mask`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Returns a new :func:`pygame.Rect` object based on the size of this mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      height will be the same as this mask's. The rect's attributes can be
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      into this method. As an example, ``a_mask.get_rect(center=(10, 5))`` would
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      create a :func:`pygame.Rect` based on the mask's size centered at the
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :returns: a new :func:`pygame.Rect` object based on the size of this mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :raises IndexError: if the position is outside of the mask's bounds
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :raises IndexError: if the position is outside of the mask's bounds
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Returns the first point of intersection encountered between this mask and
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param Mask other: the other mask to overlap with this mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param offset: the offset of ``other`` from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         details refer to the :ref:`Mask offset notes <mask-offset-label>`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Returns the number of overlapping set bits between between this mask and
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         dx = mask.overlap_area(other, (x + 1, y)) - mask.overlap_area(other, (x - 1, y))
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         dy = mask.overlap_area(other, (x, y + 1)) - mask.overlap_area(other, (x, y - 1))
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param Mask other: the other mask to overlap with this mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param offset: the offset of ``other`` from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         details refer to the :ref:`Mask offset notes <mask-offset-label>`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   .. method:: overlap_mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Returns a mask of the overlapping set bits`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sg:`overlap_mask(other, offset) -> Mask`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Returns a :class:`Mask`, the same size as this mask, containing the
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      overlapping set bits between this mask and ``other``.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param Mask other: the other mask to overlap with this mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param offset: the offset of ``other`` from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         details refer to the :ref:`Mask offset notes <mask-offset-label>`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      .. ## Mask.overlap_mask ##
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Sets all bits in the mask to 1.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Sets all bits in the mask to 0.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Flips all of the bits in the mask. All the set bits are cleared to 0 and
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Resizes a mask`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      from this mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param size: the width and height (size) of the mask to create
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :returns: a new :class:`Mask` object with its bits scaled from this mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Draws a mask onto another`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Performs a bitwise OR, drawing ``othermask`` onto this mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param Mask other: the mask to draw onto this mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param offset: the offset of ``other`` from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         details refer to the :ref:`Mask offset notes <mask-offset-label>`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Erases a mask from another`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Erases (clears) all bits set in ``other`` from this mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param Mask other: the mask to erase from this mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param offset: the offset of ``other`` from this mask, for more
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         details refer to the :ref:`Mask offset notes <mask-offset-label>`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :returns: the number of set bits in the mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Finds the centroid (the center mass of the set bits) for this mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :returns: a coordinate tuple indicating the centroid of the mask, it will
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         return ``(0, 0)`` if the mask has no bits set
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      in the mask. This works best if performed on a mask with only one
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :returns: the orientation of the set bits in the mask, it will return
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         ``0.0`` if the mask has no bits set
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      encountered in the mask. To find a connected component, the mask is
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         encountered, an empty list is returned if the mask has no bits set
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Returns the convolution of this mask with another mask`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Convolve this mask with the given ``other`` Mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param Mask other: mask to convolve this mask with
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param output: (optional) mask for output (default is ``None``)
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param offset: the offset of ``other`` from this mask, (default is
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         ``(i, j)``) causes it to overlap with this mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         it is returned. Otherwise a mask of size ``(MAX(0, width + other mask's
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         width - 1), MAX(0, height + other mask's height - 1))`` is created and
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Returns a mask containing a connected component`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      connectivity, is used to find a connected component in the mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      connected component in the mask. Optionally, a bit coordinate can be
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :returns: a :class:`Mask` object (same size as this mask) with the largest
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         connected component from this mask, if this mask has no bits set then
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         an empty mask will be returned
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         If the ``pos`` parameter is provided then the mask returned will have
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         the connected component that contains this position. An empty mask will
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         mask's bounds
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Returns a list of masks of connected components`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         component, an empty list is returned if the mask has no bits set
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         an empty list is returned if the mask has no bits set
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      | :sl:`Returns a surface with the mask drawn on it`
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      Draws this mask on the given surface. Set bits (bits set to 1) and unset
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:      :param surface: (optional) Surface to draw mask onto, if no surface is
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         ``Surface(size=mask.get_size(), flags=SRCALPHA, depth=32)`` to be
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         mask any bits outside its bounds will use the ``setcolor`` value
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         mask any bits outside its bounds will use the ``unsetcolor`` value
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         topleft corner of the mask being drawn (default is ``(0, 0)``), if a
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         position the mask on the surface, it does not offset the ``setsurface``
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         and ``unsetsurface`` from the mask, they are always aligned with the
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         mask (i.e. position ``(0, 0)`` on the mask always corresponds to
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:         ``surface`` parameter was provided) with this mask drawn on it
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:   .. ## pygame.mask.Mask ##
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/mask.rst.txt:.. ## pygame.mask ##
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/pixelarray.rst.txt:      with the black/white color mask.
./venv/lib/python3.8/site-packages/pygame/docs/generated/_sources/ref/pixelarray.rst.txt:      PixelArray. It returns a new PixelArray with a black/white color mask
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/base.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/surflock.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/cdrom.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/display.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/freetype.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/surface.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/event.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/bufferproxy.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/mixer.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/version.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/slots.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/rwobject.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/color.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/c_api/rect.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/py-modindex.html:       <a href="ref/mask.html#module-pygame.mask"><code class="xref">pygame.mask</code></a></td><td>
./venv/lib/python3.8/site-packages/pygame/docs/generated/py-modindex.html:       <em>pygame module for image masks.</em></td></tr>
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/PygameIntro.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/chimp.py.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/tom_games4.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/SpriteIntro.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/newbieguide.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/newbieguide.html:<p>There are other ways to do this, with ANDing sprite masks and so on, but any
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/ChimpLineByLine.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/MoveIt.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:<p>By using the camera, transform, and mask modules, pygame can do some basic
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:<section id="using-the-mask-module">
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:<h4>Using the Mask Module<a class="headerlink" href="#using-the-mask-module" title="Permalink to this heading">¶</a></h4>
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:<a class="reference internal" href="../ref/mask.html#module-pygame.mask" title="pygame.mask: pygame module for image masks."><code class="xref py py-mod docutils literal notranslate"><span class="pre">mask</span> <span class="pre">module</span></code></a>, you can also use a camera as an
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:    <span class="n">mask</span> <span class="o">=</span> <span class="n">pygame</span><span class="o">.</span><span class="n">mask</span><span class="o">.</span><span class="n">from_threshold</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">snapshot</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">ccolor</span><span class="p">,</span> <span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:    <span class="n">connected</span> <span class="o">=</span> <span class="n">mask</span><span class="o">.</span><span class="n">connected_component</span><span class="p">()</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:    <span class="k">if</span> <span class="n">mask</span><span class="o">.</span><span class="n">count</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">:</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:        <span class="n">coord</span> <span class="o">=</span> <span class="n">mask</span><span class="o">.</span><span class="n">centroid</span><span class="p">()</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:        <span class="n">pygame</span><span class="o">.</span><span class="n">draw</span><span class="o">.</span><span class="n">circle</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">display</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span> <span class="n">coord</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="nb">min</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span><span class="n">mask</span><span class="o">.</span><span class="n">count</span><span class="p">()</span><span class="o">/</span><span class="mi">400</span><span class="p">),</span><span class="mi">5</span><span class="p">))</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/CameraIntro.html:<img alt="../_images/camera_mask.jpg" class="trailing" src="../_images/camera_mask.jpg" />
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/tom_games5.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/tom_games3.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/DisplayModes.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/DisplayModes.html:<span class="go">        masks =  (16711680, 65280, 255, 0),</span>
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/ImportInit.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/SurfarrayIntro.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/tom_games6.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/tom_games2.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/docs/generated/tut/MakeGames.html:	    <a href="../ref/mask.html">mask</a> | 
./venv/lib/python3.8/site-packages/pygame/sprite.pyi:from pygame.mask import Mask
./venv/lib/python3.8/site-packages/pygame/sprite.pyi:# mask in addition to rect
./venv/lib/python3.8/site-packages/pygame/sprite.pyi:    mask: Mask
./venv/lib/python3.8/site-packages/pygame/sprite.pyi:# argument to collide_mask must either have mask or have image attribute, in
./venv/lib/python3.8/site-packages/pygame/sprite.pyi:def collide_mask(
./venv/lib/python3.8/site-packages/pygame/sprite.py:from pygame.mask import from_surface
./venv/lib/python3.8/site-packages/pygame/sprite.py:def collide_mask(left, right):
./venv/lib/python3.8/site-packages/pygame/sprite.py:    """collision detection between two sprites, using masks.
./venv/lib/python3.8/site-packages/pygame/sprite.py:    pygame.sprite.collide_mask(SpriteLeft, SpriteRight): bool
./venv/lib/python3.8/site-packages/pygame/sprite.py:    Tests for collision between two sprites by testing if their bitmasks
./venv/lib/python3.8/site-packages/pygame/sprite.py:    overlap. If the sprites have a "mask" attribute, that is used as the mask;
./venv/lib/python3.8/site-packages/pygame/sprite.py:    otherwise, a mask is created from the sprite image. Intended to be passed
./venv/lib/python3.8/site-packages/pygame/sprite.py:    have a "rect" and an optional "mask" attribute.
./venv/lib/python3.8/site-packages/pygame/sprite.py:        leftmask = left.mask
./venv/lib/python3.8/site-packages/pygame/sprite.py:        leftmask = from_surface(left.image)
./venv/lib/python3.8/site-packages/pygame/sprite.py:        rightmask = right.mask
./venv/lib/python3.8/site-packages/pygame/sprite.py:        rightmask = from_surface(right.image)
./venv/lib/python3.8/site-packages/pygame/sprite.py:    return leftmask.overlap(rightmask, (xoffset, yoffset))
Binary file ./venv/lib/python3.8/site-packages/pygame/__pycache__/cursors.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/__pycache__/sprite.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/__pycache__/__init__.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/pygame/_sprite.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/pygame/display.pyi:    masks: RGBAOutput
./venv/lib/python3.8/site-packages/pyzmq-25.0.1.dist-info/LICENSE.LESSER:works, such as semiconductor masks.
./venv/lib/python3.8/site-packages/tornado/websocket.py:from tornado.util import _websocket_mask
./venv/lib/python3.8/site-packages/tornado/websocket.py:    # Bit masks for the first byte of a frame.
./venv/lib/python3.8/site-packages/tornado/websocket.py:        mask_outgoing: bool,
./venv/lib/python3.8/site-packages/tornado/websocket.py:        self.mask_outgoing = mask_outgoing
./venv/lib/python3.8/site-packages/tornado/websocket.py:        self._masked_frame = None
./venv/lib/python3.8/site-packages/tornado/websocket.py:        self._frame_mask = None  # type: Optional[bytes]
./venv/lib/python3.8/site-packages/tornado/websocket.py:        if self.mask_outgoing:
./venv/lib/python3.8/site-packages/tornado/websocket.py:            mask_bit = 0x80
./venv/lib/python3.8/site-packages/tornado/websocket.py:            mask_bit = 0
./venv/lib/python3.8/site-packages/tornado/websocket.py:            frame += struct.pack("B", data_len | mask_bit)
./venv/lib/python3.8/site-packages/tornado/websocket.py:            frame += struct.pack("!BH", 126 | mask_bit, data_len)
./venv/lib/python3.8/site-packages/tornado/websocket.py:            frame += struct.pack("!BQ", 127 | mask_bit, data_len)
./venv/lib/python3.8/site-packages/tornado/websocket.py:        if self.mask_outgoing:
./venv/lib/python3.8/site-packages/tornado/websocket.py:            mask = os.urandom(4)
./venv/lib/python3.8/site-packages/tornado/websocket.py:            data = mask + _websocket_mask(mask, data)
./venv/lib/python3.8/site-packages/tornado/websocket.py:        header, mask_payloadlen = struct.unpack("BB", data)
./venv/lib/python3.8/site-packages/tornado/websocket.py:        is_masked = bool(mask_payloadlen & 0x80)
./venv/lib/python3.8/site-packages/tornado/websocket.py:        payloadlen = mask_payloadlen & 0x7F
./venv/lib/python3.8/site-packages/tornado/websocket.py:        # Read the payload, unmasking if necessary.
./venv/lib/python3.8/site-packages/tornado/websocket.py:        if is_masked:
./venv/lib/python3.8/site-packages/tornado/websocket.py:            self._frame_mask = await self._read_bytes(4)
./venv/lib/python3.8/site-packages/tornado/websocket.py:        if is_masked:
./venv/lib/python3.8/site-packages/tornado/websocket.py:            assert self._frame_mask is not None
./venv/lib/python3.8/site-packages/tornado/websocket.py:            data = _websocket_mask(self._frame_mask, data)
./venv/lib/python3.8/site-packages/tornado/websocket.py:        return WebSocketProtocol13(self, mask_outgoing=True, params=self.params)
./venv/lib/python3.8/site-packages/tornado/netutil.py:    ``flags`` is a bitmask of AI_* flags to `~socket.getaddrinfo`, like
./venv/lib/python3.8/site-packages/tornado/web.py:from tornado.util import ObjectDict, unicode_type, _websocket_mask
./venv/lib/python3.8/site-packages/tornado/web.py:           The xsrf token will now be have a random mask applied in every
./venv/lib/python3.8/site-packages/tornado/web.py:                mask = os.urandom(4)
./venv/lib/python3.8/site-packages/tornado/web.py:                        binascii.b2a_hex(mask),
./venv/lib/python3.8/site-packages/tornado/web.py:                        binascii.b2a_hex(_websocket_mask(mask, token)),
./venv/lib/python3.8/site-packages/tornado/web.py:                    _, mask_str, masked_token, timestamp_str = cookie.split("|")
./venv/lib/python3.8/site-packages/tornado/web.py:                    mask = binascii.a2b_hex(utf8(mask_str))
./venv/lib/python3.8/site-packages/tornado/web.py:                    token = _websocket_mask(mask, binascii.a2b_hex(utf8(masked_token)))
./venv/lib/python3.8/site-packages/tornado/util.py:def _websocket_mask_python(mask: bytes, data: bytes) -> bytes:
./venv/lib/python3.8/site-packages/tornado/util.py:    """Websocket masking function.
./venv/lib/python3.8/site-packages/tornado/util.py:    `mask` is a `bytes` object of length 4; `data` is a `bytes` object of any length.
./venv/lib/python3.8/site-packages/tornado/util.py:    Returns a `bytes` object of the same length as `data` with the mask applied
./venv/lib/python3.8/site-packages/tornado/util.py:    mask_arr = array.array("B", mask)
./venv/lib/python3.8/site-packages/tornado/util.py:    unmasked_arr = array.array("B", data)
./venv/lib/python3.8/site-packages/tornado/util.py:        unmasked_arr[i] = unmasked_arr[i] ^ mask_arr[i % 4]
./venv/lib/python3.8/site-packages/tornado/util.py:    return unmasked_arr.tobytes()
./venv/lib/python3.8/site-packages/tornado/util.py:    _websocket_mask = _websocket_mask_python
./venv/lib/python3.8/site-packages/tornado/util.py:        from tornado.speedups import websocket_mask as _websocket_mask
./venv/lib/python3.8/site-packages/tornado/util.py:        _websocket_mask = _websocket_mask_python
Binary file ./venv/lib/python3.8/site-packages/tornado/test/__pycache__/websocket_test.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:    from tornado.util import _websocket_mask_python
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:        # Bytes out includes the 4-byte mask key per message.
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:        # Bytes out includes the 4 bytes mask key per message.
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:    # Subclasses should define self.mask(mask, data)
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:    def mask(self, mask: bytes, data: bytes) -> bytes:
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:    def test_mask(self: typing.Any):
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:        self.assertEqual(self.mask(b"abcd", b""), b"")
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:        self.assertEqual(self.mask(b"abcd", b"b"), b"\x03")
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:        self.assertEqual(self.mask(b"abcd", b"54321"), b"TVPVP")
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:        self.assertEqual(self.mask(b"ZXCV", b"98765432"), b"c`t`olpd")
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:            self.mask(b"\x00\x01\x02\x03", b"\xff\xfb\xfd\xfc\xfe\xfa"),
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:            self.mask(b"\xff\xfb\xfd\xfc", b"\x00\x01\x02\x03\x04\x05"),
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:    def mask(self, mask, data):
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:        return _websocket_mask_python(mask, data)
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:    def mask(self, mask, data):
./venv/lib/python3.8/site-packages/tornado/test/websocket_test.py:        return speedups.websocket_mask(mask, data)
Binary file ./venv/lib/python3.8/site-packages/tornado/speedups.abi3.so matches
Binary file ./venv/lib/python3.8/site-packages/tornado/__pycache__/websocket.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/tornado/__pycache__/web.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/tornado/__pycache__/netutil.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/tornado/__pycache__/util.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/jedi-0.18.2.dist-info/RECORD:jedi/third_party/typeshed/third_party/2and3/google/protobuf/field_mask_pb2.pyi,sha256=6E26cc872vDtSCX0B1XQGAHUW_ajwYcCtKKg-jrejJg,1558
./venv/lib/python3.8/site-packages/click/_compat.py:        os.chmod(tmp_filename, perm)  # in case perm includes bits in umask
Binary file ./venv/lib/python3.8/site-packages/requests/__pycache__/utils.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/requests/utils.py:            test = test.replace(".", r"\.")  # mask dots
./venv/lib/python3.8/site-packages/requests/utils.py:    netmask = struct.unpack("=L", socket.inet_aton(dotted_netmask(int(bits))))[0]
./venv/lib/python3.8/site-packages/requests/utils.py:    network = struct.unpack("=L", socket.inet_aton(netaddr))[0] & netmask
./venv/lib/python3.8/site-packages/requests/utils.py:    return (ipaddr & netmask) == (network & netmask)
./venv/lib/python3.8/site-packages/requests/utils.py:def dotted_netmask(mask):
./venv/lib/python3.8/site-packages/requests/utils.py:    """Converts mask from /xx format to xxx.xxx.xxx.xxx
./venv/lib/python3.8/site-packages/requests/utils.py:    Example: if mask is 24 function returns 255.255.255.0
./venv/lib/python3.8/site-packages/requests/utils.py:    bits = 0xFFFFFFFF ^ (1 << 32 - mask) - 1
./venv/lib/python3.8/site-packages/requests/utils.py:            mask = int(string_network.split("/")[1])
./venv/lib/python3.8/site-packages/requests/utils.py:        if mask < 1 or mask > 32:
./venv/lib/python3.8/site-packages/numpy-1.22.4.dist-info/LICENSE.txt:works, such as semiconductor masks.
./venv/lib/python3.8/site-packages/numpy-1.22.4.dist-info/RECORD:numpy/distutils/checks/extra_avx512bw_mask.c,sha256=pVPOhcu80yJVnIhOcHHXOlZ2proJ1MUf0XgccqhPoNk,636
./venv/lib/python3.8/site-packages/numpy-1.22.4.dist-info/RECORD:numpy/distutils/checks/extra_avx512dq_mask.c,sha256=nMfIvepISGFDexPrMYl5LWtdmt6Uy9TKPzF4BVayw2I,504
./venv/lib/python3.8/site-packages/numpy-1.22.4.dist-info/RECORD:numpy/matrixlib/tests/__pycache__/test_masked_matrix.cpython-38.pyc,,
./venv/lib/python3.8/site-packages/numpy-1.22.4.dist-info/RECORD:numpy/matrixlib/tests/test_masked_matrix.py,sha256=RyL5DfLJoNUe-ZgQndMvpP8Jp_XKlreyhWjR1sfU-9A,8925
Binary file ./venv/lib/python3.8/site-packages/numpy.libs/libgfortran-040039e1.so.5.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libavformat-8ef5c7db.so.58.76.100 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libpng16-57e5e0a0.so.16.37.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libavcodec-5896f664.so.58.134.100 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libssl-c8c53640.so.1.1 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libxkbcommon-x11-c65ed502.so.0.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libxcb-icccm-413c9f41.so.4.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libQt5XcbQpa-c112ba75.so.5.15.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libxcb-shape-25c2b258.so.0.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libgfortran-91cc3cb1.so.3.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libQt5Gui-48e93776.so.5.15.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libQt5Widgets-e69d94fb.so.5.15.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libavutil-9c768859.so.56.70.100 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libvpx-f22f1483.so.7.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libxkbcommon-71ae2972.so.0.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libQt5Core-39545cc7.so.5.15.0 matches
Binary file ./venv/lib/python3.8/site-packages/opencv_contrib_python.libs/libcrypto-d21001fc.so.1.1 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libsystemd-9be61d21.so.0.6.0 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libvorbis-ac399090.so.0.4.9 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/liblzma-004595ca.so.5.2.2 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libharfbuzz-f991c6ff.so.0.50100.0 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libtiff-23a934bd.so.5.8.0 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libpulse-5b5d1e90.so.0.23.0 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libSDL2_mixer-2-4d6128ca.0.so.0.600.2 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libSDL2-2-d18cb167.0.so.0.2400.2 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libasound-d80805e8.so.2.0.0 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libdbus-1-5d678da9.so.3.14.14 matches
Binary file ./venv/lib/python3.8/site-packages/pygame.libs/libpulsecommon-14-80414fd3.2.so matches
./venv/lib/python3.8/site-packages/psutil-5.9.4.dist-info/METADATA:    {'lo': [snicaddr(family=<AddressFamily.AF_INET: 2>, address='127.0.0.1', netmask='255.0.0.0', broadcast='127.0.0.1', ptp=None),
./venv/lib/python3.8/site-packages/psutil-5.9.4.dist-info/METADATA:            snicaddr(family=<AddressFamily.AF_INET6: 10>, address='::1', netmask='ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff', broadcast=None, ptp=None),
./venv/lib/python3.8/site-packages/psutil-5.9.4.dist-info/METADATA:            snicaddr(family=<AddressFamily.AF_LINK: 17>, address='00:00:00:00:00:00', netmask=None, broadcast='00:00:00:00:00:00', ptp=None)],
./venv/lib/python3.8/site-packages/psutil-5.9.4.dist-info/METADATA:     'wlan0': [snicaddr(family=<AddressFamily.AF_INET: 2>, address='192.168.1.3', netmask='255.255.255.0', broadcast='192.168.1.255', ptp=None),
./venv/lib/python3.8/site-packages/psutil-5.9.4.dist-info/METADATA:               snicaddr(family=<AddressFamily.AF_INET6: 10>, address='fe80::c685:8ff:fe45:641%wlan0', netmask='ffff:ffff:ffff:ffff::', broadcast=None, ptp=None),
./venv/lib/python3.8/site-packages/psutil-5.9.4.dist-info/METADATA:               snicaddr(family=<AddressFamily.AF_LINK: 17>, address='c4:85:08:45:06:41', netmask=None, broadcast='ff:ff:ff:ff:ff:ff', ptp=None)]}
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:../../../include/site/python3.8/pygame/include/bitmask.h,sha256=tGzYwZ407sMIHDQG7xeXBQCRmhZZ4wp-yTerhUmIlCU,4952
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:../../../include/site/python3.8/pygame/include/pygame_mask.h,sha256=ONXIz3M3MPF4BlPSS2xRquysEYjZZf7AP2JRro8j4I0,1303
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:../../../include/site/python3.8/pygame/mask.h,sha256=Y7OqzNUqQQHchUsSlvd-ja5d9IgAfSV2uFlaa8_5Lys,153
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/docs/generated/_images/camera_mask.jpg,sha256=0u0yMCldZMvSW1vyO2KK32D-fVYuYpXlNzmWwbdZ__s,18779
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/docs/generated/_sources/ref/mask.rst.txt,sha256=RAVpZZNK2i-ltHlCbNZgFa80x2RAXc_4lYkPgAVoyjs,24220
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/docs/generated/ref/mask.html,sha256=YdEi0O_D1wK-CxTWdZEVf5vDOJVxFoFjEV_jowCw_us,81154
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/examples/__pycache__/mask.cpython-38.pyc,,
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/examples/mask.py,sha256=henO1A-xYDZrB6yqYVOnXkVr-8JeZbNXDODhGmczUgU,5725
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/mask.cpython-38-x86_64-linux-gnu.so,sha256=IK4GCr8pdP8-waPEHURiKua2FvQm0WDs404Hx1GIXZQ,87969
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/mask.pyi,sha256=bBxSevY0teCHn86xPnQIgx10xLd5HX2O3Ohkfrz_m5E,2304
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/tests/__pycache__/mask_test.cpython-38.pyc,,
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/tests/fixtures/xbm_cursors/white_sizing_mask.xbm,sha256=CKQeiOtlFoJdAts83UmTEeVk-3pxgJ9Wu2QJaCjzAQM,391
./venv/lib/python3.8/site-packages/pygame-2.3.0.dist-info/RECORD:pygame/tests/mask_test.py,sha256=95xNu2gy1TVgxKNnDdcYXgo_rKaTdKPAqeeKn1jI_Xg,245880
Binary file ./venv/lib/python3.8/site-packages/scipy/spatial/_qhull.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:                 nan_screen=False, mask_screen=False,
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:    if not force_weights and mask_screen:
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:        force_weights = any(np.ma.getmask(a) is not np.ma.nomask for a in arrays)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:            mask_screen = True
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:            arrays = tuple(np.ma.masked_invalid(a) if has_nan else a
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:    if mask_screen:
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:        weights = _weight_masked(arrays, weights, axis)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:def _weight_masked(arrays, weights, axis):
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:        axis_mask = np.ma.getmask(a)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:        if axis_mask is np.ma.nomask:
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:            axis_mask = axis_mask.any(axis=not_axes)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:        weights *= 1 - axis_mask.astype(int)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:    except AttributeError:  # masked array
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:        chked = _chk_weights(arrays, weights=weights, axis=axis, force_weights=True, mask_screen=True)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:                dud_weights[:weights.size] = weights  # not exactly 1 because of masked arrays
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:                # mask out those nan values
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_distance.py:                    dud_arrays = [np.ma.masked_invalid(a) for a in dud_arrays]
Binary file ./venv/lib/python3.8/site-packages/scipy/spatial/tests/__pycache__/test_qhull.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/spatial/tests/__pycache__/test_distance.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/spatial/tests/__pycache__/test_kdtree.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_qhull.py:    def test_masked_array_fails(self):
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_qhull.py:        masked_array = np.ma.masked_all(1)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_qhull.py:        assert_raises(ValueError, qhull.Delaunay, masked_array)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_qhull.py:    def test_masked_array_fails(self):
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_qhull.py:        masked_array = np.ma.masked_all(1)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_qhull.py:        assert_raises(ValueError, qhull.ConvexHull, masked_array)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_qhull.py:    def test_masked_array_fails(self):
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_qhull.py:        masked_array = np.ma.masked_all(1)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_qhull.py:        assert_raises(ValueError, qhull.Voronoi, masked_array)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_kdtree.py:    mask = np.random.randint(0, z.size, np.random.randint(50) + 5)
./venv/lib/python3.8/site-packages/scipy/spatial/tests/test_kdtree.py:    z_copy.flat[mask] = FILLVAL
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    mask = norm > 1e-4
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    nm = norm[mask]
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k[mask] = (1 - 0.5 * nm / np.tan(0.5 * nm)) / nm**2
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    mask = ~mask
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    nm = norm[mask]
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k[mask] = 1/12 + 1/720 * nm**2
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    mask = norm > 1e-4
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    nm = norm[mask]
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k1[mask] = (1 - np.cos(nm)) / nm ** 2
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k2[mask] = (nm - np.sin(nm)) / nm ** 3
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    mask = ~mask
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    nm = norm[mask]
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k1[mask] = 0.5 - nm ** 2 / 24
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k2[mask] = 1 / 6 - nm ** 2 / 120
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    mask = norm > 1e-4
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    nm = norm[mask]
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k1[mask] = (-nm * np.sin(nm) - 2 * (np.cos(nm) - 1)) / nm ** 4
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k2[mask] = (-2 * nm + 3 * np.sin(nm) - nm * np.cos(nm)) / nm ** 5
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k3[mask] = (nm - np.sin(nm)) / nm ** 3
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    mask = ~mask
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    nm = norm[mask]
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k1[mask] = 1/12 - nm ** 2 / 180
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k2[mask] = -1/60 + nm ** 2 / 12604
./venv/lib/python3.8/site-packages/scipy/spatial/transform/_rotation_spline.py:    k3[mask] = 1/6 - nm ** 2 / 120
./venv/lib/python3.8/site-packages/scipy/spatial/transform/tests/test_rotation_spline.py:    mask = (i >= 0) & (i < 15)
./venv/lib/python3.8/site-packages/scipy/spatial/transform/tests/test_rotation_spline.py:    i = i[mask]
./venv/lib/python3.8/site-packages/scipy/spatial/transform/tests/test_rotation_spline.py:    j = j[mask]
./venv/lib/python3.8/site-packages/scipy/spatial/transform/tests/test_rotation_spline.py:    values = values[mask]
Binary file ./venv/lib/python3.8/site-packages/scipy/spatial/transform/tests/__pycache__/test_rotation_spline.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/spatial/transform/__pycache__/_rotation_spline.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/spatial/__pycache__/distance.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/spatial/distance.py:    X = _asarray_validated(X, sparse_ok=False, objects_ok=True, mask_ok=True,
./venv/lib/python3.8/site-packages/scipy/cluster/vq.py:    zero_std_mask = std_dev == 0
./venv/lib/python3.8/site-packages/scipy/cluster/vq.py:    if zero_std_mask.any():
./venv/lib/python3.8/site-packages/scipy/cluster/vq.py:        std_dev[zero_std_mask] = 1.0
Binary file ./venv/lib/python3.8/site-packages/scipy/cluster/__pycache__/vq.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    mask1 = (n <= 0) | (n != floor(n))
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    place(y, mask1, nan)
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    mask2 = (1-mask1) & (abs(denom) < minval)
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    xsub = extract(mask2, x)
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    nsub = extract(mask2, n)
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    place(y, mask2, pow(-1, np.round(zsub)*(nsub-1)))
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    mask = (1-mask1) & (1-mask2)
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    xsub = extract(mask, x)
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    nsub = extract(mask, n)
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    dsub = extract(mask, denom)
./venv/lib/python3.8/site-packages/scipy/special/_basic.py:    place(y, mask, sin(nsub*xsub)/(nsub*dsub))
Binary file ./venv/lib/python3.8/site-packages/scipy/special/_ufuncs.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/scipy/special/tests/test_basic.py:            mask = np.isfinite(w)
./venv/lib/python3.8/site-packages/scipy/special/tests/test_basic.py:            w = w[mask]
./venv/lib/python3.8/site-packages/scipy/special/tests/test_basic.py:            z = z[mask]
./venv/lib/python3.8/site-packages/scipy/special/tests/test_basic.py:            mask = np.isfinite(w_real)
./venv/lib/python3.8/site-packages/scipy/special/tests/test_basic.py:            w_real = w_real[mask]
./venv/lib/python3.8/site-packages/scipy/special/tests/test_basic.py:            x = x[mask]
./venv/lib/python3.8/site-packages/scipy/special/tests/test_cdflib.py:        mask1 = np.abs(x - self.a) < self.rtol*np.abs(self.a) + self.atol
./venv/lib/python3.8/site-packages/scipy/special/tests/test_cdflib.py:        mask2 = np.abs(x - self.b) < self.rtol*np.abs(self.b) + self.atol
./venv/lib/python3.8/site-packages/scipy/special/tests/test_cdflib.py:        return np.where(mask1 | mask2, False, True)
Binary file ./venv/lib/python3.8/site-packages/scipy/special/tests/__pycache__/test_cdflib.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/special/tests/__pycache__/test_basic.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/special/cython_special.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:            param_mask = np.ones((data.shape[0],), np.bool_)
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:                    param_mask &= list(filter(data[:,j]))
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:            data = data[param_mask]
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:        def eval_func_at_params(func, skip_mask=None):
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:                    if skip_mask is not None and skip_mask[j]:
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:            skip_mask = None
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:                skip_mask = np.isnan(got[0])
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:            wanted = eval_func_at_params(self.result_func, skip_mask=skip_mask)
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:            tol_mask = (diff <= atol + rtol*abs_y)
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:            pinf_mask = (pinf_x == pinf_y)
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:            minf_mask = (minf_x == minf_y)
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:            nan_mask = (nan_x == nan_y)
./venv/lib/python3.8/site-packages/scipy/special/_testutils.py:            bad_j = ~(tol_mask & pinf_mask & minf_mask & nan_mask)
Binary file ./venv/lib/python3.8/site-packages/scipy/special/__pycache__/_testutils.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/special/__pycache__/_basic.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/special/__pycache__/_logsumexp.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/special/_logsumexp.py:    Notice that `logsumexp` does not directly support masked arrays. To use it
./venv/lib/python3.8/site-packages/scipy/special/_logsumexp.py:    on a masked array, convert the mask into zero weights:
./venv/lib/python3.8/site-packages/scipy/special/_logsumexp.py:    ...                  mask=[False, True, False])
./venv/lib/python3.8/site-packages/scipy/special/_logsumexp.py:    >>> b = (~a.mask).astype(int)
./venv/lib/python3.8/site-packages/scipy/interpolate/_interpolate.py:                mask = np.isnan(self.x)
./venv/lib/python3.8/site-packages/scipy/interpolate/_interpolate.py:                if mask.any():
./venv/lib/python3.8/site-packages/scipy/interpolate/_interpolate.py:                    sx = self.x[~mask]
./venv/lib/python3.8/site-packages/scipy/interpolate/_interpolate.py:        #    or return a list of mask array indicating the outofbounds values.
./venv/lib/python3.8/site-packages/scipy/interpolate/_interpolate.py:            The mask on x_new of values that are out of the bounds.
./venv/lib/python3.8/site-packages/scipy/interpolate/tests/test_interpolate.py:    mask = (xnew >= a) & (xnew <= b)
./venv/lib/python3.8/site-packages/scipy/interpolate/tests/test_interpolate.py:    res[~mask] = fill
./venv/lib/python3.8/site-packages/scipy/interpolate/tests/test_interpolate.py:    xx = xnew.compress(mask)
./venv/lib/python3.8/site-packages/scipy/interpolate/tests/test_interpolate.py:    res[mask] = values
./venv/lib/python3.8/site-packages/scipy/interpolate/tests/test_bsplines.py:        mask = (t[k] < xx) & (xx < t[-k-1])
./venv/lib/python3.8/site-packages/scipy/interpolate/tests/test_bsplines.py:        assert_allclose(b(xx[mask], extrapolate=True),
./venv/lib/python3.8/site-packages/scipy/interpolate/tests/test_bsplines.py:                        b(xx[mask], extrapolate=False))
Binary file ./venv/lib/python3.8/site-packages/scipy/interpolate/tests/__pycache__/test_bsplines.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/interpolate/tests/__pycache__/test_interpolate.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/interpolate/_cubic.py:        mask = np.sign(d) != np.sign(m0)
./venv/lib/python3.8/site-packages/scipy/interpolate/_cubic.py:        mask2 = (np.sign(m0) != np.sign(m1)) & (np.abs(d) > 3.*np.abs(m0))
./venv/lib/python3.8/site-packages/scipy/interpolate/_cubic.py:        mmm = (~mask) & mask2
./venv/lib/python3.8/site-packages/scipy/interpolate/_cubic.py:        d[mask] = 0.
./venv/lib/python3.8/site-packages/scipy/interpolate/_cubic.py:        # These are the mask of where the slope at breakpoint is defined:
Binary file ./venv/lib/python3.8/site-packages/scipy/interpolate/__pycache__/_cubic.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/interpolate/__pycache__/_interpolate.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/integrate/_ivp/ivp.py:    mask = (up & (direction > 0) |
./venv/lib/python3.8/site-packages/scipy/integrate/_ivp/ivp.py:    return np.nonzero(mask)[0]
./venv/lib/python3.8/site-packages/scipy/integrate/_ivp/rk.py:        mask = denom > 0
./venv/lib/python3.8/site-packages/scipy/integrate/_ivp/rk.py:        correction_factor[mask] = np.abs(err5[mask]) / denom[mask]
Binary file ./venv/lib/python3.8/site-packages/scipy/integrate/_ivp/__pycache__/ivp.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/integrate/_ivp/__pycache__/rk.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:            mask = offsets > -1
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:            self.data[offsets[mask]] = x[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:            mask = ~mask
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:            i = i[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:            j = j[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:            self._insert_many(i, j, x[mask])
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:            mask = self.indices < new_N
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:            if not np.all(mask):
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:                self.indices = self.indices[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:                self.data = self.data[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_compressed.py:                major_index, val = self._minor_reduce(np.add, mask)
./venv/lib/python3.8/site-packages/scipy/sparse/_data.py:        mask = value != 0
./venv/lib/python3.8/site-packages/scipy/sparse/_data.py:        major_index = np.compress(mask, major_index)
./venv/lib/python3.8/site-packages/scipy/sparse/_data.py:        value = np.compress(mask, value)
./venv/lib/python3.8/site-packages/scipy/sparse/_base.py:        nz_mask = A.data != 0
./venv/lib/python3.8/site-packages/scipy/sparse/_base.py:        return (A.row[nz_mask], A.col[nz_mask])
./venv/lib/python3.8/site-packages/scipy/sparse/_csc.py:        nz_mask = self.data != 0
./venv/lib/python3.8/site-packages/scipy/sparse/_csc.py:        row = row[nz_mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_csc.py:        col = col[nz_mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_bsr.py:        mask = (self.data != 0).reshape(-1,R*C).sum(axis=1)  # nonzero blocks
./venv/lib/python3.8/site-packages/scipy/sparse/_bsr.py:        nonzero_blocks = mask.nonzero()[0]
./venv/lib/python3.8/site-packages/scipy/sparse/_bsr.py:                                         self.indices, mask)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:    def _data_mask(self):
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        """Returns a mask of the same shape as self.data, where
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask[i,j] is True when data[i,j] corresponds to a stored element."""
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask = (row >= 0)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask &= (row < num_rows)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask &= (offset_inds < num_cols)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        return mask
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask = self._data_mask()
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        return np.count_nonzero(self.data[mask])
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:            mask = self._data_mask()
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:            x = (self.data * mask).sum(axis=0)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask = (row >= 0)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask &= (row < num_rows)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask &= (offset_inds < num_cols)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask &= (self.data != 0)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        indptr[1:offset_len+1] = np.cumsum(mask.sum(axis=0)[:num_cols])
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        indices = row.T[mask.T].astype(idx_dtype, copy=False)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        data = self.data.T[mask.T]
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask = (row >= 0)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask &= (row < num_rows)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask &= (offset_inds < num_cols)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        mask &= (self.data != 0)
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        row = row[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        col = np.tile(offset_inds, num_offsets)[mask.ravel()]
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:        data = self.data[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:            mask = (self.offsets[:, None] + self.shape[0] <=
./venv/lib/python3.8/site-packages/scipy/sparse/_dia.py:            self.data[mask] = 0
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:   csgraph_from_masked
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:   csgraph_masked_from_dense
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:   csgraph_to_masked
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:- for dense masked representations (of type np.ma.MaskedArray), non-edges
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:  are represented by masked values. This can be useful when graphs with
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:We can construct the dense, masked, and sparse representations as follows,
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:    >>> G_masked = np.ma.masked_values(G_dense, 0)
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:value? In this case, either a masked or sparse representation must be used
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:    >>> G2_masked = np.ma.masked_invalid(G2_data)
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:(csr, csc, or lil format), masked representations, or dense representations
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:           'csgraph_masked_from_dense',
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:           'csgraph_from_masked',
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:           'csgraph_to_masked',
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:    csgraph_to_dense, csgraph_masked_from_dense, csgraph_from_masked,
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__init__.py:    csgraph_to_masked
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/tests/test_shortest_path.py:def test_masked_input():
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/tests/test_shortest_path.py:    np.ma.masked_equal(directed_G, 0)
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/tests/__pycache__/test_shortest_path.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_validation.py:    csgraph_masked_from_dense, csgraph_from_masked
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_validation.py:            mask = csgraph.mask
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_validation.py:            csgraph[mask] = null_value_out
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_validation.py:            csgraph = csgraph_from_masked(csgraph)
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_validation.py:            csgraph = csgraph_masked_from_dense(csgraph,
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_validation.py:            mask = csgraph.mask
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_validation.py:            csgraph[mask] = null_value_out
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_tools.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        isolated_node_mask = diag == 0
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        w = np.where(isolated_node_mask, 1, np.sqrt(diag))
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        isolated_node_mask = (w == 0)
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        w = np.where(isolated_node_mask, 1, np.sqrt(w))
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        m.setdiag(1 - isolated_node_mask)
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        isolated_node_mask = diag == 0
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        w = np.where(isolated_node_mask, 1, np.sqrt(diag))
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        isolated_node_mask = (w == 0)
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        w = np.where(isolated_node_mask, 1, np.sqrt(w))
./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/_laplacian.py:        _setdiag_dense(m, 1 - isolated_node_mask)
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__pycache__/_validation.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__pycache__/_laplacian.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/csgraph/__pycache__/__init__.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:    nz_mask = A.data != 0
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:    return A.row[nz_mask], A.col[nz_mask], A.data[nz_mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:    mask = A.row + k >= A.col
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:    return _masked_coo(A, mask).asformat(format)
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:    mask = A.row + k <= A.col
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:    return _masked_coo(A, mask).asformat(format)
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:def _masked_coo(A, mask):
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:    row = A.row[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:    col = A.col[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_extract.py:    data = A.data[mask]
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/__pycache__/_construct.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/__pycache__/_extract.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/__pycache__/_coo.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/__pycache__/_data.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/__pycache__/_dia.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/__pycache__/_bsr.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/__pycache__/_csc.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/__pycache__/_base.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/sparse/__pycache__/_compressed.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:            mask = np.logical_and(self.row < new_M, self.col < new_N)
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:            if not mask.all():
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:                self.row = self.row[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:                self.col = self.col[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:                self.data = self.data[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        diag_mask = (self.row + k) == self.col
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:            row = self.row[diag_mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:            data = self.data[diag_mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:            row, _, data = self._sum_duplicates(self.row[diag_mask],
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:                                                self.col[diag_mask],
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:                                                self.data[diag_mask])
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        unique_mask = ((row[1:] != row[:-1]) |
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        unique_mask = np.append(True, unique_mask)
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        row = row[unique_mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        col = col[unique_mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        unique_inds, = np.nonzero(unique_mask)
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        mask = self.data != 0
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        self.data = self.data[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        self.row = self.row[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_coo.py:        self.col = self.col[mask]
./venv/lib/python3.8/site-packages/scipy/sparse/_construct.py:    block_mask = np.zeros(blocks.shape, dtype=bool)
./venv/lib/python3.8/site-packages/scipy/sparse/_construct.py:                block_mask[i,j] = True
./venv/lib/python3.8/site-packages/scipy/sparse/_construct.py:    nnz = sum(block.nnz for block in blocks[block_mask])
./venv/lib/python3.8/site-packages/scipy/sparse/_construct.py:        all_dtypes = [blk.dtype for blk in blocks[block_mask]]
./venv/lib/python3.8/site-packages/scipy/sparse/_construct.py:    ii, jj = np.nonzero(block_mask)
./venv/lib/python3.8/site-packages/scipy/linalg/_matfuncs.py:        mask = mu != 0
./venv/lib/python3.8/site-packages/scipy/linalg/_matfuncs.py:        sinchMu[mask] = np.sinh(mu[mask]) / mu[mask]
./venv/lib/python3.8/site-packages/scipy/linalg/_matfuncs.py:    mask_z = l_diff == 0.
./venv/lib/python3.8/site-packages/scipy/linalg/_matfuncs.py:    lexp_diff[~mask_z] /= l_diff[~mask_z]
./venv/lib/python3.8/site-packages/scipy/linalg/_matfuncs.py:    lexp_diff[mask_z] = np.exp(x[:-1][mask_z])
./venv/lib/python3.8/site-packages/scipy/linalg/_basic.py:        # zero, we use a mask that is the broadcast result of an array
./venv/lib/python3.8/site-packages/scipy/linalg/_basic.py:        mask = np.ones_like(b, dtype=bool) & near_zeros
./venv/lib/python3.8/site-packages/scipy/linalg/_basic.py:        q[mask] = 0
./venv/lib/python3.8/site-packages/scipy/linalg/tests/test_decomp_update.py:    mask = np.tri(a.shape[0], a.shape[1], -1, np.bool_)
./venv/lib/python3.8/site-packages/scipy/linalg/tests/test_decomp_update.py:    assert_allclose(a[mask], 0.0, rtol=rtol, atol=atol)
./venv/lib/python3.8/site-packages/scipy/linalg/tests/test_decomp.py:    # Test branch if mask.any is True:
Binary file ./venv/lib/python3.8/site-packages/scipy/linalg/tests/__pycache__/test_decomp_update.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/linalg/_decomp.py:    complex_mask = iscomplex(w)
./venv/lib/python3.8/site-packages/scipy/linalg/_decomp.py:    n_complex = complex_mask.sum(axis=-1)
./venv/lib/python3.8/site-packages/scipy/linalg/_decomp.py:    idx = nonzero(complex_mask)
./venv/lib/python3.8/site-packages/scipy/linalg/_decomp_svd.py:    mask = sigma ** 2 >= 0.5
./venv/lib/python3.8/site-packages/scipy/linalg/_decomp_svd.py:    if mask.any():
./venv/lib/python3.8/site-packages/scipy/linalg/_decomp_svd.py:    theta = where(mask, mu_arcsin, arccos(clip(sigma[::-1], -1., 1.)))
Binary file ./venv/lib/python3.8/site-packages/scipy/linalg/__pycache__/_decomp.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/linalg/__pycache__/_matfuncs.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/linalg/__pycache__/_basic.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/linalg/__pycache__/_decomp_svd.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/linalg/_matfuncs_expm.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:from numpy import (arange, putmask, ravel, ones, shape, ndarray, zeros, floor,
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:    def _support_mask(self, x, *args):
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:    def _open_support_mask(self, x, *args):
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        if np.any(~self._support_mask(x, *args)):
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        cond0 = ~self._support_mask(x, *args)
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        cond1 = self._support_mask(x, *args) & (scale > 0)
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        putmask(output, (1-cond0)+np.isnan(x), self.badvalue)
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        cond1 = self._support_mask(x, *args) & (scale > 0)
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        putmask(output, (1-cond0)+np.isnan(x), self.badvalue)
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        cond1 = self._open_support_mask(x, *args) & (scale > 0)
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        cond1 = self._open_support_mask(x, *args) & (scale > 0)
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        cond1 = self._open_support_mask(x, *args) & (scale > 0)
./venv/lib/python3.8/site-packages/scipy/stats/_distn_infrastructure.py:        cond1 = self._open_support_mask(x, *args) & (scale > 0)
./venv/lib/python3.8/site-packages/scipy/stats/mstats_basic.py:    'brunnermunzel', 'ma', 'masked', 'nomask', 'namedtuple',
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/_rcont/rcont.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:    def _support_mask(self, x):
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:            out_of_bounds = ~cov_object._support_mask(x-mean)
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:            out_of_bounds = ~cov_object._support_mask(x-mean)
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:            out_of_bounds = ~self.cov_object._support_mask(x-self.mean)
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:        M = np.ma.masked_array(M, mask=cond)
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:        M = np.ma.masked_array(M, mask=cond)
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:        M = np.ma.masked_array(M, mask=cond)
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:            n0mask = n == 0
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:            rvs[..., c] = (~n0mask *
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:                                                       rem + n0mask,
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:                                                       n + n0mask,
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:        mask = np.all(r2 == r, axis=-1) & np.all(c2 == c, axis=-1)
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:        res[mask] = (np.sum(lnfac(r), axis=-1) + np.sum(lnfac(c), axis=-1)
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:                     - lnfac(n) - np.sum(lnfac(x[mask]), axis=(-1, -2)))
./venv/lib/python3.8/site-packages/scipy/stats/_multivariate.py:        res[~mask] = -np.inf
./venv/lib/python3.8/site-packages/scipy/stats/__init__.py:tests, masked statistics, kernel density estimation, quasi-Monte Carlo
./venv/lib/python3.8/site-packages/scipy/stats/__init__.py:have a similar version in `scipy.stats.mstats` which work for masked arrays.
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    # Play games with masks to implement the conditional evaluation of
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    low_mask = lam < -0.5
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    neghalf_mask = lam == -0.5
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    small_mask = np.abs(lam) < threshold
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    reg_mask = ~(low_mask | neghalf_mask | small_mask)
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    small = lam[small_mask]
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    reg = lam[reg_mask]
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    v[low_mask] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    v[neghalf_mask] = np.inf
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:        v[small_mask] = _tukeylambda_var_p(small) / _tukeylambda_var_q(small)
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:        v[reg_mask] = (2.0 / reg**2) * (1.0 / (1.0 + 2 * reg) -
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    # Use masks to implement the conditional evaluation of the kurtosis.
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    low_mask = lam < -0.25
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    negqrtr_mask = lam == -0.25
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    small_mask = np.abs(lam) < threshold
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    reg_mask = ~(low_mask | negqrtr_mask | small_mask)
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    small = lam[small_mask]
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    reg = lam[reg_mask]
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    k[low_mask] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:    k[negqrtr_mask] = np.inf
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:        k[small_mask] = _tukeylambda_kurt_p(small) / _tukeylambda_kurt_q(small)
./venv/lib/python3.8/site-packages/scipy/stats/_tukeylambda_stats.py:        k[reg_mask] = numer / denom - 3
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                    data_mask = np.all(data_in[:, 1:] == pair, axis=-1)
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                    _x = data_in[data_mask, 0]
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                    data_out[data_mask] = (
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:            data_mask = np.all(data_in[:, 1:] == pair, axis=-1)
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:            data_subset = data_in[data_mask]
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                data_out[data_mask] = np.array(
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                data_out[data_mask] = f(_x)
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                    data_mask = np.all(data_in[:, 1:] == pair, axis=-1)
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                    _x = data_in[data_mask, 0]
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                    data_out[data_mask] = (
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:            data_mask = np.all(data_in[:, 1:] == pair, axis=-1)
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:            data_subset = data_in[data_mask]
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                data_out[data_mask] = np.array(
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                data_out[data_mask] = np.array(
./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__init__.py:                ).reshape(data_out[data_mask].shape)
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/_levy_stable/__pycache__/__init__.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_extras.py:Additional statistics functions with support for masked arrays.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_extras.py:        the masked array.  E.g. for a 1-D array the shape change from (1,) to
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_extras.py:        to the number of unmasked data, as floats between 0. and 1. If ``n``
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_extras.py:        is the number of unmasked data before trimming, then
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_extras.py:        largest data are masked.  The total number of unmasked data after
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_extras.py:        masked on each side should be rounded (True) or truncated (False).
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_extras.py:    idealfourths : {list of floats, masked array}
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/_biasedurn.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/scipy/stats/_variation.py:    signed_inf_mask = ~is_const & ddof_equal_n
./venv/lib/python3.8/site-packages/scipy/stats/_variation.py:    result[signed_inf_mask] = np.sign(mean_a[signed_inf_mask]) * np.inf
./venv/lib/python3.8/site-packages/scipy/stats/_variation.py:    nan_mask = all_zero | all_nan | ddof_too_big | (ddof_equal_n & is_const)
./venv/lib/python3.8/site-packages/scipy/stats/_variation.py:    result[nan_mask] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:Tests for the stats.mstats module (support for masked arrays)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:from numpy.ma import masked, nomask
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        #  Test a 1d masked array
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        a = ma.array([1, 2, 3, 4], mask=[0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        #  Test a 1d masked array with a masked value
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        a = np.ma.array([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], mask=[0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        #  Test a 1d masked array with zero element
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        #  Test a 1d masked array with negative element
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        a = ma.array([1, 2, 3, 4], mask=[0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:                     mask=[[0, 0, 0, 0], [1, 0, 0, 1], [0, 1, 1, 0]])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        #  Test a 2d masked array
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        a = ma.array([1, 2, 3, 4], mask=[0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:                        mask=[0, 0, 0, 0, 0, 0, 0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        a = ma.array([1, 2, 3, 4], mask=[0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:                     mask=[[0, 0, 0, 0], [1, 0, 0, 1], [0, 1, 1, 0]])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x[[3,4]] = masked
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:            # correlation or anticorrelation, or totally masked data.
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:            x = ma.array(x, mask=True)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:            assert_(pr[0] is masked)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:            assert_(pr[1] is masked)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # (x2, y2) have the same unmasked data as (x1, y1).
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        mask = [False, False, False, True]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x2 = ma.array([-1.0, 0.0, 1.0, 99.0], mask=mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        y2 = ma.array([0, 0, 3, -1], mask=mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_pearsonr_misaligned_mask(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        mx = np.ma.masked_array([1, 2, 3, 4, 5, 6], mask=[0, 1, 0, 0, 0, 0])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        my = np.ma.masked_array([9, 8, 7, 6, 5, 9], mask=[0, 0, 1, 0, 0, 0])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x = ma.masked_greater(x, 1995)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        mask = np.random.rand(n) > 0.5
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x_masked = ma.array(x, mask=mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        y_masked = ma.array(y, mask=mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        res_masked = mstats.kendalltau(
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:            x_masked, y_masked, method=method, alternative=alternative)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x_compressed = x_masked.compressed()
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        y_compressed = y_masked.compressed()
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x[mask] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        y[mask] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_allclose(res_masked, res_compressed)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        a[[0,-1]] = a[5] = masked
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(trimx._mask.ravel(), expected)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(trimx._mask.ravel(), expected)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(trimx._mask.T.ravel(), expected)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # same as above, but with an extra masked row inserted
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x[1] = masked
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(trimx._mask.ravel(), expected)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(trimx._mask.ravel(), expected)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(trimx.T._mask.ravel(), expected)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x[50:70] = masked
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(trimx._mask, [1]*16 + [0]*34 + [1]*20 + [0]*14 + [1]*16)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x._mask = nomask
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:                            mask=[1, 1, 0, 0, 0, 0, 0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(result.mask, expected.mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        data[5] = masked
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(winsorized.mask, data.mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    mask=np.array([[True, False, False, True, False],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_equal(mstats.moment(x, 2), ma.masked)  # NaN value is ignored
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # test that skew works on multidimensional masked arrays
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:            mask=np.array([False, False, False, True, False], dtype=bool)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:            mask=np.array([False, False, False, True, False], dtype=bool)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # test that kurtosis works on multidimensional masked arrays
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:                              mask=np.array([False, False, False, True,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:            mask=np.array([False, False, False, True, False], dtype=bool))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        ma1 = ma.masked_where(ma.array(a1) > 2, a1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        ma2 = ma.masked_where(a2 > 2, a2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        ma3 = ma.masked_where(a3 < 2, a3)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        ma4 = ma.masked_where(ma.array(a4) < 2, a4)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        desired_unmaskedvals = ([-1.3416407864999, -0.44721359549996,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_array_almost_equal(desired_unmaskedvals,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:                                  y.data[y.mask == False], decimal=12)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    # Test for correct masking.
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    y = np.ma.array([0, 1, 100, 1], mask=[False, False, True, False])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_vs_nonmasked(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_maskedarray_input(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # Add some masked values, test result doesn't change
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:                         mask=np.r_[True, [False] * x.size, True])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # test with masked arrays
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x = np.ma.masked_array(x, mask=np.isnan(x))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:# TODO: for all ttest functions, add tests with masked array inputs
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_vs_nonmasked(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_fully_masked(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        outcome = ma.masked_array(np.random.randn(3, 2),
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:                                  mask=[[1, 1, 1], [0, 0, 0]])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # test with masked arrays
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x = np.ma.masked_array(x, mask=np.isnan(x))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        y = np.ma.masked_array(y, mask=np.isnan(y))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_vs_nonmasked(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_fully_masked(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        outcome = ma.masked_array(np.random.randn(3, 2), mask=[[1, 1, 1], [0, 0, 0]])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # test with masked arrays
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x = np.ma.masked_array(x, mask=np.isnan(x))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        y = np.ma.masked_array(y, mask=np.isnan(y))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_vs_nonmasked(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_fully_masked(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        outcome = ma.masked_array(np.random.randn(3), mask=[1, 1, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # test with masked arrays
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        x = np.ma.masked_array(x, mask=np.isnan(x))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        a = np.ma.masked_array([[0, 1, 2, 3, 4, 9],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:                               mask=[[0, 0, 0, 0, 0, 1],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # This routine generates numpy arrays and corresponding masked arrays
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # with the same data, but additional masked values
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        mask = xm > 9e15
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        xm = np.ma.array(xm, mask=mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        ym = np.ma.array(ym, mask=mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        xm = np.ma.array(xm, mask=np.isnan(xm))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        ym = np.ma.array(ym, mask=np.isnan(ym))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        assert_allclose(np.sort(b), bm.data[~bm.mask])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    def test_skewtest_2D_notmasked(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        # a normal ndarray is passed to the masked function
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        mask = (tmp == 5.)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        xm = np.ma.array(tmp, mask=mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        """Checks that mstats.ks_1samp and stats.ks_1samp agree on masked arrays."""
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        """Checks that 1-sample mstats.kstest and stats.kstest agree on masked arrays."""
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        """Checks that mstats.ks_2samp and stats.ks_2samp agree on masked arrays.
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:        """Checks that 2-sample mstats.kstest and stats.kstest agree on masked arrays."""
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    X = np.ma.masked_invalid([1, 2, 1, 1, 1, np.nan, 1, 1,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_basic.py:    Y = np.ma.masked_invalid([3, 3, 4, 3, np.nan, 1, 2, 3, 1, 1, 5, 4])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_continuous_basic.py:    mask = rng.random(size=(3, 3)) < 0.5
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_continuous_basic.py:    a[mask] = 0
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_continuous_basic.py:    x_norm = x[mask]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_continuous_basic.py:    npt.assert_equal(res[mask], stats.norm.pdf(x_norm))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_continuous_basic.py:    npt.assert_equal(res[~mask], stats.skewnorm.pdf(x[~mask], a[~mask]))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    x = np.ma.masked_greater(x, 1995)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    def test_gzscore_masked_array(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        mx = np.ma.masked_array(x, mask=[0, 0, 1, 0, 0])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    def test_basic_masked(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:def test_chisquare_masked_arrays():
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    # Test masked arrays.
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    mask = np.array([[0, 0, 0, 0, 1], [1, 1, 0, 0, 0]]).T
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    mobs = np.ma.masked_array(obs, mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    obs1 = np.ma.array([3, 5, 6, 99, 10], mask=[0, 0, 0, 1, 0])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    exp1 = np.ma.array([2, 4, 8, 10, 99], mask=[0, 0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    # Because of the mask at index 3 of obs1 and at index 4 of exp1,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    # A data set with length 0 returns a masked scalar.
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    assert_(chisq.mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    # so an array of size (3,) is returned, with all values masked.
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    assert_(np.all(chisq.mask))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        mask = res_g_ab.pvalue <= 0.5
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        assert_equal(res_g_ab.pvalue[mask] + res_l_ba.pvalue[mask],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:                     res_2_ab.pvalue[mask])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        assert_equal(res_l_ab.pvalue[~mask] + res_g_ba.pvalue[~mask],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:                     res_2_ab.pvalue[~mask])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        mask = res_g_ab.pvalue <= 0.5
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        assert_allclose(2 * res_g_ab.pvalue[mask],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:                        res_2_ab.pvalue[mask], atol=2e-2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        assert_allclose(2 * (1-res_g_ab.pvalue[~mask]),
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:                        res_2_ab.pvalue[~mask], atol=2e-2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        assert_allclose(2 * res_l_ab.pvalue[~mask],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:                        res_2_ab.pvalue[~mask], atol=2e-2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        assert_allclose(2 * (1-res_l_ab.pvalue[mask]),
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:                        res_2_ab.pvalue[mask], atol=2e-2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:            mask = np.isnan(a).any(axis=0) | np.isnan(b).any(axis=0)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:            res2 = stats.ttest_ind(a[:, ~mask], b[:, ~mask], **options_p)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:            assert_equal(res.pvalue[mask], np.nan)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:            assert_equal(res.statistic[mask], np.nan)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:            assert_allclose(res.pvalue[~mask], res2.pvalue)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:            assert_allclose(res.statistic[~mask], res2.statistic)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    def test_weights_masked_1d_array(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        weights = np.ma.array([10, 5, 3, 42], mask=[0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    def test_weights_masked_1d_array(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        weights = np.ma.array([2, 5, 6, 4, 3, 5], mask=[0, 0, 0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    def test_weights_masked_1d_array(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        weights = np.ma.array([10, 5, 3, 42], mask=[0, 0, 0, 1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:    def test_masked_3d_array(self):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        ma = np.ma.masked_where(self.array_3d > 16, self.array_3d)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        mask = [[0, 0, 0], [0, 1, 1]]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_stats.py:        assert_equal(gstd_actual.mask, mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_extras.py:    x.mask = ma.make_mask(x)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_extras.py:    x.mask[:7] = False
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_extras.py:    x2.mask = ma.make_mask(x2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_mstats_extras.py:    x2.mask[:7, :] = False
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:from scipy.stats._axis_nan_policy import _masked_arrays_2_sentinel_arrays
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:            nan_mask = np.isnan(data1d[0])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:                nan_mask = np.logical_or(nan_mask, np.isnan(sample))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:            data1d = [sample[~nan_mask] for sample in data1d]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        masks = [rng.random((2, 20)) > 0.9 for i in range(n_samples)]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        for sample, mask in zip(data, masks):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:            sample[mask] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    nan_mask = [rng.random(sample_shape) < 0.2 for _ in range(n_samples)]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    for sample, mask in zip(nan_data, nan_mask):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        sample[mask] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:def test_masked_array_2_sentinel_array():
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask = A < 0.5
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    A = np.ma.masked_array(A, mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # convert masked A to array with sentinel value, don't modify B
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    out_arrays, sentinel = _masked_arrays_2_sentinel_arrays([A, B])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    A_reference[A.mask] = sentinel
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:def test_masked_dtype():
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # When _masked_arrays_2_sentinel_arrays was first added, it always
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # a is a regular array, b has masked elements, and c has no masked elements
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b = np.ma.array([1, 2, 1], dtype=np.int8, mask=[0, 1, 0])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    c = np.ma.array([1, 2, 1], dtype=np.complex128, mask=[0, 0, 0])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # check integer masked -> sentinel conversion
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    out_arrays, sentinel = _masked_arrays_2_sentinel_arrays([a, b])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    assert a_out is a  # not a masked array, so left untouched
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    out_arrays, sentinel = _masked_arrays_2_sentinel_arrays([b, c])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask1 = np.zeros_like(a, dtype=bool)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask0 = np.zeros_like(a, dtype=bool)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # a masked value can be used as the sentinel
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask1[1] = True
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a1 = np.ma.array(a, mask=mask1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    out_arrays, sentinel = _masked_arrays_2_sentinel_arrays([a1])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask0[0] = True
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a0 = np.ma.array(a, mask=mask0)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    message = "This function replaces masked elements with sentinel..."
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        _masked_arrays_2_sentinel_arrays([a0])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a = np.ma.array([1, 2, 3], mask=[0, 1, 0], dtype=np.float32)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:def test_masked_stat_1d():
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # basic test of _axis_nan_policy_factory with 1D masked sample
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # same result when extra element is masked
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask3 = [False, False, False, True, False]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    females3 = np.ma.masked_array(females3, mask=mask3)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # same result when extra nan is omitted and additional element is masked
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask4 = [False, False, False, False, True, False]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    females4 = np.ma.masked_array(females4, mask=mask4)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # same result when extra elements, including nan, are masked
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask5 = [False, False, False, True, True, False]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    females5 = np.ma.masked_array(females5, mask=mask5)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:def test_masked_stat_3d(axis):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # basic test of _axis_nan_policy_factory with 3D masked sample
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_a = a < 0.1
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_c = [False, False, False, True]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked = np.ma.masked_array(a, mask=mask_a)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    c_masked = np.ma.masked_array(c, mask=mask_c)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_nans[mask_a] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    c_nans[mask_c] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    res2 = stats.kruskal(a_masked, b, c_masked, axis=axis)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:def test_mixed_mask_nan_1():
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # targeted test of _axis_nan_policy_factory with 2D masked sample:
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # omitting samples with masks and nan_policy='omit' are equivalent
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_a1 = np.random.rand(m, n) < 0.2
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_a2 = np.random.rand(m, n) < 0.1
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_b1 = np.random.rand(m, n) < 0.15
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_b2 = np.random.rand(m, n) < 0.15
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_a1[2, :] = True
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_nans[mask_a1 | mask_a2] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_nans[mask_b1 | mask_b2] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked1 = np.ma.masked_array(a, mask=mask_a1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked1 = np.ma.masked_array(b, mask=mask_b1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked1[mask_a2] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked1[mask_b2] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked2 = np.ma.masked_array(a, mask=mask_a2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked2 = np.ma.masked_array(b, mask=mask_b2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked2[mask_a1] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked2[mask_b1] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked3 = np.ma.masked_array(a, mask=(mask_a1 | mask_a2))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked3 = np.ma.masked_array(b, mask=(mask_b1 | mask_b2))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    res1 = stats.wilcoxon(a_masked1, b_masked1, nan_policy='omit', axis=axis)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    res2 = stats.wilcoxon(a_masked2, b_masked2, nan_policy='omit', axis=axis)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    res3 = stats.wilcoxon(a_masked3, b_masked3, nan_policy='raise', axis=axis)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    res4 = stats.wilcoxon(a_masked3, b_masked3,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:def test_mixed_mask_nan_2():
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # targeted test of _axis_nan_policy_factory with 2D masked sample:
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # check for expected interaction between masks and nans
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # [mixed nan/mask, all nans, all masked,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # unmasked nan, masked nan, unmasked non-nan]
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask = [[1, 0, 1], [0, 0, 0], [1, 1, 1],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked = np.ma.masked_array(a, mask=mask)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    res = stats.ranksums(a_masked, b, nan_policy='omit', axis=-1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # all elements are removed by mask from third row
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    res = stats.ranksums(a_masked, b, nan_policy='propagate', axis=-1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:def test_mean_mixed_mask_nan_weights(weighted_fun_name):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # targeted test of _axis_nan_policy_factory with 2D masked sample:
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    # omitting samples with masks and nan_policy='omit' are equivalent
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_a1 = rng.uniform(size=(m, n)) < 0.2
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_a2 = rng.uniform(size=(m, n)) < 0.1
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_b1 = rng.uniform(size=(m, n)) < 0.15
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_b2 = rng.uniform(size=(m, n)) < 0.15
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_a1[2, :] = True
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_nans[mask_a1 | mask_a2] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_nans[mask_b1 | mask_b2] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked1 = np.ma.masked_array(a, mask=mask_a1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked1 = np.ma.masked_array(b, mask=mask_b1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked1[mask_a2] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked1[mask_b2] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked2 = np.ma.masked_array(a, mask=mask_a2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked2 = np.ma.masked_array(b, mask=mask_b2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked2[mask_a1] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked2[mask_b1] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked3 = np.ma.masked_array(a, mask=(mask_a1 | mask_a2))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked3 = np.ma.masked_array(b, mask=(mask_b1 | mask_b2))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    mask_all = (mask_a1 | mask_a2 | mask_b1 | mask_b2)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    a_masked4 = np.ma.masked_array(a, mask=mask_all)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:    b_masked4 = np.ma.masked_array(b, mask=mask_all)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        res1 = weighted_fun(a_masked1, weights=b_masked1,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        res2 = weighted_fun(a_masked2, weights=b_masked2,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        res3 = weighted_fun(a_masked3, weights=b_masked3,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        res4 = weighted_fun(a_masked3, weights=b_masked3,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        # Would test with a_masked3/b_masked3, but there is a bug in np.average
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        # that causes a bug in _no_deco mean with masked weights. Would use
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:            res5 = weighted_fun_ma(a_masked4, weights=b_masked4,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_axis_nan_policy.py:        # _no_deco mean returns masked array, last element was masked
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/tests/__pycache__/test_continuous_basic.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/tests/__pycache__/test_axis_nan_policy.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/tests/__pycache__/test_mstats_basic.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/tests/__pycache__/test_mstats_extras.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/tests/__pycache__/test_distributions.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/tests/__pycache__/test_stats.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:@pytest.mark.parametrize("df_infmask", [[0, 0], [1, 1], [0, 1],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:def test_t_inf_df(methname, df_infmask):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    df_infmask = np.asarray(df_infmask, dtype=bool)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    df = np.random.uniform(0, 10, size=df_infmask.shape)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    x = np.random.randn(*df_infmask.shape)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    df[df_infmask] = np.inf
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    t_dist_ref = stats.t(df=df[~df_infmask], loc=3, scale=1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    assert_equal(res[df_infmask], norm_meth(x[df_infmask]))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    assert_equal(res[~df_infmask], t_meth_ref(x[~df_infmask]))
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:@pytest.mark.parametrize("df_infmask", [[0, 0], [1, 1], [0, 1],
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:def test_t_inf_df_stats_entropy(df_infmask):
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    df_infmask = np.asarray(df_infmask, dtype=bool)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    df = np.random.uniform(0, 10, size=df_infmask.shape)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    df[df_infmask] = np.inf
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    res_ex_noinf = stats.t.stats(df=df[~df_infmask], loc=3, scale=1,
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:        assert_equal(res[i][df_infmask], res_ex_inf[i])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:        assert_equal(res[i][~df_infmask], res_ex_noinf[i])
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    res_ex_noinf = stats.t.entropy(df=df[~df_infmask], loc=3, scale=1)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    assert_equal(res[df_infmask], res_ex_inf)
./venv/lib/python3.8/site-packages/scipy/stats/tests/test_distributions.py:    assert_equal(res[~df_infmask], res_ex_noinf)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:An extension of scipy.stats._stats_py to support masked arrays
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:from numpy.ma import masked, nomask
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    # Always returns a masked array, raveled for axis=None
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        A ( `m` x `n` ) masked array, where `m` is the number of arguments and
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    A 2D masked array constructed from a group of sequences is returned.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    masked_array(
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:     mask=[[False, False, False],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    The returned masked array filled with missing values when the lengths of
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    masked_array(
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:     mask=[[False, False,  True],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        output = ma.array(np.empty((n,m), dtype=float), mask=True)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    output[np.logical_not(np.isfinite(output._data))] = masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    >>> z[[1,-1]] = np.ma.masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    nmasked = ma.getmask(x).sum()
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    if nmasked and use_missing:
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            nties[nmasked] += 1
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            nties[nmasked] = 1
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    If some values are masked, their rank is set to 0 if use_missing is False,
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    or set to the average rank of the unmasked values if use_missing is True.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Input data. The data is transformed to a masked array
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Whether the masked values have a rank of 0 (False) or equal to the
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        average rank of the unmasked values (True).
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    >>> m_arr = np.ma.array([1, 1, 0, 0, 0, 0], mask=[0, 0, 1, 1, 1, 0])
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    >>> mstats.mode(m_arr)  # note that most zeros are masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    """Returns the sign of x, or 0 if x is masked."""
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    # Get the common mask and the total nb of unmasked elements
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    m = ma.mask_or(ma.getmask(x), ma.getmask(y))
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        return (masked, masked)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    return scipy.stats._stats_py.pearsonr(ma.masked_array(x, mask=m).compressed(),
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:                                      ma.masked_array(y, mask=m).compressed())
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    corresponding value in `y` is masked.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    # Always returns a masked array, raveled if axis=None
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        x = ma.masked_invalid(x)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        # observations (can't leave them masked, rankdata is weird).
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        x = ma.mask_rowcols(x, axis=0)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        x = x[~x.mask.any(axis=1), :]
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        m = ma.getmask(x)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    m = ma.mask_or(ma.getmask(x), ma.getmask(y))
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    if m is not nomask:
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        x = ma.array(x, mask=m, copy=True)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        y = ma.array(y, mask=m, copy=True)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    rx = ma.masked_equal(rankdata(x, use_missing=use_missing), 0)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    ry = ma.masked_equal(rankdata(y, use_missing=use_missing), 0)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    the corresponding value in y is masked.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    m = ma.mask_or(ma.getmask(x), ma.getmask(y))
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    if m is not nomask:
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        unmask = np.logical_not(m)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        x = x[unmask]
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        y = y[unmask]
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Note that the non-masked version is used, and that this docstring is
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    replaced by the non-masked docstring + some info on missing data.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    m = ma.mask_or(ma.getmask(x), ma.getmask(y), shrink=False)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    if m is not nomask:
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        x = ma.array(x, mask=m)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        y = ma.array(y, mask=m)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            # All data is masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    m = ma.mask_or(ma.getmask(x), ma.getmask(y))
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    y._mask = x._mask = m
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    # Disregard any masked elements of x or y
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    # We now have unmasked arrays so can use `scipy.stats.theilslopes`
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    m = ma.mask_or(ma.getmask(x), ma.getmask(y))
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    y._mask = x._mask = m
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    # Disregard any masked elements of x or y
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    # We now have unmasked arrays so can use `scipy.stats.siegelslopes`
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    scipy.stats.theilslopes : non-seasonal slopes for non-masked arrays
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    ...     mask = np.triu(np.ones((n, n), dtype=bool), k=1)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    ...     return dy[mask]/dx[mask]
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    # force df to be an array for masked division not to throw a warning
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        # force df to be an array for masked division not to throw a warning
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    ranks = ma.masked_equal(rankdata(output, use_missing=False), 0)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Computes the Kolmogorov-Smirnov test on one sample of masked values.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Trims an array by masking the data outside some given limits.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Returns a masked version of the input array.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        will be masked.  A limit is None indicates an open interval.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    masked_array(data=[--, --, 2, 3, 4, 5, 6, 7, --, --],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:                 mask=[ True,  True, False, False, False, False, False, False,
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    a.unshare_mask()
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    a[condition.filled(True)] = masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Trims an array by masking some proportion of the data on each end.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Returns a masked version of the input array.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        to the number of unmasked data, as floats between 0. and 1.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Noting n the number of unmasked data before trimming, the
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        masked, and the total number of unmasked data after trimming is
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Tuple of flags indicating whether the number of data being masked on
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            a[idx[:lowidx]] = masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            a[idx[upidx:]] = masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    a.unshare_mask()
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        masked.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        on each side of the  array, with respect to the number of unmasked data.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Noting n the number of unmasked data before trimming, the (n*limits[0])th
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        smallest data and the (n*limits[1])th largest data are masked, and the
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        total number of unmasked data after trimming is n*(1.-sum(limits))
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        being masked on each side should be rounded (True) or truncated
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Trims an array by masking the data outside some given limits.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Returns a masked version of the input array.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Trims the `data` by masking the ``int(proportiontocut * n)`` smallest and
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    where n is the number of unmasked values before trimming.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        If n is the number of unmasked values before trimming, the number of
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Tuple indicating whether the number of data being masked on each side
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    Trims the data by masking values from one tail.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Percentage of trimming. If n is the number of unmasked values
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        If 'left' the `proportiontocut` lowest values will be masked.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        If 'right' the `proportiontocut` highest values will be masked.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Tuple indicating whether the number of data being masked on each side
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Returned array of same shape as `data` with masked tail values.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        array, with respect to the number of unmasked data.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        If n is the number of unmasked data before trimming, the values
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        ``n * `limits[1]`` are masked, and the total number of unmasked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Tuple indicating whether the number of data being masked on each side
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            a[idx[:lowidx]] = masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            a[idx[upidx:]] = masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    a.unshare_mask()
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:def _mask_to_limits(a, limits, inclusive):
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    will be masked out. None implies no limit.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            am = ma.masked_less(am, lower_limit)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            am = ma.masked_less_equal(am, lower_limit)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            am = ma.masked_greater(am, upper_limit)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            am = ma.masked_greater_equal(am, upper_limit)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    masked_array(data=[4.0, 5.0, 4.0, 2.0],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:                 mask=[False, False, False, False],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        n = (~a.mask).sum()  # todo: better way to do that?
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    am = _mask_to_limits(a, limits=limits, inclusive=inclusive)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    masked_array(data=[5, 7, 5, --],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:                 mask=[False, False, False,  True],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    masked_array(data=[4, --, 3, 2],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:                 mask=[False,  True, False, False],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        to the number of unmasked data, as floats between 0. and 1.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Noting n the number of unmasked data before trimming, the
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        masked, and the total number of unmasked data after trimming
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        Tuple indicating whether the number of data being masked on each side
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    masked_array(data=[8, 4, 8, 8, 5, 3, 7, 2, 2, 6],
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:                 mask=False,
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    >>> c = np.ma.masked_array(b, mask=[0,0,1,0])
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    `scipy.stats.variation` except 'stats.mstats.variation' ignores masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    if not bias and zero is not ma.masked and m2 is not ma.masked:
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    if not bias and zero is not ma.masked and m2 is not ma.masked:
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    >>> ma = np.ma.array(range(6), mask=[0, 0, 0, 1, 1, 1])
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    DescribeResult(nobs=3, minmax=(masked_array(data=0,
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:                 mask=False,
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:           fill_value=999999), masked_array(data=2,
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:                 mask=False,
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:           skewness=masked_array(data=0., mask=False, fill_value=1e+20),
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    median along the given axis. masked values are discarded.
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        denom[denom == 0.0] = masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        denom = masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            return ma.array(np.empty(len(p), dtype=float), mask=True)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:            return ma.array(np.resize(x, p.shape), mask=nomask)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        data[~condition.filled(True)] = masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        - n is the number of unmasked values along the given axis
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    return ma.array(plpos, mask=data._mask)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    If a group has some missing values, the corresponding treatments are masked
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    ranked = ma.masked_values(rankdata(data, axis=0), 0)
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:    if ranked._mask is not nomask:
./venv/lib/python3.8/site-packages/scipy/stats/_mstats_basic.py:        ranked = ma.mask_cols(ranked)
./venv/lib/python3.8/site-packages/scipy/stats/contingency.py:    This function does not handle masked arrays, because the calculation
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    # Do not set _support_mask to rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        np.putmask(logpex2, (c == 0) & (x == -np.inf), 0.0)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        np.putmask(logpdf, (c == 1) & (x == 1), 0.0)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            mask = b > 1
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            bt = np.extract(mask, b)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            np.place(mu, mask, bt / (bt-1.0))
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            mask = b > 2
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            bt = np.extract(mask, b)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            np.place(mu2, mask, bt / (bt-2.0) / (bt-1.0)**2)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            mask = b > 3
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            bt = np.extract(mask, b)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            np.place(g1, mask, vals)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            mask = b > 4
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            bt = np.extract(mask, b)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:            np.place(g2, mask, vals)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        # mask is True where skew is small enough to use the normal approx.
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        mask = np.absolute(skew) < norm2pearson_transition
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        invmask = ~mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        beta = 2.0 / (skew[invmask] * scale)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        transx = beta * (x[invmask] - zeta)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        return ans, x, transx, mask, invmask, beta, alpha, zeta
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans, x, transx, mask, invmask, beta, alpha, _ = (
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans[mask] = np.log(_norm_pdf(x[mask]))
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans[invmask] = np.log(abs(beta)) + gamma.logpdf(transx, alpha)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans, x, transx, mask, invmask, _, alpha, _ = (
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans[mask] = _norm_cdf(x[mask])
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        skew = np.broadcast_to(skew, invmask.shape)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        invmask1a = np.logical_and(invmask, skew > 0)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        invmask1b = skew[invmask] > 0
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans[invmask1a] = gamma.cdf(transx[invmask1b], alpha[invmask1b])
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        invmask2a = np.logical_and(invmask, skew < 0)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        invmask2b = skew[invmask] < 0
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans[invmask2a] = gamma.sf(transx[invmask2b], alpha[invmask2b])
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans, _, _, mask, invmask, beta, alpha, zeta = (
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        nsmall = mask.sum()
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        nbig = mask.size - nsmall
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans[mask] = random_state.standard_normal(nsmall)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans[invmask] = random_state.standard_gamma(alpha, nbig)/beta + zeta
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans, q, _, mask, invmask, beta, alpha, zeta = (
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans[mask] = _norm_ppf(q[mask])
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        q = q[invmask]
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        ans[invmask] = sc.gammaincinv(alpha, q)/beta + zeta
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    def _support_mask(self, x, a):
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        return (super(powerlaw_gen, self)._support_mask(x, a)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._open_support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        # convert y to array to ensure masking support
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        mask = random_state.random(size=y.shape) < 0.5
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        y[mask] = -y[mask]
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        # otherwise the mask below does not work for integers
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        mask = chi > 0.1
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        c = chi[mask]
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        mu2[mask] = 1 - 3 / c**2 + c * _norm_pdf(c) / phi[mask]
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        c = chi[~mask]
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:        mu2[~mask] = np.polyval(coef, c)
./venv/lib/python3.8/site-packages/scipy/stats/_continuous_distns.py:    _support_mask = rv_continuous._support_mask
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        Input array, masked array or object that can be converted to an array.
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        Input array, masked array or object that can be converted to an array.
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:def _mask_to_limits(a, limits, inclusive):
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        will be masked out. None implies no limit.
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:            am = ma.masked_less(am, lower_limit)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:            am = ma.masked_less_equal(am, lower_limit)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:            am = ma.masked_greater(am, upper_limit)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:            am = ma.masked_greater_equal(am, upper_limit)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    am = _mask_to_limits(a, limits, inclusive)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    am = _mask_to_limits(a, limits, inclusive)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    am = _mask_to_limits(a, (lowerlimit, None), (inclusive, False))
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        am = ma.masked_invalid(am)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    am = _mask_to_limits(a, (None, upperlimit), (False, inclusive))
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        am = ma.masked_invalid(am)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    am = _mask_to_limits(a, limits, inclusive)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        score = ma.masked_where(np.isnan(score), score)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:            a = ma.masked_where(np.isnan(a), a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        # Despite using masked_array to omit nan values from processing,
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        # of masked_arrays. As a fix, we simply suppress the warnings.
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    matrices and masked arrays (it uses `asanyarray` instead of
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    matrices and masked arrays (it uses ``asanyarray`` instead of
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    matrices and masked arrays (it uses `asanyarray` instead of
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    The geometric standard deviation further handles masked arrays.
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    >>> ma = np.ma.masked_where(a > 16, a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    masked_array(
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:      mask=[[[False, False, False, False],
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    masked_array(
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:      mask=[[False, False, False],
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        # avoid expensive masking for arrays with no NaN
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:            samples[i] = ma.masked_invalid(sample)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        x = ma.masked_invalid(x)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        y = ma.masked_invalid(y)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        (``a.shape[axis]-1`` if there are no masked elements or omitted NaNs).
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    # values are present in the data and masked arrays are passed
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:            raise ValueError("nan-containing/masked inputs with "
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        a = ma.masked_invalid(a)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        b = ma.masked_invalid(b)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    """Count the number of non-masked elements of an array.
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        return np.ma.masked_array(np.broadcast_to(a, shape),
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:                                  mask=np.broadcast_to(a.mask, shape))
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    This function handles masked arrays.  If an element of `f_obs` or `f_exp`
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    is masked, then data at that position is ignored, and does not count
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    if np.ma.is_masked(x):
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    if np.ma.is_masked(data1):
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:    if np.ma.is_masked(data2):
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:            sample = ma.masked_invalid(sample)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        x = ma.masked_invalid(x)
./venv/lib/python3.8/site-packages/scipy/stats/_stats_py.py:        y = ma.masked_invalid(y)
./venv/lib/python3.8/site-packages/scipy/stats/_covariance.py:    def _support_mask(self, x):
./venv/lib/python3.8/site-packages/scipy/stats/_covariance.py:        # This is only used for `_support_mask`, not to decide whether
./venv/lib/python3.8/site-packages/scipy/stats/_covariance.py:    def _support_mask(self, x):
./venv/lib/python3.8/site-packages/scipy/stats/_covariance.py:    def _support_mask(self, x):
./venv/lib/python3.8/site-packages/scipy/stats/_covariance.py:        return self._psd._support_mask(x)
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:def _masked_arrays_2_sentinel_arrays(samples):
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:    # masked arrays in `samples` are converted to regular arrays, and values
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:    # corresponding with masked elements are replaced with a sentinel value
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:    # return without modifying arrays if none have a mask
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:    has_mask = False
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:        mask = getattr(sample, 'mask', False)
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:        has_mask = has_mask or np.any(mask)
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:    if not has_mask:
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:    # Choose a sentinel value. We can't use `np.nan`, because sentinel (masked)
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:        message = ("This function replaces masked elements with sentinel "
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:    # replace masked elements with sentinel value
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:        mask = getattr(sample, 'mask', None)
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:        if mask is not None:  # turn all masked arrays into sentinel arrays
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:            mask = np.broadcast_to(mask, sample.shape)
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:            sample = sample.data.copy() if np.any(mask) else sample.data
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:            sample[mask] = sentinel
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:rather than a 2D ``np.matrix``. Similarly, while masked elements of masked
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:masked array with ``mask=False``.""").split('\n')
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:            # convert masked arrays to regular arrays with sentinel values
./venv/lib/python3.8/site-packages/scipy/stats/_axis_nan_policy.py:            samples, sentinel = _masked_arrays_2_sentinel_arrays(samples)
./venv/lib/python3.8/site-packages/scipy/stats/mstats.py:Statistical functions for masked arrays (:mod:`scipy.stats.mstats`)
./venv/lib/python3.8/site-packages/scipy/stats/mstats.py:be used with masked arrays.
./venv/lib/python3.8/site-packages/scipy/stats/mstats.py:# Functions that support masked array input in stats but need to be kept in the
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    pos = x >= 0  # binary mask
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        mask = np.isnan(samples)
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        sin_samp[mask] = 0.0
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        cos_samp[mask] = 0.0
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        mask = None
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    return samples, sin_samp, cos_samp, mask
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    samples, sin_samp, cos_samp, nmask = _circfuncs_common(samples, high, low,
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    mask_nan = ~np.isnan(res)
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    if mask_nan.ndim > 0:
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        mask = res[mask_nan] < 0
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        mask = res < 0
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    if mask.ndim > 0:
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        mask_nan[mask_nan] = mask
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        res[mask_nan] += 2*pi
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    elif mask:
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    if nmask is not None:
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        if nmask.all():
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:            smask = nmask.shape[nshape] == nmask.sum(axis=axis)
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:            if smask.any():
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:                res[smask] = np.nan
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    samples, sin_samp, cos_samp, mask = _circfuncs_common(samples, high, low,
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    if mask is None:
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        nsum = np.asarray(np.sum(~mask, axis=axis).astype(float))
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    samples, sin_samp, cos_samp, mask = _circfuncs_common(samples, high, low,
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:    if mask is None:
./venv/lib/python3.8/site-packages/scipy/stats/_morestats.py:        nsum = np.asarray(np.sum(~mask, axis=axis).astype(float))
./venv/lib/python3.8/site-packages/scipy/stats/_crosstab.py:        mask = np.zeros((nargs, len0), dtype=np.bool_)
./venv/lib/python3.8/site-packages/scipy/stats/_crosstab.py:                mask[k, :] = True
./venv/lib/python3.8/site-packages/scipy/stats/_crosstab.py:                mask[k, :] = np.any(q, axis=0)
./venv/lib/python3.8/site-packages/scipy/stats/_crosstab.py:        mask_all = mask.all(axis=0)
./venv/lib/python3.8/site-packages/scipy/stats/_crosstab.py:        indices = tuple(inv[:, mask_all])
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/contingency.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_axis_nan_policy.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_stats_py.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/mstats.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_discrete_distns.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_multivariate.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_continuous_distns.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_tukeylambda_stats.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/mstats_basic.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_morestats.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_covariance.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_variation.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_hypotests.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/__init__.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_qmc.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_crosstab.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_mstats_basic.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_distn_infrastructure.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_mstats_extras.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/stats/__pycache__/_stats_mstats_common.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/stats/_stats_mstats_common.py:    the corresponding value in `y` is masked.
./venv/lib/python3.8/site-packages/scipy/stats/_discrete_distns.py:        mask = i <= n  # don't add terms after nth
./venv/lib/python3.8/site-packages/scipy/stats/_discrete_distns.py:        out[mask] += 1/i**a[mask]
./venv/lib/python3.8/site-packages/scipy/stats/_hypotests.py:        mask = np.ones(nx+ny, bool)
./venv/lib/python3.8/site-packages/scipy/stats/_hypotests.py:        mask[x] = False
./venv/lib/python3.8/site-packages/scipy/stats/_hypotests.py:        y = z[mask]
./venv/lib/python3.8/site-packages/scipy/stats/_qmc.py:    mask = np.ones(n, dtype=bool)
./venv/lib/python3.8/site-packages/scipy/stats/_qmc.py:    mask[[i1, i2]] = False
./venv/lib/python3.8/site-packages/scipy/stats/_qmc.py:    sum_ = sum(sum_[mask])
Binary file ./venv/lib/python3.8/site-packages/scipy/_lib/__pycache__/_util.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/_lib/_util.py:                       sparse_ok=False, objects_ok=False, mask_ok=False,
./venv/lib/python3.8/site-packages/scipy/_lib/_util.py:    mask_ok : bool, optional
./venv/lib/python3.8/site-packages/scipy/_lib/_util.py:        True if masked arrays are allowed.
./venv/lib/python3.8/site-packages/scipy/_lib/_util.py:    if not mask_ok:
./venv/lib/python3.8/site-packages/scipy/_lib/_util.py:            raise ValueError('masked arrays are not supported')
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:    mask = (labels >= lo) & (labels <= hi)
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:    labels = labels[mask]
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:    input = input[mask]
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:        positions = positions[mask]
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:        mask = (labels > 0)
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:        masked_positions = None
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:            masked_positions = positions[mask]
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:        return single_group(input[mask], masked_positions)
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:        mask = (labels == index)
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:        masked_positions = None
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:            masked_positions = positions[mask]
./venv/lib/python3.8/site-packages/scipy/ndimage/_measurements.py:        return single_group(input[mask], masked_positions)
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:def _binary_erosion(input, structure, iterations, mask, output,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    if mask is not None:
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        mask = numpy.asarray(mask)
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        if mask.shape != input.shape:
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:            raise RuntimeError('mask and input must have equal sizes')
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        _nd_image.binary_erosion(input, structure, mask, output,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:            input, structure, mask, output,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        if mask is not None:
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:            mask = numpy.asarray(mask, dtype=numpy.int8)
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        _nd_image.binary_erosion2(output, structure, mask, iterations - 1,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:            input, structure, mask, tmp_out,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:                tmp_in, structure, mask, tmp_out,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:def binary_erosion(input, structure=None, iterations=1, mask=None, output=None,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    mask : array_like, optional
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        If a mask is given, only those elements with a True value at
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        the corresponding mask element are modified at each iteration.
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    return _binary_erosion(input, structure, iterations, mask,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:def binary_dilation(input, structure=None, iterations=1, mask=None,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    mask : array_like, optional
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        If a mask is given, only those elements with a True value at
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        the corresponding mask element are modified at each iteration.
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    return _binary_erosion(input, structure, iterations, mask,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:                   origin=0, mask=None, border_value=0, brute_force=False):
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    mask : array_like, optional
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        If a mask is given, only those elements with a True value at
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        the corresponding mask element are modified at each iteration.
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    tmp = binary_erosion(input, structure, iterations, mask, None,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    return binary_dilation(tmp, structure, iterations, mask, output,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:                   origin=0, mask=None, border_value=0, brute_force=False):
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    mask : array_like, optional
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        If a mask is given, only those elements with a True value at
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        the corresponding mask element are modified at each iteration.
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    tmp = binary_dilation(input, structure, iterations, mask, None,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    return binary_erosion(tmp, structure, iterations, mask, output,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:def binary_propagation(input, structure=None, mask=None,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        Binary image to be propagated inside `mask`.
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        may depend on the structuring element, especially if `mask` has
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    mask : array_like, optional
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        Binary mask defining the region into which `input` is allowed to
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        Binary propagation of `input` inside `mask`.
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    >>> mask = np.zeros((8, 8), dtype=int)
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    >>> mask[1:4, 1:4] = mask[4, 4]  = mask[6:8, 6:8] = 1
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    >>> mask
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    >>> ndimage.binary_propagation(input, mask=mask).astype(int)
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    >>> ndimage.binary_propagation(input, mask=mask,\\
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    >>> ndimage.binary_propagation(b, mask=a).astype(int)
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    return binary_dilation(input, structure, -1, mask, output,
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    mask = numpy.logical_not(input)
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:    tmp = numpy.zeros(mask.shape, bool)
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        binary_dilation(tmp, structure, -1, mask, output, 1, origin)
./venv/lib/python3.8/site-packages/scipy/ndimage/_morphology.py:        output = binary_dilation(tmp, structure, -1, mask, None, 1,
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_measurements.py:        mask = img > thresh
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_measurements.py:        rank = len(mask.shape)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_measurements.py:        la, co = ndimage.label(mask,
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        mask = [[1, 1, 1, 1, 1, 0, 0],
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:                                     border_value=1, mask=mask, iterations=-1)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        mask = [[0, 0, 0, 0, 0, 0, 0],
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:                                     border_value=1, mask=mask)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        mask = [[0, 0, 0, 0, 0, 0, 0],
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        expected = numpy.logical_and(tmp, mask)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        tmp = numpy.logical_and(data, numpy.logical_not(mask))
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:                               origin=(-1, -1), mask=mask)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        mask = [[0, 0, 0, 0, 0, 0, 0, 0],
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        expected = numpy.logical_and(tmp, mask)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        tmp = numpy.logical_and(data, numpy.logical_not(mask))
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        out = ndimage.binary_erosion(data, struct, mask=mask,
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        mask = numpy.array([[0, 1, 0, 0, 0, 0, 0, 0],
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:                                      mask=mask, border_value=0)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        mask = numpy.array([[0, 1, 0, 0, 0, 0, 0, 0],
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        data = numpy.zeros(mask.shape, bool)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:                                      mask=mask, border_value=1)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        mask = [[0, 0, 0, 0, 0, 0, 0, 0],
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        expected = numpy.logical_and(tmp, mask)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        tmp = numpy.logical_and(data, numpy.logical_not(mask))
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        out = ndimage.binary_dilation(data, mask=mask,
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        mask = numpy.array([[0, 1, 0, 0, 0, 0, 0, 0],
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:                                         mask=mask, border_value=0)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        mask = numpy.array([[0, 1, 0, 0, 0, 0, 0, 0],
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:        data = numpy.zeros(mask.shape, bool)
./venv/lib/python3.8/site-packages/scipy/ndimage/tests/test_morphology.py:                                         mask=mask, border_value=1)
Binary file ./venv/lib/python3.8/site-packages/scipy/ndimage/tests/__pycache__/test_morphology.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/ndimage/tests/__pycache__/test_measurements.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/ndimage/_filters.py:    Correlation is the process of moving a filter mask often referred to
Binary file ./venv/lib/python3.8/site-packages/scipy/ndimage/__pycache__/_measurements.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/ndimage/__pycache__/_filters.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/ndimage/__pycache__/_morphology.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/optimize/_trustregion_constr/tr_interior_point.py:        mask = np.full(size, False, bool)
./venv/lib/python3.8/site-packages/scipy/optimize/_trustregion_constr/tr_interior_point.py:        mask[new_indptr[-n_ineq:]-1] = True
./venv/lib/python3.8/site-packages/scipy/optimize/_trustregion_constr/tr_interior_point.py:        new_indices[mask] = n_vars+np.arange(n_ineq)
./venv/lib/python3.8/site-packages/scipy/optimize/_trustregion_constr/tr_interior_point.py:        new_indices[~mask] = indices
./venv/lib/python3.8/site-packages/scipy/optimize/_trustregion_constr/tr_interior_point.py:        new_data[mask] = s
./venv/lib/python3.8/site-packages/scipy/optimize/_trustregion_constr/tr_interior_point.py:        new_data[~mask] = data
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/_trustregion_constr/__pycache__/tr_interior_point.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/optimize/tests/test_lsq_linear.py:        assert_equal(res.active_mask, [0, -1])
./venv/lib/python3.8/site-packages/scipy/optimize/tests/test_least_squares.py:        assert_equal(res.active_mask, 0)
./venv/lib/python3.8/site-packages/scipy/optimize/tests/test_least_squares.py:        assert_equal(res.active_mask, np.array([0]))
./venv/lib/python3.8/site-packages/scipy/optimize/tests/test_least_squares.py:            assert_equal(res.active_mask, [0])
./venv/lib/python3.8/site-packages/scipy/optimize/tests/test_least_squares.py:            assert_equal(res.active_mask, [-1])
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/tests/__pycache__/test_lsq_linear.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/tests/__pycache__/test_least_squares.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            mask_1 = use_one_sided & e
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            x1[mask_1] += h_vec[mask_1]
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            x2[mask_1] += 2 * h_vec[mask_1]
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            mask_2 = ~use_one_sided & e
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            x1[mask_2] -= h_vec[mask_2]
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            x2[mask_2] += h_vec[mask_2]
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            dx[mask_1] = x2[mask_1] - x0[mask_1]
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            dx[mask_2] = x2[mask_2] - x1[mask_2]
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            mask = use_one_sided[j]
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            rows = i[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_numdiff.py:            rows = i[~mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_minpack_py.py:    mask = lb_finite & ub_finite
./venv/lib/python3.8/site-packages/scipy/optimize/_minpack_py.py:    p0[mask] = 0.5 * (lb[mask] + ub[mask])
./venv/lib/python3.8/site-packages/scipy/optimize/_minpack_py.py:    mask = lb_finite & ~ub_finite
./venv/lib/python3.8/site-packages/scipy/optimize/_minpack_py.py:    p0[mask] = lb[mask] + 1
./venv/lib/python3.8/site-packages/scipy/optimize/_minpack_py.py:    mask = ~lb_finite & ub_finite
./venv/lib/python3.8/site-packages/scipy/optimize/_minpack_py.py:    p0[mask] = ub[mask] - 1
./venv/lib/python3.8/site-packages/scipy/optimize/_linprog_simplex.py:    ma = np.ma.masked_where(T[-1, :-1] >= -tol, T[-1, :-1], copy=False)
./venv/lib/python3.8/site-packages/scipy/optimize/_linprog_simplex.py:        # ma.mask is sometimes 0d
./venv/lib/python3.8/site-packages/scipy/optimize/_linprog_simplex.py:        return True, np.nonzero(np.logical_not(np.atleast_1d(ma.mask)))[0][0]
./venv/lib/python3.8/site-packages/scipy/optimize/_linprog_simplex.py:    ma = np.ma.masked_where(T[:-k, pivcol] <= tol, T[:-k, pivcol], copy=False)
./venv/lib/python3.8/site-packages/scipy/optimize/_linprog_simplex.py:    mb = np.ma.masked_where(T[:-k, pivcol] <= tol, T[:-k, -1], copy=False)
./venv/lib/python3.8/site-packages/scipy/optimize/_tnc.py:        Bit mask used to select messages display during
./venv/lib/python3.8/site-packages/scipy/optimize/_differentialevolution.py:        mask = np.where((trial > 1) | (trial < 0))
./venv/lib/python3.8/site-packages/scipy/optimize/_differentialevolution.py:        trial[mask] = self.random_number_generator.uniform(size=mask[0].shape)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/bvls.py:    mask = x <= lb
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/bvls.py:    x[mask] = lb[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/bvls.py:    on_bound[mask] = -1
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/bvls.py:    mask = x >= ub
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/bvls.py:    x[mask] = ub[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/bvls.py:    on_bound[mask] = 1
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/bvls.py:        x=x, fun=r, cost=cost, optimality=optimality, active_mask=on_bound,
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:    active_mask = np.zeros_like(x0, dtype=int)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:        active_mask=active_mask, nfev=nfev, njev=njev, status=status)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:    mask = z <= 1
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:    rho[0, mask] = z[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:    rho[0, ~mask] = 2 * z[~mask]**0.5 - 1
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:    rho[1, mask] = 1
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:    rho[1, ~mask] = z[~mask]**-0.5
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:    rho[2, mask] = 0
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:    rho[2, ~mask] = -0.5 * z[~mask]**-1.5
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:            active_mask : ndarray of int, shape (n,)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/least_squares.py:                sequence of strictly feasible iterates and `active_mask` is
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/dogbox.py:    `active_set` mask is used to excluded active variables from computations
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/dogbox.py:            mask = on_bound == -1
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/dogbox.py:            x[mask] = lb[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/dogbox.py:            mask = on_bound == 1
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/dogbox.py:            x[mask] = ub[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/dogbox.py:        active_mask=on_bound, nfev=nfev, njev=njev, status=termination_status)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/trf.py:    active_mask = find_active_constraints(x, lb, ub, rtol=xtol)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/trf.py:        active_mask=active_mask, nfev=nfev, njev=njev,
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/trf.py:    active_mask = np.zeros_like(x)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/trf.py:        active_mask=active_mask, nfev=nfev, njev=njev,
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/trf_linear.py:    active_mask = find_active_constraints(x, lb, ub, rtol=tol)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/trf_linear.py:        x=x, fun=r, cost=cost, optimality=g_norm, active_mask=active_mask,
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    lower_mask = np.equal(active, -1)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    upper_mask = np.equal(active, 1)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:        x_new[lower_mask] = np.nextafter(lb[lower_mask], ub[lower_mask])
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:        x_new[upper_mask] = np.nextafter(ub[upper_mask], lb[upper_mask])
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:        x_new[lower_mask] = (lb[lower_mask] +
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:                             rstep * np.maximum(1, np.abs(lb[lower_mask])))
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:        x_new[upper_mask] = (ub[upper_mask] -
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:                             rstep * np.maximum(1, np.abs(ub[upper_mask])))
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    mask = (g < 0) & np.isfinite(ub)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    v[mask] = ub[mask] - x[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    dv[mask] = -1
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    mask = (g > 0) & np.isfinite(lb)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    v[mask] = x[mask] - lb[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    dv[mask] = 1
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    mask = lb_finite & ~ub_finite
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    x[mask] = np.maximum(y[mask], 2 * lb[mask] - y[mask])
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    g_negative[mask] = y[mask] < lb[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    mask = ~lb_finite & ub_finite
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    x[mask] = np.minimum(y[mask], 2 * ub[mask] - y[mask])
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    g_negative[mask] = y[mask] > ub[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    mask = lb_finite & ub_finite
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    t = np.remainder(y[mask] - lb[mask], 2 * d[mask])
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    x[mask] = lb[mask] + np.minimum(t, 2 * d[mask] - t)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/common.py:    g_negative[mask] = t > d[mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/lsq_linear.py:    active_mask : ndarray of int, shape (n,)
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/lsq_linear.py:        sequence of strictly feasible iterates and active_mask is determined
./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/lsq_linear.py:            active_mask=np.zeros(n), unbounded_sol=unbd_lsq,
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/__pycache__/lsq_linear.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/__pycache__/trf_linear.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/__pycache__/trf.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/__pycache__/least_squares.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/__pycache__/common.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/__pycache__/bvls.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/_lsq/__pycache__/dogbox.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/optimize/_constraints.py:        mask = keep_feasible & (lb != ub)
./venv/lib/python3.8/site-packages/scipy/optimize/_constraints.py:        if np.any(f0[mask] < lb[mask]) or np.any(f0[mask] > ub[mask]):
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/__pycache__/_linprog_simplex.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/__pycache__/_constraints.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/__pycache__/_remove_redundancy.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/__pycache__/_numdiff.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/__pycache__/_differentialevolution.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/__pycache__/_tnc.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/__pycache__/_minpack_py.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/optimize/_highs/_highs_wrapper.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/scipy/optimize/_remove_redundancy.py:    # manual masking was faster than masked array
./venv/lib/python3.8/site-packages/scipy/optimize/_remove_redundancy.py:    js_mask = np.ones(js_candidates.shape, dtype=bool)
./venv/lib/python3.8/site-packages/scipy/optimize/_remove_redundancy.py:        js = js_candidates[js_mask]
./venv/lib/python3.8/site-packages/scipy/optimize/_remove_redundancy.py:                js_mask[j-m] = False
./venv/lib/python3.8/site-packages/scipy/io/arff/_arffread.py:    # not as numeric anymore (using masked arrays ?).
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:def assert_mask_matches(arr, expected_mask):
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    Asserts that the mask of arr is effectively the same as expected_mask.
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    In contrast to numpy.ma.testutils.assert_mask_equal, this function allows
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    testing the 'mask' of a standard numpy array (the mask in this case is treated
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    expected_mask : array_like of booleans
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        A list giving the expected mask.
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    mask = np.ma.getmaskarray(arr)
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    assert_equal(mask, expected_mask)
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:def test_maskandscale():
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    tm = np.ma.masked_greater(t, 99)
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    with netcdf_file(fname, maskandscale=True) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        f = netcdf_file(newfname, 'w', maskandscale=True)
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        with netcdf_file(newfname, maskandscale=True) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:# Test reading with masked values (_FillValue / missing_value)
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    fname = pjoin(TEST_DATA_PATH, 'example_3_maskedvals.nc')
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    with netcdf_file(fname, maskandscale=True) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        assert_mask_matches(vardata, [False, True, False])
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    # For a variable with no fill value, reading data with maskandscale=True
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    # should return unmasked data
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    fname = pjoin(TEST_DATA_PATH, 'example_3_maskedvals.nc')
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    with netcdf_file(fname, maskandscale=True) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        assert_mask_matches(vardata, [False, False, False])
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    fname = pjoin(TEST_DATA_PATH, 'example_3_maskedvals.nc')
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    with netcdf_file(fname, maskandscale=True) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        assert_mask_matches(vardata, [True, False, False])
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    fname = pjoin(TEST_DATA_PATH, 'example_3_maskedvals.nc')
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    with netcdf_file(fname, maskandscale=True) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        assert_mask_matches(vardata, [False, True, False])
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    fname = pjoin(TEST_DATA_PATH, 'example_3_maskedvals.nc')
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    with netcdf_file(fname, maskandscale=True) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        assert_mask_matches(vardata, [False, True, False])
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    fname = pjoin(TEST_DATA_PATH, 'example_3_maskedvals.nc')
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    with netcdf_file(fname, maskandscale=True) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        assert_mask_matches(vardata, [False, True, False])
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    fname = pjoin(TEST_DATA_PATH, 'example_3_maskedvals.nc')
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    with netcdf_file(fname, maskandscale=True) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        assert_mask_matches(vardata, [[True, False], [False, False], [False, True]])
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    # with maskandscale set to False, the result should be unmasked
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    fname = pjoin(TEST_DATA_PATH, 'example_3_maskedvals.nc')
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:    with netcdf_file(fname, maskandscale=False, mmap=False) as f:
./venv/lib/python3.8/site-packages/scipy/io/tests/test_netcdf.py:        assert_mask_matches(vardata, [False, False, False])
Binary file ./venv/lib/python3.8/site-packages/scipy/io/tests/__pycache__/test_netcdf.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/io/tests/data/example_3_maskedvals.nc matches
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:    maskandscale : bool, optional
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:        Whether to automatically scale and/or mask data based on attributes.
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:                 maskandscale=False):
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:        self.maskandscale = maskandscale
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:                maskandscale=self.maskandscale)
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:                    maskandscale=self.maskandscale)
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:    maskandscale : bool, optional
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:        Whether to automatically scale and/or mask data based on attributes.
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:                 maskandscale=False):
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:        self.maskandscale = maskandscale
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:        if not self.maskandscale:
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:        if self.maskandscale:
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:        Returns a numpy.ma array, with any value equal to missing_value masked
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:                mymask = np.isnan(data)
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:                mymask = (data == missing_value)
./venv/lib/python3.8/site-packages/scipy/io/_netcdf.py:            newdata = np.ma.masked_where(mymask, data)
./venv/lib/python3.8/site-packages/scipy/io/_mmio.py:                mask = (I != J)       # off diagonal mask
./venv/lib/python3.8/site-packages/scipy/io/_mmio.py:                od_I = I[mask]
./venv/lib/python3.8/site-packages/scipy/io/_mmio.py:                od_J = J[mask]
./venv/lib/python3.8/site-packages/scipy/io/_mmio.py:                od_V = V[mask]
./venv/lib/python3.8/site-packages/scipy/io/_mmio.py:                lower_triangle_mask = coo.row >= coo.col
./venv/lib/python3.8/site-packages/scipy/io/_mmio.py:                coo = coo_matrix((coo.data[lower_triangle_mask],
./venv/lib/python3.8/site-packages/scipy/io/_mmio.py:                                 (coo.row[lower_triangle_mask],
./venv/lib/python3.8/site-packages/scipy/io/_mmio.py:                                  coo.col[lower_triangle_mask])),
Binary file ./venv/lib/python3.8/site-packages/scipy/io/__pycache__/_netcdf.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/io/__pycache__/_mmio.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/scipy/signal/_signaltools.py:    mask centered over each pixel. The non-zero elements of domain are
./venv/lib/python3.8/site-packages/scipy/signal/_signaltools.py:        A mask array with the same number of dimensions as `a`.
./venv/lib/python3.8/site-packages/scipy/signal/_filter_design.py:        mask = np.isreal(fro[order])
./venv/lib/python3.8/site-packages/scipy/signal/_filter_design.py:            mask = ~mask
./venv/lib/python3.8/site-packages/scipy/signal/_filter_design.py:        return order[np.nonzero(mask)[0][0]]
./venv/lib/python3.8/site-packages/scipy/signal/_peak_finding.py:        A boolean mask evaluating to true where `peak_properties` confirms to the
./venv/lib/python3.8/site-packages/scipy/signal/_peak_finding.py:        A boolean mask evaluating to true where `peaks` fulfill the threshold
./venv/lib/python3.8/site-packages/scipy/signal/tests/test_fir_filter_design.py:        mask = w < 0.01
./venv/lib/python3.8/site-packages/scipy/signal/tests/test_fir_filter_design.py:        assert mask.sum() > 3
./venv/lib/python3.8/site-packages/scipy/signal/tests/test_fir_filter_design.py:        assert_allclose(np.abs(h[mask]), 1., atol=1e-4)
./venv/lib/python3.8/site-packages/scipy/signal/tests/test_fir_filter_design.py:        mask = w > 0.99
./venv/lib/python3.8/site-packages/scipy/signal/tests/test_fir_filter_design.py:        assert mask.sum() > 3
./venv/lib/python3.8/site-packages/scipy/signal/tests/test_fir_filter_design.py:        assert_allclose(np.abs(h[mask]), 0., atol=1e-4)
Binary file ./venv/lib/python3.8/site-packages/scipy/signal/tests/__pycache__/test_fir_filter_design.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/signal/_peak_finding_utils.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    mask1 = (w > 1) | (w < 0)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    place(y, mask1, nan)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    mask2 = (1 - mask1) & (tmod < w * 2 * pi)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    tsub = extract(mask2, tmod)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    wsub = extract(mask2, w)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    place(y, mask2, tsub / (pi * wsub) - 1)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    mask3 = (1 - mask1) & (1 - mask2)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    tsub = extract(mask3, tmod)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    wsub = extract(mask3, w)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    place(y, mask3, (pi * (wsub + 1) - tsub) / (pi * (1 - wsub)))
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    mask1 = (w > 1) | (w < 0)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    place(y, mask1, nan)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    mask2 = (1 - mask1) & (tmod < w * 2 * pi)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    place(y, mask2, 1)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    mask3 = (1 - mask1) & (1 - mask2)
./venv/lib/python3.8/site-packages/scipy/signal/_waveforms.py:    place(y, mask3, -1)
./venv/lib/python3.8/site-packages/scipy/signal/_spectral_py.py:    An STFT which has been modified (via masking or otherwise) is not
Binary file ./venv/lib/python3.8/site-packages/scipy/signal/__pycache__/_spectral_py.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/signal/__pycache__/_peak_finding.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/signal/__pycache__/_filter_design.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/signal/__pycache__/_waveforms.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/scipy/signal/__pycache__/_signaltools.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/jupyter_core/utils/__init__.py:    The default permissions are determined by the current umask.
Binary file ./venv/lib/python3.8/site-packages/jupyter_core/utils/__pycache__/__init__.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:from ..utils._mask import _get_mask
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        """Compute the indicator mask.'
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        """Concatenate indicator mask with the imputed data."""
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        missing_mask = _get_mask(X, missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        mask_data = missing_mask.data
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                mask_column = mask_data[X.indptr[i] : X.indptr[i + 1]]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                column = column[~mask_column]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                mask_zeros = _get_mask(column, 0)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                column = column[~mask_zeros]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                n_explicit_zeros = mask_zeros.sum()
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        super()._fit_indicator(missing_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        missing_mask = _get_mask(X, missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        masked_X = ma.masked_array(X, mask=missing_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        super()._fit_indicator(missing_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            mean_masked = np.ma.mean(masked_X, axis=0)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            # Avoid the warning "Warning: converting a masked element to nan."
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            mean = np.ma.getdata(mean_masked)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            mean[np.ma.getmask(mean_masked)] = 0 if self.keep_empty_features else np.nan
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            median_masked = np.ma.median(masked_X, axis=0)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            # Avoid the warning "Warning: converting a masked element to nan."
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            median = np.ma.getdata(median_masked)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            median[np.ma.getmaskarray(median_masked)] = (
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            mask = missing_mask.transpose()
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            for i, (row, row_mask) in enumerate(zip(X[:], mask[:])):
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                row_mask = np.logical_not(row_mask).astype(bool)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                row = row[row_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        # compute mask before eliminating invalid features
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        missing_mask = _get_mask(X, self.missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            invalid_mask = _get_mask(statistics, np.nan)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            valid_mask = np.logical_not(invalid_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            valid_statistics = statistics[valid_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            valid_statistics_indexes = np.flatnonzero(valid_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            if invalid_mask.any():
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                invalid_features = np.arange(X.shape[1])[invalid_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                # if no invalid statistics are found, use the mask computed
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                # before, else recompute mask
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                    mask = missing_mask.data
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                    mask = _get_mask(X.data, self.missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                )[mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                X.data[mask] = valid_statistics[indexes].astype(X.dtype, copy=False)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            # use mask computed before eliminating invalid mask
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                mask_valid_features = missing_mask
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                mask_valid_features = missing_mask[:, valid_statistics_indexes]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            n_missing = np.sum(mask_valid_features, axis=0)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            coordinates = np.where(mask_valid_features.transpose())[::-1]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        X_indicator = super()._transform_indicator(missing_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            an augmented array of imputed data and the missing indicator mask.
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        missing_mask = X[:, non_empty_feature_count:].astype(bool)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        X_original[:, self.indicator_.features_] = missing_mask
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        full_mask = X_original.astype(bool)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        X_original[full_mask] = self.missing_values
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        non_missing_mask = np.logical_not(_get_mask(self.statistics_, np.nan))
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        names = input_features[non_missing_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        Whether the imputer mask should represent all or a subset of
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        - If `'missing-only'` (default), the imputer mask will only represent
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        - If `'all'`, the imputer mask will represent all features.
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        Whether the imputer mask format should be sparse or dense.
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        - If `'auto'` (default), the imputer mask will be of same type as
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        - If `True`, the imputer mask will be a sparse matrix.
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        - If `False`, the imputer mask will be a numpy array.
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        """Compute the imputer mask and the indices of the features
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        imputer_mask : {ndarray, sparse matrix} of shape \
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            The imputer mask of the original data.
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            imputer_mask = _get_mask(X, self.missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            imputer_mask = X
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            imputer_mask.eliminate_zeros()
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                n_missing = imputer_mask.getnnz(axis=0)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                imputer_mask = imputer_mask.toarray()
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            elif imputer_mask.format == "csr":
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                imputer_mask = imputer_mask.tocsc()
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                imputer_mask = _get_mask(X, self.missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                imputer_mask = X
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                n_missing = imputer_mask.sum(axis=0)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                imputer_mask = sp.csc_matrix(imputer_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        return imputer_mask, features_indices
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            If `precomputed=True`, then `X` is a mask of the input data.
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            Whether the input data is a mask.
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        imputer_mask : {ndarray, sparse matrix} of shape (n_samples, \
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            The imputer mask of the original data.
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                raise ValueError("precomputed is True but the input data is not a mask")
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                raise ValueError("precomputed is True but the input data is not a mask")
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        imputer_mask, features = self._get_missing_features_info(X)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:                imputer_mask = imputer_mask[:, self.features_]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        return imputer_mask
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        imputer_mask = self._fit(X, y)
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:            imputer_mask = imputer_mask[:, self.features_]
./venv/lib/python3.8/site-packages/sklearn/impute/_base.py:        return imputer_mask
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:from ..utils._mask import _get_mask
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:    def _calc_impute(self, dist_pot_donors, n_neighbors, fit_X_col, mask_fit_X_col):
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        mask_fit_X_col : ndarray of shape (n_potential_donors,)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:            Missing mask for fit_X_col.
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        donors_mask = mask_fit_X_col.take(donors_idx)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        donors = np.ma.array(donors, mask=donors_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        self._mask_fit_X = _get_mask(self._fit_X, self.missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        self._valid_mask = ~np.all(self._mask_fit_X, axis=0)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        super()._fit_indicator(self._mask_fit_X)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        mask = _get_mask(X, self.missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        mask_fit_X = self._mask_fit_X
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        valid_mask = self._valid_mask
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        X_indicator = super()._transform_indicator(mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        if not np.any(mask):
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                Xc[:, ~valid_mask] = 0
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                Xc = X[:, valid_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        row_missing_idx = np.flatnonzero(mask.any(axis=1))
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        non_missing_fix_X = np.logical_not(mask_fit_X)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                if not valid_mask[col]:
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                col_mask = mask[row_missing_chunk, col]
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                if not np.any(col_mask):
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                receivers_idx = row_missing_chunk[np.flatnonzero(col_mask)]
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                all_nan_dist_mask = np.isnan(dist_subset).all(axis=1)
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                all_nan_receivers_idx = receivers_idx[all_nan_dist_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                        self._fit_X[:, col], mask=mask_fit_X[:, col]
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                    receivers_idx = receivers_idx[~all_nan_dist_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:                    mask_fit_X[potential_donors_idx, col],
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:            Xc[:, ~valid_mask] = 0
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:            Xc = X[:, valid_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_knn.py:        names = input_features[self._valid_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:from sklearn.utils._mask import _get_mask
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:        mask = _get_mask(X, value_to_mask=np.nan)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:        super()._fit_indicator(mask)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:        mask = _get_mask(X, value_to_mask=np.nan)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:        self._fit_indicator(mask)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:def test_base_no_precomputed_mask_fit(data):
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:    err_msg = "precomputed is True but the input data is not a mask"
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:def test_base_no_precomputed_mask_transform(data):
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:    err_msg = "precomputed is True but the input data is not a mask"
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:    mask = rng.randint(0, 2, size=(n_samples, n_features)).astype(bool)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:    _assign_where(X1, X2, mask)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_base.py:    assert_allclose(X1[mask], X2[mask])
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    nan_mask = rng.rand(d, d) < 0.5
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_missing[nan_mask] = np.nan
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    nan_mask = rng.rand(n, d) < 0.5
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_missing[nan_mask] = np.nan
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    nan_mask = rng.rand(n, d) < 0.25
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_missing[nan_mask] = np.nan
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    nan_mask = rng.rand(n, d) < 0.5
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_missing[nan_mask] = np.nan
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_fit_mask = indicator.fit_transform(X_fit)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_trans_mask = indicator.transform(X_trans)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert X_fit_mask.shape[1] == n_features
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert X_trans_mask.shape[1] == n_features
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert_allclose(X_fit_mask, X_fit_expected[:, features_indices])
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert_allclose(X_trans_mask, X_trans_expected[:, features_indices])
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert X_fit_mask.dtype == bool
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert X_trans_mask.dtype == bool
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert isinstance(X_fit_mask, np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert isinstance(X_trans_mask, np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_fit_mask_sparse = indicator.fit_transform(X_fit)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_trans_mask_sparse = indicator.transform(X_trans)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert X_fit_mask_sparse.dtype == bool
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert X_trans_mask_sparse.dtype == bool
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert X_fit_mask_sparse.format == "csc"
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert X_trans_mask_sparse.format == "csc"
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert_allclose(X_fit_mask_sparse.toarray(), X_fit_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    assert_allclose(X_trans_mask_sparse.toarray(), X_trans_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_fit_mask = indicator.fit_transform(X_fit)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    X_trans_mask = indicator.transform(X_trans)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:        assert X_fit_mask.format == "csc"
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:        assert X_trans_mask.format == "csc"
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:        assert isinstance(X_fit_mask, np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:        assert isinstance(X_trans_mask, np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:        assert isinstance(X_fit_mask, np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:        assert isinstance(X_trans_mask, np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:            assert X_fit_mask.format == "csc"
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:            assert X_trans_mask.format == "csc"
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:            assert isinstance(X_fit_mask, np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:            assert isinstance(X_trans_mask, np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_impute.py:    # Check that non missing values don't become explicit zeros in the mask
Binary file ./venv/lib/python3.8/site-packages/sklearn/impute/tests/__pycache__/test_impute.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/impute/tests/__pycache__/test_knn.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/impute/tests/__pycache__/test_base.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_knn.py:    col1_donor_values = np.ma.masked_invalid(X[[0, 2, 3, 4, 5], 1]).copy()
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_knn.py:    col3_donor_values = np.ma.masked_invalid(X[[0, 3, 4, 5, 6], 3]).copy()
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_knn.py:        x = np.ma.array(x, mask=np.isnan(x))
./venv/lib/python3.8/site-packages/sklearn/impute/tests/test_knn.py:        y = np.ma.array(y, mask=np.isnan(y))
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:from ..utils._mask import _get_mask
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        Boolean mask to assign data.
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:    if hasattr(X1, "mask"):  # pandas dataframes
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        X1.mask(cond=cond, other=X2, inplace=True)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        mask_missing_values,
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        mask_missing_values : ndarray
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            Input data with `X_filled[missing_row_mask, feat_idx]` updated.
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            `X_filled[missing_row_mask, feat_idx]`.
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        missing_row_mask = mask_missing_values[:, feat_idx]
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:                ~missing_row_mask,
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:                ~missing_row_mask,
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        if np.sum(missing_row_mask) == 0:
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            missing_row_mask,
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            inrange_mask = positive_sigmas & ~mus_too_low & ~mus_too_high
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            mus = mus[inrange_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            sigmas = sigmas[inrange_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            imputed_values[inrange_mask] = truncated_normal.rvs(
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            row_indexer=missing_row_mask,
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:    def _get_ordered_idx(self, mask_missing_values):
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        mask_missing_values : array-like, shape (n_samples, n_features)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        frac_of_missing_values = mask_missing_values.mean(axis=0)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        mask_missing_values : ndarray of shape (n_samples, n_features)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            masked by non-missing features.
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        X_missing_mask : ndarray, shape (n_samples, n_features)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            Input data's mask matrix indicating missing datapoints, where
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        X_missing_mask = _get_mask(X, self.missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        mask_missing_values = X_missing_mask.copy()
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        valid_mask = np.flatnonzero(
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            Xt = X[:, valid_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            mask_missing_values = mask_missing_values[:, valid_mask]
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            mask_missing_values[:, valid_mask] = True
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        return Xt, X_filled, mask_missing_values, X_missing_mask
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        X, Xt, mask_missing_values, complete_mask = self._initial_imputation(
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        super()._fit_indicator(complete_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        X_indicator = super()._transform_indicator(complete_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        if self.max_iter == 0 or np.all(mask_missing_values):
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        ordered_idx = self._get_ordered_idx(mask_missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:            normalized_tol = self.tol * np.max(np.abs(X[~mask_missing_values]))
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:                ordered_idx = self._get_ordered_idx(mask_missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:                    mask_missing_values,
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        _assign_where(Xt, X, cond=~mask_missing_values)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        X, Xt, mask_missing_values, complete_mask = self._initial_imputation(
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        X_indicator = super()._transform_indicator(complete_mask)
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        if self.n_iter_ == 0 or np.all(mask_missing_values):
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:                mask_missing_values,
./venv/lib/python3.8/site-packages/sklearn/impute/_iterative.py:        _assign_where(Xt, X, cond=~mask_missing_values)
Binary file ./venv/lib/python3.8/site-packages/sklearn/impute/__pycache__/_iterative.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/impute/__pycache__/_knn.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/impute/__pycache__/_base.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    "indices_to_mask",
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:def safe_mask(X, mask):
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    """Return a mask which is safe to use on X.
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        Data on which to apply mask.
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    mask : ndarray
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    mask : ndarray
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    mask = np.asarray(mask)
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    if np.issubdtype(mask.dtype, np.signedinteger):
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        return mask
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        ind = np.arange(mask.shape[0])
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        mask = ind[mask]
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    return mask
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:def axis0_safe_slice(X, mask, len_mask):
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    """Return a mask which is safer to use on X than safe_mask.
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    This mask is safer than safe_mask since it returns an
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    empty array, when a sparse matrix is sliced with a boolean mask
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    the len_mask is not zero in _huber_loss_and_gradient but this
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        Data on which to apply mask.
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    mask : ndarray
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    len_mask : int
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        The length of the mask.
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    mask : ndarray
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    if len_mask != 0:
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        return X[safe_mask(X, mask), :]
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        "slice of all integers or all strings, or boolean mask is "
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:            "strings, or boolean mask is allowed"
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:def indices_to_mask(indices, mask_length):
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    """Convert list of indices to boolean mask.
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    mask_length : int
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        Length of boolean mask to be generated.
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    mask : 1d boolean nd-array
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    >>> from sklearn.utils import indices_to_mask
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    >>> indices_to_mask(indices, 5)
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    if mask_length <= np.max(indices):
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:        raise ValueError("mask_length must be greater than max(indices)")
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    mask = np.zeros(mask_length, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    mask[indices] = True
./venv/lib/python3.8/site-packages/sklearn/utils/__init__.py:    return mask
./venv/lib/python3.8/site-packages/sklearn/utils/extmath.py:    X_nan_mask = np.isnan(X)
./venv/lib/python3.8/site-packages/sklearn/utils/extmath.py:    if np.any(X_nan_mask):
./venv/lib/python3.8/site-packages/sklearn/utils/extmath.py:            np.matmul, sample_weight, np.where(X_nan_mask, 0, X)
./venv/lib/python3.8/site-packages/sklearn/utils/extmath.py:            np.sum, sample_weight[:, None] * (~X_nan_mask), axis=0
./venv/lib/python3.8/site-packages/sklearn/utils/extmath.py:        new_sample_count = n_samples - np.sum(X_nan_mask, axis=0)
./venv/lib/python3.8/site-packages/sklearn/utils/extmath.py:                np.matmul, sample_weight, np.where(X_nan_mask, 0, temp)
./venv/lib/python3.8/site-packages/sklearn/utils/extmath.py:                np.matmul, sample_weight, np.where(X_nan_mask, 0, temp)
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:def _get_dense_mask(X, value_to_mask):
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:        if value_to_mask is pandas.NA:
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:    if is_scalar_nan(value_to_mask):
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:        Xt = X == value_to_mask
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:def _get_mask(X, value_to_mask):
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:    """Compute the boolean mask X == value_to_mask.
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:    value_to_mask : {int, float}
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:        The value which is to be masked in X.
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:    X_mask : {ndarray, sparse matrix} of shape (n_samples, n_features)
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:        Missing mask.
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:        return _get_dense_mask(X, value_to_mask)
./venv/lib/python3.8/site-packages/sklearn/utils/_mask.py:    Xt = _get_dense_mask(X.data, value_to_mask)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_fixes.py:    expected_mask = np.array([[False, True], [True, False]])
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_fixes.py:    mask = _object_dtype_isnan(X)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_fixes.py:    assert_array_equal(mask, expected_mask)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_utils.py:from sklearn.utils import safe_mask
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_utils.py:def test_safe_mask():
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_utils.py:    mask = [False, False, True, True, True]
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_utils.py:    mask = safe_mask(X, mask)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_utils.py:    assert X[mask].shape[0] == 3
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_utils.py:    mask = safe_mask(X_csr, mask)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_utils.py:    assert X_csr[mask].shape[0] == 3
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_utils.py:def test_safe_indexing_1d_container_mask(array_type, indices_type):
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_utils.py:def test_safe_indexing_2d_mask(array_type, indices_type, axis, expected_subset):
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:def _assert_check_unknown(values, uniques, expected_diff, expected_mask):
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    diff, valid_mask = _check_unknown(values, uniques, return_mask=True)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    assert_array_equal(valid_mask, expected_mask)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    "values, uniques, expected_diff, expected_mask",
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:def test_check_unknown(values, uniques, expected_diff, expected_mask):
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    _assert_check_unknown(values, uniques, expected_diff, expected_mask)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    expected_mask = [False, True, True, True, True]
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    _assert_check_unknown(values, uniques, expected_diff, expected_mask)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    expected_mask = [False, True, True, True, False]
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    _assert_check_unknown(values, uniques, expected_diff, expected_mask)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    expected_mask = [True, False]
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    _assert_check_unknown(values, uniques, expected_diff, expected_mask)
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    diff, valid_mask = _check_unknown(
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:        values, known_values=np.array(["a", "c"], dtype=object), return_mask=True
./venv/lib/python3.8/site-packages/sklearn/utils/tests/test_encode.py:    assert_array_equal(valid_mask, [False, True, True, True, False, False, False])
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/tests/__pycache__/test_fixes.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/tests/__pycache__/test_utils.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/tests/__pycache__/test_encode.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/utils/stats.py:    mask = adjusted_percentile == 0
./venv/lib/python3.8/site-packages/sklearn/utils/stats.py:    adjusted_percentile[mask] = np.nextafter(
./venv/lib/python3.8/site-packages/sklearn/utils/stats.py:        adjusted_percentile[mask], adjusted_percentile[mask] + 1
./venv/lib/python3.8/site-packages/sklearn/utils/sparsefuncs.py:    m_mask = X.indices == m
./venv/lib/python3.8/site-packages/sklearn/utils/sparsefuncs.py:    X.indices[m_mask] = n
./venv/lib/python3.8/site-packages/sklearn/utils/sparsefuncs.py:    mask = value != 0
./venv/lib/python3.8/site-packages/sklearn/utils/sparsefuncs.py:    major_index = np.compress(mask, major_index)
./venv/lib/python3.8/site-packages/sklearn/utils/sparsefuncs.py:    value = np.compress(mask, value)
./venv/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:        mask = rng.choice(X.size, 10, replace=False)
./venv/lib/python3.8/site-packages/sklearn/utils/estimator_checks.py:        X.reshape(-1)[mask] = np.nan
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/__pycache__/_encode.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/__pycache__/_mask.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/__pycache__/sparsefuncs.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/__pycache__/estimator_checks.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/__pycache__/__init__.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/__pycache__/stats.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/utils/__pycache__/extmath.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:def _check_unknown(values, known_values, return_mask=False):
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:    return_mask : bool, default=False
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:        If True, return a mask of the same shape as `values` indicating
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:    valid_mask : boolean array
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:        Additionally returned if ``return_mask=True``.
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:    valid_mask = None
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:        if return_mask:
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:                valid_mask = np.array([is_valid(value) for value in values])
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:                valid_mask = np.ones(len(values), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:        if return_mask:
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:                valid_mask = np.in1d(values, known_values)
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:                valid_mask = np.ones(len(values), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:                # removes nan from valid_mask
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:                if diff.size and return_mask:
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:                    valid_mask[is_nan] = 1
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:    if return_mask:
./venv/lib/python3.8/site-packages/sklearn/utils/_encode.py:        return diff, valid_mask
./venv/lib/python3.8/site-packages/sklearn/cross_decomposition/_pls.py:                Yk_mask = np.all(np.abs(Yk) < 10 * Y_eps, axis=0)
./venv/lib/python3.8/site-packages/sklearn/cross_decomposition/_pls.py:                Yk[:, Yk_mask] = 0.0
Binary file ./venv/lib/python3.8/site-packages/sklearn/cross_decomposition/__pycache__/_pls.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/cluster/_agglomerative.py:    diag_mask = connectivity.row != connectivity.col
./venv/lib/python3.8/site-packages/sklearn/cluster/_agglomerative.py:    connectivity.row = connectivity.row[diag_mask]
./venv/lib/python3.8/site-packages/sklearn/cluster/_agglomerative.py:    connectivity.col = connectivity.col[diag_mask]
./venv/lib/python3.8/site-packages/sklearn/cluster/_agglomerative.py:    connectivity.data = connectivity.data[diag_mask]
./venv/lib/python3.8/site-packages/sklearn/cluster/_agglomerative.py:    del diag_mask
./venv/lib/python3.8/site-packages/sklearn/cluster/_affinity_propagation.py:        # Create mask to ignore diagonal of S
./venv/lib/python3.8/site-packages/sklearn/cluster/_affinity_propagation.py:        mask = np.ones(S.shape, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/cluster/_affinity_propagation.py:        np.fill_diagonal(mask, 0)
./venv/lib/python3.8/site-packages/sklearn/cluster/_affinity_propagation.py:        return np.all(S[mask].flat == S[mask].flat[0])
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_spectral.py:    mask = circles.copy()
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_spectral.py:    graph = img_to_graph(img, mask=mask)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_k_means.py:    mask = labels == label
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_k_means.py:    distances = ((X_dense[mask] - centers[label]) ** 2).sum(axis=1)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_k_means.py:    expected = np.sum(distances * sample_weight[mask])
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_dbscan.py:    core_repeated_mask = np.zeros(X_repeated.shape[0], dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_dbscan.py:    core_repeated_mask[core_repeated] = True
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_dbscan.py:    core_mask = np.zeros(X.shape[0], dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_dbscan.py:    core_mask[core1] = True
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_dbscan.py:    assert_array_equal(np.repeat(core_mask, sample_weight), core_repeated_mask)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    mask = np.ones([10, 10], dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    # Avoiding a mask with only 'True' entries
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    mask[4:7, 4:7] = 0
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    connectivity = grid_to_graph(*mask.shape)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    mask = np.ones([10, 10], dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    connectivity = grid_to_graph(*mask.shape)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    mask = np.ones([10, 10], dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    connectivity = grid_to_graph(*mask.shape)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    mask = np.ones([10, 10], dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    connectivity = grid_to_graph(*mask.shape)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    mask = np.ones([10, 10], dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    connectivity = grid_to_graph(*mask.shape)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    # create a mask with several components to force connectivity fixing
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    c = grid_to_graph(n_x=2, n_y=2, mask=m)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    max_merge(d, other, mask=np.ones(100, dtype=np.intp), n_a=1, n_b=1)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    average_merge(d, other, mask=np.ones(100, dtype=np.intp), n_a=1, n_b=1)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    mask = np.array([True, False, False, True])
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    connectivity = grid_to_graph(n_x=size, n_y=size, mask=mask, return_as=np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    mask = np.ones([10, 10], dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:    connectivity = grid_to_graph(*mask.shape)
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:        in_cluster_mask = labels == label
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:            D[in_cluster_mask][:, in_cluster_mask].min(axis=0).max()
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:            D[in_cluster_mask][:, ~in_cluster_mask].min(axis=0).min()
./venv/lib/python3.8/site-packages/sklearn/cluster/tests/test_hierarchical.py:        if in_cluster_mask.sum() > 1:
Binary file ./venv/lib/python3.8/site-packages/sklearn/cluster/tests/__pycache__/test_spectral.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/cluster/tests/__pycache__/test_hierarchical.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/cluster/tests/__pycache__/test_dbscan.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/cluster/tests/__pycache__/test_k_means.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/cluster/_bisect_k_means.py:        mask = cluster_labels == 0
./venv/lib/python3.8/site-packages/sklearn/cluster/_bisect_k_means.py:        labels[mask] = self._predict_recursive(
./venv/lib/python3.8/site-packages/sklearn/cluster/_bisect_k_means.py:            X[mask], sample_weight[mask], cluster_node.left
./venv/lib/python3.8/site-packages/sklearn/cluster/_bisect_k_means.py:        labels[~mask] = self._predict_recursive(
./venv/lib/python3.8/site-packages/sklearn/cluster/_bisect_k_means.py:            X[~mask], sample_weight[~mask], cluster_node.right
Binary file ./venv/lib/python3.8/site-packages/sklearn/cluster/__pycache__/_bisect_k_means.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/cluster/__pycache__/_affinity_propagation.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/cluster/__pycache__/_agglomerative.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/cluster/_hierarchical_fast.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        mask = d == label
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        count = np.sum(mask)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:            nn.fit(c[mask])
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:            radius[mask] = np.nextafter(r[:, -1], 0)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:            k_all[mask] = k
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        label_counts[mask] = count
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:    mask = label_counts > 1
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:    n_samples = np.sum(mask)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:    label_counts = label_counts[mask]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:    k_all = k_all[mask]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:    c = c[mask]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:    radius = radius[mask]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        or continuous. If array, then it should be either a boolean mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        discrete_mask = np.empty(n_features, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        discrete_mask.fill(discrete_features)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:            discrete_mask = np.zeros(n_features, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:            discrete_mask[discrete_features] = True
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:            discrete_mask = discrete_features
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:    continuous_mask = ~discrete_mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:    if np.any(continuous_mask) and issparse(X):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:    if np.any(continuous_mask):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        X[:, continuous_mask] = scale(
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:            X[:, continuous_mask], with_mean=False, copy=False
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        means = np.maximum(1, np.mean(np.abs(X[:, continuous_mask]), axis=0))
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        X[:, continuous_mask] += (
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:            * rng.standard_normal(size=(n_samples, np.sum(continuous_mask)))
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        for x, discrete_feature in zip(_iterate_columns(X), discrete_mask)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        or continuous. If array, then it should be either a boolean mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_mutual_info.py:        or continuous. If array, then it should be either a boolean mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:    safe_mask,
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:    Transformer mixin that performs feature selection given a support mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:    `_get_support_mask`.
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:        Get a mask, or integer index, of the features selected.
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:            than a boolean mask.
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:        mask = self._get_support_mask()
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:        return mask if not indices else np.where(mask)[0]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:        Get the boolean mask indicating which features are selected
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:        mask = self.get_support()
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:        if not mask.any():
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:        if len(mask) != X.shape[1]:
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_base.py:        return X[:, safe_mask(X, mask)]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_mutual_info.py:        mask = x == 0
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_mutual_info.py:        y[mask] = rng.uniform(-1, 1, size=np.sum(mask))
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_mutual_info.py:        y[~mask] = rng.uniform(0, 2, size=np.sum(~mask))
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_mutual_info.py:    mask = x == 0
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_mutual_info.py:    y[mask] = np.random.uniform(-1, 1, size=np.sum(mask))
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_mutual_info.py:    y[~mask] = np.random.uniform(0, 2, size=np.sum(~mask))
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_base.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_base.py:        mask = np.zeros(self.n_input_feats, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_base.py:        mask[:: self.step] = True
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_base.py:        return mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_feature_select.py:from sklearn.utils import safe_mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_feature_select.py:    support_mask = safe_mask(X_r2inv, support)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_feature_select.py:    assert_array_equal(X_r2inv[:, support_mask].toarray(), X_r.toarray())
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:        selected_feature_indices = np.where(transformer._get_support_mask())[0]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:        feature_mask = np.abs(importances) > func(importances)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:        assert_array_almost_equal(X_new, X[:, feature_mask])
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:    mask = transformer._get_support_mask()
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:    weighted_mask = transformer._get_support_mask()
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:    assert not np.all(weighted_mask == mask)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:    reweighted_mask = transformer._get_support_mask()
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:    assert np.all(weighted_mask == reweighted_mask)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:    mask = np.abs(transformer.estimator_.coef_) > 1e-5
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:    assert_array_almost_equal(X_new, X[:, mask])
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:            feature_mask = importances > func(importances)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:            assert_array_almost_equal(X_new, X[:, feature_mask])
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:    mask = est.feature_importances_ > threshold
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_from_model.py:    assert_array_almost_equal(X_transform, data[:, mask])
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/__pycache__/test_sequential.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/__pycache__/test_from_model.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/__pycache__/test_base.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/__pycache__/test_feature_select.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/__pycache__/test_mutual_info.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_sequential.py:    nan_mask = rng.randint(0, 2, size=(n_samples, n_features), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/tests/test_sequential.py:    X[nan_mask] = np.nan
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_from_model.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_from_model.py:            mask = np.zeros_like(scores, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_from_model.py:            mask[candidate_indices] = True
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_from_model.py:            mask = np.ones_like(scores, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_from_model.py:        mask[scores < threshold] = False
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_from_model.py:        return mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_variance_threshold.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:        The mask of selected features.
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:        # the current mask corresponds to the set of features:
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:        current_mask = np.zeros(shape=n_features, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:                cloned_estimator, X, y, current_mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:            current_mask[new_feature_idx] = True
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:            current_mask = ~current_mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:        self.support_ = current_mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:    def _get_best_new_feature_score(self, estimator, X, y, current_mask):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:        # Return the best new feature and its score to add to the current_mask,
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:        candidate_feature_indices = np.flatnonzero(~current_mask)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:            candidate_mask = current_mask.copy()
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:            candidate_mask[feature_idx] = True
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:                candidate_mask = ~candidate_mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:            X_new = X[:, candidate_mask]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_sequential.py:    def _get_support_mask(self):
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/__pycache__/_variance_threshold.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/__pycache__/_rfe.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/__pycache__/_from_model.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/__pycache__/_mutual_info.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/__pycache__/_base.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/__pycache__/_sequential.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_selection/__pycache__/_univariate_selection.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_rfe.py:        The mask of selected features.
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_rfe.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_rfe.py:        The mask of selected features.
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:from ..utils import as_float_array, check_array, check_X_y, safe_sqr, safe_mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:    args = [X[safe_mask(X, y == k)] for k in np.unique(y)]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        nan_mask = np.isnan(correlation_coefficient)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        correlation_coefficient[nan_mask] = 0.0
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        mask_inf = np.isinf(f_statistic)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        f_statistic[mask_inf] = np.finfo(f_statistic.dtype).max
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        mask_nan = np.isnan(f_statistic)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        f_statistic[mask_nan] = 0.0
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        p_values[mask_nan] = 1.0
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        mask = scores > threshold
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:            kept_ties = ties[: max_feats - mask.sum()]
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:            mask[kept_ties] = True
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        return mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:            mask = np.zeros(scores.shape, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:            mask[np.argsort(scores, kind="mergesort")[-self.k :]] = 1
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:            return mask
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:    def _get_support_mask(self):
./venv/lib/python3.8/site-packages/sklearn/feature_selection/_univariate_selection.py:        return selector._get_support_mask()
./venv/lib/python3.8/site-packages/sklearn/inspection/_partial_dependence.py:        - boolean array-like: boolean mask of shape `(n_features,)`
Binary file ./venv/lib/python3.8/site-packages/sklearn/inspection/tests/__pycache__/test_partial_dependence.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/inspection/tests/test_partial_dependence.py:    mask = rng.randint(2, size=N, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/inspection/tests/test_partial_dependence.py:    # set y = x on mask and y = -x outside
./venv/lib/python3.8/site-packages/sklearn/inspection/tests/test_partial_dependence.py:    y[~mask] = -y[~mask]
./venv/lib/python3.8/site-packages/sklearn/inspection/tests/test_partial_dependence.py:    X = np.c_[mask, x]
./venv/lib/python3.8/site-packages/sklearn/inspection/tests/test_partial_dependence.py:    sample_weight[mask] = 1000.0
./venv/lib/python3.8/site-packages/sklearn/inspection/tests/test_partial_dependence.py:    ids=["scalar-int", "scalar-str", "list-int", "list-str", "mask"],
./venv/lib/python3.8/site-packages/sklearn/inspection/_plot/partial_dependence.py:            - boolean array-like: boolean mask of shape `(n_features,)`
Binary file ./venv/lib/python3.8/site-packages/sklearn/inspection/_plot/__pycache__/partial_dependence.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/inspection/__pycache__/_partial_dependence.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:        # Use one MaskedArray and mask all the places where the param is not
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:                mask=True,
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:                # An all masked empty array gets created for the key
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:                # Setting the value at an index also unmasks that index
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:    cv_results_ : dict of numpy (masked) ndarrays
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:            'param_kernel': masked_array(data = ['poly', 'poly', 'rbf', 'rbf'],
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:                                         mask = [False False False False]...)
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:            'param_gamma': masked_array(data = [-- -- 0.1 0.2],
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:                                        mask = [ True  True False False]...),
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:            'param_degree': masked_array(data = [2.0 3.0 -- --],
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:                                         mask = [False False  True  True]...),
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:    cv_results_ : dict of numpy (masked) ndarrays
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:            'param_kernel' : masked_array(data = ['rbf', 'rbf', 'rbf'],
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:                                          mask = False),
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search.py:            'param_gamma'  : masked_array(data = [0.1 0.2 0.3], mask = False),
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:def test_cross_val_score_mask():
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:    # test that cross_val_score works with boolean masks
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:    cv_masks = []
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:        mask_train = np.zeros(len(y), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:        mask_test = np.zeros(len(y), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:        mask_train[train] = 1
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:        mask_test[test] = 1
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:        cv_masks.append((train, test))
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:    scores_masks = cross_val_score(svm, X, y, cv=cv_masks)
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_validation.py:    assert_array_equal(scores_indices, scores_masks)
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:    # Check masking
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            cv_results["param_C"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            and cv_results["param_gamma"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            and not cv_results["param_degree"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            not cv_results["param_C"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            and not cv_results["param_gamma"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            and cv_results["param_degree"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            cv_results["param_C"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            and cv_results["param_gamma"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            and not cv_results["param_degree"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            not cv_results["param_C"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            and not cv_results["param_gamma"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:            and cv_results["param_degree"].mask[i]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:    mask = np.ones(X.shape[0], dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:    mask[np.where(y == 1)[0][::2]] = 0
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:    mask[np.where(y == 2)[0][::2]] = 0
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:    cv = [[mask, ~mask], [~mask, mask]]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:    non_finite_mask = np.isnan(grid.cv_results_["mean_test_score"])
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:    assert_array_equal(grid.cv_results_["rank_test_score"][non_finite_mask], last_rank)
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_search.py:    assert np.all(grid.cv_results_["rank_test_score"][~non_finite_mask] < last_rank)
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_successive_halving.py:    nan_mask = pd.isna(table)
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_successive_halving.py:        already_discarded_mask = nan_mask[it]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_successive_halving.py:            already_discarded_mask & nan_mask[it + 1] == already_discarded_mask
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_successive_halving.py:        discarded_now_mask = ~already_discarded_mask & nan_mask[it + 1]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_successive_halving.py:        kept_mask = ~already_discarded_mask & ~discarded_now_mask
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_successive_halving.py:        assert kept_mask.sum() == sh.n_candidates_[it + 1]
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_successive_halving.py:        discarded_max_score = table[it].where(discarded_now_mask).max()
./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/test_successive_halving.py:        kept_min_score = table[it].where(kept_mask).min()
Binary file ./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/__pycache__/test_successive_halving.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/__pycache__/test_search.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/model_selection/tests/__pycache__/test_validation.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:            this_mask = groups == group
./venv/lib/python3.8/site-packages/sklearn/model_selection/_validation.py:            indices[this_mask] = random_state.permutation(indices[this_mask])
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:    Implementations must define `_iter_test_masks` or `_iter_test_indices`.
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:        for test_index in self._iter_test_masks(X, y, groups):
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:    # Since subclasses must implement either _iter_test_masks or
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:    def _iter_test_masks(self, X=None, y=None, groups=None):
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:        """Generates boolean masks corresponding to test sets.
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:            test_mask = np.zeros(_num_samples(X), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:            test_mask[test_index] = True
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:            yield test_mask
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:    def _iter_test_masks(self, X, y=None, groups=None):
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:    def _iter_test_masks(self, X, y, groups):
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:    def _iter_test_masks(self, X, y, groups):
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:        for test_index in self._iter_test_masks():
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:    def _iter_test_masks(self):
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:        """Generates boolean masks corresponding to test sets."""
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:            test_mask = np.zeros(len(self.test_fold), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:            test_mask[test_index] = True
./venv/lib/python3.8/site-packages/sklearn/model_selection/_split.py:            yield test_mask
Binary file ./venv/lib/python3.8/site-packages/sklearn/model_selection/__pycache__/_validation.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/model_selection/__pycache__/_search_successive_halving.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/model_selection/__pycache__/_search.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/model_selection/__pycache__/_split.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search_successive_halving.py:    cv_results_ : dict of numpy (masked) ndarrays
./venv/lib/python3.8/site-packages/sklearn/model_selection/_search_successive_halving.py:    cv_results_ : dict of numpy (masked) ndarrays
./venv/lib/python3.8/site-packages/sklearn/datasets/_twenty_newsgroups.py:        mask = np.in1d(data.target, labels)
./venv/lib/python3.8/site-packages/sklearn/datasets/_twenty_newsgroups.py:        data.filenames = data.filenames[mask]
./venv/lib/python3.8/site-packages/sklearn/datasets/_twenty_newsgroups.py:        data.target = data.target[mask]
./venv/lib/python3.8/site-packages/sklearn/datasets/_twenty_newsgroups.py:        data_lst = data_lst[mask]
Binary file ./venv/lib/python3.8/site-packages/sklearn/datasets/__pycache__/_twenty_newsgroups.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/datasets/__pycache__/_samples_generator.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/datasets/_samples_generator.py:        flip_mask = generator.uniform(size=n_samples) < flip_y
./venv/lib/python3.8/site-packages/sklearn/datasets/_samples_generator.py:        y[flip_mask] = generator.randint(n_classes, size=flip_mask.sum())
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:# XXX: Why mask the image after computing the weights?
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:def _mask_edges_weights(mask, edges, weights=None):
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    """Apply a mask to edges (weighted or not)"""
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    inds = np.arange(mask.size)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    inds = inds[mask.ravel()]
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    ind_mask = np.logical_and(np.in1d(edges[0], inds), np.in1d(edges[1], inds))
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    edges = edges[:, ind_mask]
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:        weights = weights[ind_mask]
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    order = np.searchsorted(np.flatnonzero(mask), np.arange(maxval + 1))
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    n_x, n_y, n_z, mask=None, img=None, return_as=sparse.coo_matrix, dtype=None
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:        if mask is not None:
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:            edges, weights = _mask_edges_weights(mask, edges, weights)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:            diag = img.squeeze()[mask]
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:        if mask is not None:
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:            mask = mask.astype(dtype=bool, copy=False)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:            mask = np.asarray(mask, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:            edges = _mask_edges_weights(mask, edges)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:            n_voxels = np.sum(mask)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:def img_to_graph(img, *, mask=None, return_as=sparse.coo_matrix, dtype=None):
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    mask : ndarray of shape (height, width) or \
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:        An optional mask of the image, to consider only part of the
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    return _to_graph(n_x, n_y, n_z, mask, img, return_as, dtype)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    n_x, n_y, n_z=1, *, mask=None, return_as=sparse.coo_matrix, dtype=int
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    mask : ndarray of shape (n_x, n_y, n_z), dtype=bool, default=None
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:        An optional mask of the image, to consider only part of the
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/image.py:    return _to_graph(n_x, n_y, n_z, mask=mask, return_as=return_as, dtype=dtype)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask = np.zeros((2, 3), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask[0, 0] = 1
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask[:, 2] = 1
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    grad_x = img_to_graph(x, mask=mask).todense()
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask = np.zeros((size, size), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask[0:roi_size, 0:roi_size] = True
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask[-roi_size:, -roi_size:] = True
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask = mask.reshape(size**2)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    A = grid_to_graph(n_x=size, n_y=size, mask=mask, return_as=np.ndarray)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask = np.zeros((2, 3), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask[0, 0] = 1
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask[:, 2] = 1
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    graph = grid_to_graph(2, 3, 1, mask=mask.ravel()).todense()
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    # Checking that the function works whatever the type of mask is
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask = np.ones((size, size), dtype=np.int16)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    A = grid_to_graph(n_x=size, n_y=size, n_z=size, mask=mask)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask = np.ones((size, size))
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    A = grid_to_graph(n_x=size, n_y=size, n_z=size, mask=mask, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    A = grid_to_graph(n_x=size, n_y=size, n_z=size, mask=mask, dtype=int)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    A = grid_to_graph(n_x=size, n_y=size, n_z=size, mask=mask, dtype=np.float64)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:        mask = face > thr
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:        graph = img_to_graph(face, mask=mask)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:        assert ndimage.label(mask)[1] == connected_components(graph)[0]
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask = face > 50
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    graph = grid_to_graph(*face.shape, mask=mask)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    assert ndimage.label(mask)[1] == connected_components(graph)[0]
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    mask = face > 150
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    graph = grid_to_graph(*face.shape, mask=mask, dtype=None)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/test_image.py:    assert ndimage.label(mask)[1] == connected_components(graph)[0]
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_extraction/tests/__pycache__/test_image.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/_dict_vectorizer.py:            Boolean mask or list of indices (as returned by the get_support
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:        # Calculate a mask based on document frequencies
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:        mask = np.ones(len(dfs), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:            mask &= dfs <= high
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:            mask &= dfs >= low
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:        if limit is not None and mask.sum() > limit:
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:            mask_inds = (-tfs[mask]).argsort()[:limit]
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:            new_mask = np.zeros(len(dfs), dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:            new_mask[np.where(mask)[0][mask_inds]] = True
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:            mask = new_mask
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:        new_indices = np.cumsum(mask) - 1  # maps old indices to new
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:            if mask[old_index]:
./venv/lib/python3.8/site-packages/sklearn/feature_extraction/text.py:        kept_indices = np.where(mask)[0]
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_extraction/__pycache__/_dict_vectorizer.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_extraction/__pycache__/image.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/feature_extraction/__pycache__/text.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/semi_supervised/_label_propagation.py:            diag_mask = laplacian.row == laplacian.col
./venv/lib/python3.8/site-packages/sklearn/semi_supervised/_label_propagation.py:            laplacian.data[diag_mask] = 0.0
./venv/lib/python3.8/site-packages/sklearn/semi_supervised/_self_training.py:from ..utils import safe_mask
./venv/lib/python3.8/site-packages/sklearn/semi_supervised/_self_training.py:                X[safe_mask(X, has_label)], self.transduction_[has_label]
./venv/lib/python3.8/site-packages/sklearn/semi_supervised/_self_training.py:            prob = self.base_estimator_.predict_proba(X[safe_mask(X, ~has_label)])
./venv/lib/python3.8/site-packages/sklearn/semi_supervised/_self_training.py:                    # NB these are indices, not a mask
./venv/lib/python3.8/site-packages/sklearn/semi_supervised/_self_training.py:            X[safe_mask(X, has_label)], self.transduction_[has_label]
Binary file ./venv/lib/python3.8/site-packages/sklearn/semi_supervised/__pycache__/_label_propagation.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/semi_supervised/__pycache__/_self_training.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/linear_model/_theil_sen.py:    mask = diff_norm >= _EPSILON
./venv/lib/python3.8/site-packages/sklearn/linear_model/_theil_sen.py:    is_x_old_in_X = int(mask.sum() < X.shape[0])
./venv/lib/python3.8/site-packages/sklearn/linear_model/_theil_sen.py:    diff = diff[mask]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_theil_sen.py:    diff_norm = diff_norm[mask][:, np.newaxis]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_theil_sen.py:        new_direction = np.sum(X[mask, :] / diff_norm, axis=0) / np.sum(
./venv/lib/python3.8/site-packages/sklearn/linear_model/_base.py:            constant_mask = _is_constant_feature(X_var, X_offset, X.shape[0])
./venv/lib/python3.8/site-packages/sklearn/linear_model/_base.py:            X_scale[constant_mask] = 1.0
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_sgd.py:def test_validation_mask_correctly_subsets(monkeypatch):
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_base.py:    constant_mask = X_sample_weight_var < 10 * np.finfo(X.dtype).eps
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_base.py:    assert_array_equal(constant_mask, [0, 0, 1, 1])
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_base.py:    expected_X_scale[constant_mask] = 1
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    # Ground truth / reference inlier mask
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_).astype(np.bool_)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask[outliers] = False
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_).astype(np.bool_)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask[outliers] = False
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_).astype(np.bool_)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask[outliers] = False
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_).astype(np.bool_)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask[outliers] = False
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    # Ground truth / reference inlier mask
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_).astype(np.bool_)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask[outliers] = False
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    # Ground truth / reference inlier mask
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_).astype(np.bool_)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask[outliers] = False
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    assert ransac_estimator.inlier_mask_.shape[0] == n_samples
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask = np.ones_like(ransac_estimator.inlier_mask_).astype(np.bool_)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    ref_inlier_mask[outliers] = False
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    # check that mask is correct
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    assert_array_equal(ransac_estimator.inlier_mask_, ref_inlier_mask)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:    mask_samples = ransac.inlier_mask_
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ransac.py:        X[mask_samples], y[mask_samples], sample_weight=sample_weight[mask_samples]
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/__pycache__/test_sgd.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/__pycache__/test_ridge.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/__pycache__/test_ransac.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/__pycache__/test_huber.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/__pycache__/test_base.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    n_outliers_mask_1 = huber.outliers_
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    assert not np.all(n_outliers_mask_1)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    n_outliers_mask_2 = huber.outliers_
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    assert_array_equal(n_outliers_mask_2, n_outliers_mask_1)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    n_outliers_mask_3 = huber.outliers_
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    assert_array_equal(n_outliers_mask_3, n_outliers_mask_1)
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    mask = np.abs(linear_loss) < huber.epsilon * huber.scale_
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    huber_score = huber.score(X[mask], y[mask])
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    huber_outlier_score = huber.score(X[~mask], y[~mask])
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    ridge_score = ridge.score(X[mask], y[mask])
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_huber.py:    ridge_outlier_score = ridge.score(X[~mask], y[~mask])
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ridge.py:    mask = (
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ridge.py:    X[~mask] = 0.0
./venv/lib/python3.8/site-packages/sklearn/linear_model/tests/test_ridge.py:    removed_X[mask] = 0.0
./venv/lib/python3.8/site-packages/sklearn/linear_model/_quantile.py:        n_indices = len(indices)  # use n_mask instead of n_samples
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    outliers_mask = abs_linear_loss > epsilon * sigma
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    outliers = abs_linear_loss[outliers_mask]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    num_outliers = np.count_nonzero(outliers_mask)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    outliers_sw = sample_weight[outliers_mask]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    non_outliers = linear_loss[~outliers_mask]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    weighted_non_outliers = sample_weight[~outliers_mask] * non_outliers
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    X_non_outliers = -axis0_safe_slice(X, ~outliers_mask, n_non_outliers)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    signed_outliers_mask = linear_loss[outliers_mask] < 0
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    signed_outliers[signed_outliers_mask] = -1.0
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    X_outliers = axis0_safe_slice(X, outliers_mask, num_outliers)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:    sw_outliers = sample_weight[outliers_mask] * signed_outliers
./venv/lib/python3.8/site-packages/sklearn/linear_model/_huber.py:        A boolean mask which is set to True where the samples are identified
./venv/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:        mask = np.all(np.isfinite(mse_path), axis=-1)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:        all_alphas = all_alphas[mask]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:        mse_path = mse_path[mask]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:            mask = np.abs(coef) > np.finfo(coef.dtype).eps
./venv/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:            if not np.any(mask):
./venv/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:            # Xc = X[:, mask]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_least_angle.py:            degrees_of_freedom[k] = np.sum(mask)
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/__pycache__/_least_angle.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/__pycache__/_stochastic_gradient.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/__pycache__/_ransac.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/__pycache__/_base.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/__pycache__/_theil_sen.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/__pycache__/_huber.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/__pycache__/_logistic.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:    def _make_validation_split(self, y, sample_mask):
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        sample_mask : ndarray of shape (n_samples, )
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        validation_mask : ndarray of shape (n_samples, )
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        validation_mask = np.zeros(n_samples, dtype=np.bool_)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:            return validation_mask
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        if not np.any(sample_mask[idx_val]):
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        validation_mask[idx_val] = True
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        return validation_mask
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        self, validation_mask, X, y, sample_weight, classes=None
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:            X[validation_mask],
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:            y[validation_mask],
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:            sample_weight[validation_mask],
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:    validation_mask=None,
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:    validation_mask : numpy array of shape [n_samples, ], default=None
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        Precomputed validation mask in case _fit_binary is called in the
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:    if validation_mask is None:
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        validation_mask = est._make_validation_split(y_i, sample_mask=sample_weight > 0)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        validation_mask, X, y_i, sample_weight, classes=classes
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        validation_mask,
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        validation_mask = self._make_validation_split(y, sample_mask=sample_weight > 0)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:                validation_mask=validation_mask,
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        validation_mask = self._make_validation_split(y, sample_mask=sample_weight > 0)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:            validation_mask, X, y, sample_weight
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:            validation_mask,
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        # validation_mask and validation_score_cb will be set to values
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:        validation_mask = self._make_validation_split(y, sample_mask=sample_weight > 0)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:            validation_mask, X, y, sample_weight
./venv/lib/python3.8/site-packages/sklearn/linear_model/_stochastic_gradient.py:            validation_mask,
./venv/lib/python3.8/site-packages/sklearn/linear_model/_ransac.py:    inlier_mask_ : bool array of shape [n_samples]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_ransac.py:        Boolean mask of inliers classified as ``True``.
./venv/lib/python3.8/site-packages/sklearn/linear_model/_ransac.py:        inlier_mask_best = None
./venv/lib/python3.8/site-packages/sklearn/linear_model/_ransac.py:            inlier_mask_subset = residuals_subset <= residual_threshold
./venv/lib/python3.8/site-packages/sklearn/linear_model/_ransac.py:            n_inliers_subset = np.sum(inlier_mask_subset)
./venv/lib/python3.8/site-packages/sklearn/linear_model/_ransac.py:            inlier_idxs_subset = sample_idxs[inlier_mask_subset]
./venv/lib/python3.8/site-packages/sklearn/linear_model/_ransac.py:            inlier_mask_best = inlier_mask_subset
./venv/lib/python3.8/site-packages/sklearn/linear_model/_ransac.py:        if inlier_mask_best is None:
./venv/lib/python3.8/site-packages/sklearn/linear_model/_ransac.py:        self.inlier_mask_ = inlier_mask_best
Binary file ./venv/lib/python3.8/site-packages/sklearn/linear_model/_sgd_fast.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:    # the class_weights are assigned after masking the labels with a OvR.
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:    # For doing a ovr, we need to mask the labels first. For the
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:        mask = y == pos_class
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:            mask_classes = np.array([0, 1])
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:            y_bin[~mask] = 0.0
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:            mask_classes = np.array([-1, 1])
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:            y_bin[~mask] = -1.0
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:                class_weight, classes=mask_classes, y=y_bin
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:        mask = y_test == pos_class
./venv/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:        y_test[~mask] = -1.0
./venv/lib/python3.8/site-packages/sklearn/compose/tests/test_column_transformer.py:        # boolean mask
./venv/lib/python3.8/site-packages/sklearn/compose/tests/test_column_transformer.py:        # boolean mask
./venv/lib/python3.8/site-packages/sklearn/compose/tests/test_column_transformer.py:def test_column_transformer_mask_indexing(array_type):
Binary file ./venv/lib/python3.8/site-packages/sklearn/compose/tests/__pycache__/test_column_transformer.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/tests/test_multiclass.py:    mask = rng.choice([1, 0], X.shape, p=[0.1, 0.9]).astype(bool)
./venv/lib/python3.8/site-packages/sklearn/tests/test_multiclass.py:    X[mask] = np.nan
./venv/lib/python3.8/site-packages/sklearn/tests/test_pipeline.py:    mask = np.random.choice([1, 0], X.shape, p=[0.1, 0.9]).astype(bool)
./venv/lib/python3.8/site-packages/sklearn/tests/test_pipeline.py:    X[mask] = np.nan
./venv/lib/python3.8/site-packages/sklearn/tests/test_multioutput.py:    mask = rng.choice([1, 0], X.shape, p=[0.01, 0.99]).astype(bool)
./venv/lib/python3.8/site-packages/sklearn/tests/test_multioutput.py:    X[mask] = np.nan
Binary file ./venv/lib/python3.8/site-packages/sklearn/tests/__pycache__/test_multiclass.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/tests/__pycache__/test_multioutput.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/tests/__pycache__/test_pipeline.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/isotonic.py:        mask = sample_weight > 0
./venv/lib/python3.8/site-packages/sklearn/isotonic.py:        X, y, sample_weight = X[mask], y[mask], sample_weight[mask]
./venv/lib/python3.8/site-packages/sklearn/manifold/_spectral_embedding.py:        # speed up row-wise access to boolean connection mask
./venv/lib/python3.8/site-packages/sklearn/manifold/tests/test_spectral_embedding.py:        # We should retrieve the same component mask by starting by both ends
./venv/lib/python3.8/site-packages/sklearn/metrics/_base.py:        a_mask = y_true == a
./venv/lib/python3.8/site-packages/sklearn/metrics/_base.py:        b_mask = y_true == b
./venv/lib/python3.8/site-packages/sklearn/metrics/_base.py:        ab_mask = np.logical_or(a_mask, b_mask)
./venv/lib/python3.8/site-packages/sklearn/metrics/_base.py:            prevalence[ix] = np.average(ab_mask)
./venv/lib/python3.8/site-packages/sklearn/metrics/_base.py:        a_true = a_mask[ab_mask]
./venv/lib/python3.8/site-packages/sklearn/metrics/_base.py:        b_true = b_mask[ab_mask]
./venv/lib/python3.8/site-packages/sklearn/metrics/_base.py:        a_true_score = binary_metric(a_true, y_score[ab_mask, a])
./venv/lib/python3.8/site-packages/sklearn/metrics/_base.py:        b_true_score = binary_metric(b_true, y_score[ab_mask, b])
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_score_objects.py:    mask_last_class = y == lr.classes_[-1]
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_score_objects.py:    X_test, y_test = X[~mask_last_class], y[~mask_last_class]
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_pairwise.py:    X_masked = rng.random_sample((5, 4)).astype(global_dtype, copy=False)
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_pairwise.py:    Y_masked = rng.random_sample((2, 4)).astype(global_dtype, copy=False)
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_pairwise.py:    X_masked[0, 0] = np.nan
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_pairwise.py:    Y_masked[0, 0] = np.nan
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_pairwise.py:    S_masked = pairwise_distances(X_masked, Y_masked, metric="nan_euclidean")
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_pairwise.py:    S2_masked = nan_euclidean_distances(X_masked, Y_masked)
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_pairwise.py:    assert_allclose(S_masked, S2_masked)
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_pairwise.py:    assert S_masked.dtype == S2_masked.dtype == global_dtype
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_classification.py:    mask = [1] * 10 + [0] * 10
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_classification.py:        assert_almost_equal(matthews_corrcoef(y_1, y_2, sample_weight=mask), 0.0)
./venv/lib/python3.8/site-packages/sklearn/metrics/tests/test_classification.py:    # by masking the weight of samples not in the first two classes
Binary file ./venv/lib/python3.8/site-packages/sklearn/metrics/tests/__pycache__/test_score_objects.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/metrics/tests/__pycache__/test_classification.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/metrics/tests/__pycache__/test_pairwise.cpython-38.pyc matches
./venv/lib/python3.8/site-packages/sklearn/metrics/_ranking.py:        nonzero_weight_mask = sample_weight != 0
./venv/lib/python3.8/site-packages/sklearn/metrics/_ranking.py:        y_true = y_true[nonzero_weight_mask]
./venv/lib/python3.8/site-packages/sklearn/metrics/_ranking.py:        y_score = y_score[nonzero_weight_mask]
./venv/lib/python3.8/site-packages/sklearn/metrics/_ranking.py:        sample_weight = sample_weight[nonzero_weight_mask]
./venv/lib/python3.8/site-packages/sklearn/metrics/_ranking.py:    y_score_mask = np.ma.masked_array(y_score, mask=np.logical_not(y_true))
./venv/lib/python3.8/site-packages/sklearn/metrics/_ranking.py:    y_min_relevant = y_score_mask.min(axis=1).reshape((-1, 1))
./venv/lib/python3.8/site-packages/sklearn/metrics/pairwise.py:from ..utils._mask import _get_mask
./venv/lib/python3.8/site-packages/sklearn/metrics/pairwise.py:    # Get missing mask for X
./venv/lib/python3.8/site-packages/sklearn/metrics/pairwise.py:    missing_X = _get_mask(X, missing_values)
./venv/lib/python3.8/site-packages/sklearn/metrics/pairwise.py:    # Get missing mask for Y
./venv/lib/python3.8/site-packages/sklearn/metrics/pairwise.py:    missing_Y = missing_X if Y is X else _get_mask(Y, missing_values)
./venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:    mask = denominator == 0.0
./venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:    denominator[mask] = 1  # avoid infs/nans
./venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:    if not np.any(mask):
./venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:    result[mask] = 0.0 if zero_division in ["warn", 0] else 1.0
./venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:        mask = np.ones_like(pred_decision, dtype=bool)
./venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:        mask[np.arange(y_true.shape[0]), y_true] = False
./venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:        margin = pred_decision[~mask]
./venv/lib/python3.8/site-packages/sklearn/metrics/_classification.py:        margin -= np.max(pred_decision[mask].reshape(y_true.shape[0], -1), axis=1)
Binary file ./venv/lib/python3.8/site-packages/sklearn/metrics/__pycache__/_ranking.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/metrics/__pycache__/_classification.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/metrics/__pycache__/pairwise.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/metrics/__pycache__/_base.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/svm/_libsvm_sparse.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/sklearn/svm/_base.py:                "boolean masks (use `indices=True` in CV)."
./venv/lib/python3.8/site-packages/sklearn/svm/tests/test_svm.py:def test_negative_sample_weights_mask_all_samples(Estimator, err_msg, sample_weight):
./venv/lib/python3.8/site-packages/sklearn/svm/tests/test_svm.py:    ids=["mask-label-1", "mask-label-2"],
./venv/lib/python3.8/site-packages/sklearn/svm/tests/test_svm.py:    "sample_weight, mask_side",
./venv/lib/python3.8/site-packages/sklearn/svm/tests/test_svm.py:    ids=["partial-mask-label-1", "partial-mask-label-2"],
./venv/lib/python3.8/site-packages/sklearn/svm/tests/test_svm.py:    Classifier, model, sample_weight, mask_side
./venv/lib/python3.8/site-packages/sklearn/svm/tests/test_svm.py:    assert_allclose(clf.coef_, [model[mask_side]], rtol=1e-3)
./venv/lib/python3.8/site-packages/sklearn/svm/tests/test_svm.py:    ids=["partial-mask-label-1", "partial-mask-label-2"],
Binary file ./venv/lib/python3.8/site-packages/sklearn/svm/tests/__pycache__/test_svm.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/svm/_liblinear.cpython-38-x86_64-linux-gnu.so matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/svm/__pycache__/_base.cpython-38.pyc matches
Binary file ./venv/lib/python3.8/site-packages/sklearn/svm/_libsvm.cpython-38-x86_64-linux-gnu.so matches
./venv/lib/python3.8/site-packages/sklearn/calibration.py:    mask_negative_samples = y <= 0
./venv/lib/python3.8/site-packages/sklearn/calibration.py:        prior0 = (sample_weight[mask_negative_samples]).sum()
./venv/lib/python3.8/site-packages/sklearn/calibration.py:        prior1 = (sample_weight[~mask_negative_samples]).sum()
./venv/lib/python3.8/site-packages/sklearn/calibration.py:        prior0 = float(np.sum(mask_negative_samples))
./venv/lib/python3.8/site-packages/sklearn/naive_bayes.py:                mask = Y[:, j].astype(bool)
./venv/lib/python3.8/site-packages/sklearn/naive_bayes.py:                    weights = Y[mask, j]
./venv/lib/python3.8/site-packages/sklearn/naive_bayes.py:                counts = np.bincount(X_feature[mask], weights=weights)
./venv/lib/python3.8/site-packages/sklearn/co